#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VaultGateComponent

#include "Basic.hpp"

#include "CALocalisationRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VaultGateComponent.BP_VaultGateComponent_C
// 0x0080 (0x0580 - 0x0500)
class UBP_VaultGateComponent_C final : public UCAGameplayTransitionComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0500(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         VaultLevel;                                        // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Interaction;                                       // 0x0510(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InteractionDuration;                               // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IconLocation;                                      // 0x051C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReleasing;                                       // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PhaseProgressStamps;                               // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsAlerted;                                         // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Registered_map_icon;                               // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECAUIHUDEntityId                              Map_icon_type;                                     // 0x0542(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_543[0x1];                                      // 0x0543(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecurityAgentDuration;                             // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCAText                                VaultName;                                         // 0x0548(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 VaultUser;                                         // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VaultGateComponent(int32 EntryPoint);
	void NotifyTagRemoved(const struct FGameplayTag& Tag);
	void NotifyDisabled();
	void NotifyTagAdded(const struct FGameplayTag& Tag);
	void InteractionComplete();
	void NotifyAbilityEnded(class AActor* User, bool WasCancelled);
	void NotifyAbilityActivated(class AActor* User);
	void ReceiveBeginPlay();
	void UpdateMapMarker(ECAUIHUDEntityId Entity_id);
	void SetVaultLevel(int32 Level);
	void CalculatePhaseProgressStamps();
	void OnReleaseProgressUpdate(float Progress);
	void OnVaultRelease(const struct FCATeamID& Team);
	void Set_Icon_Location(const struct FVector& RelativeOffsetLocation);
	void RemoveVaultFromSecurity();
	void GetSecurityAreas(TArray<class AActor*>* Areas);
	void AddVaultToSecurityArea(float AgentDuration, const struct FGameplayTag& SecurityMissionTrigger);
	void BindToReleaseEvents();
	void ApplySecurityTrigger(const struct FGameplayTag& Mission_trigger);
	void SetVaultName(const struct FCAText& Name_0);

	bool CanGiveAbility(class AActor* User) const;
	bool CanUseAbility(class AActor* User) const;
	float GetAbilityUseProgress(class AActor* User) const;
	void GetPrimaryMessageType(class FName* Event_type) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VaultGateComponent_C">();
	}
	static class UBP_VaultGateComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_VaultGateComponent_C>();
	}
};
static_assert(alignof(UBP_VaultGateComponent_C) == 0x000008, "Wrong alignment on UBP_VaultGateComponent_C");
static_assert(sizeof(UBP_VaultGateComponent_C) == 0x000580, "Wrong size on UBP_VaultGateComponent_C");
static_assert(offsetof(UBP_VaultGateComponent_C, UberGraphFrame) == 0x000500, "Member 'UBP_VaultGateComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, VaultLevel) == 0x000508, "Member 'UBP_VaultGateComponent_C::VaultLevel' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, Interaction) == 0x000510, "Member 'UBP_VaultGateComponent_C::Interaction' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, InteractionDuration) == 0x000518, "Member 'UBP_VaultGateComponent_C::InteractionDuration' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, IconLocation) == 0x00051C, "Member 'UBP_VaultGateComponent_C::IconLocation' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, IsReleasing) == 0x000528, "Member 'UBP_VaultGateComponent_C::IsReleasing' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, PhaseProgressStamps) == 0x000530, "Member 'UBP_VaultGateComponent_C::PhaseProgressStamps' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, IsAlerted) == 0x000540, "Member 'UBP_VaultGateComponent_C::IsAlerted' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, Registered_map_icon) == 0x000541, "Member 'UBP_VaultGateComponent_C::Registered_map_icon' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, Map_icon_type) == 0x000542, "Member 'UBP_VaultGateComponent_C::Map_icon_type' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, SecurityAgentDuration) == 0x000544, "Member 'UBP_VaultGateComponent_C::SecurityAgentDuration' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, VaultName) == 0x000548, "Member 'UBP_VaultGateComponent_C::VaultName' has a wrong offset!");
static_assert(offsetof(UBP_VaultGateComponent_C, VaultUser) == 0x000578, "Member 'UBP_VaultGateComponent_C::VaultUser' has a wrong offset!");

}

