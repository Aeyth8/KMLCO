#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Elite_Server_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Elite_Server_01.ABP_Elite_Server_01_C
// 0x1000 (0x1410 - 0x0410)
class UABP_Elite_Server_01_C final : public UCAAnimInstance_NPC
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x0418(0x00E8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x0500(0x00E8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x05E8(0x00D0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x06B8(0x00E8)()
	struct FAnimNode_RefPose                      AnimGraphNode_IdentityPose;                        // 0x07A0(0x0018)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x07B8(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0878(0x00E8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0960(0x0038)()
	struct FAnimNode_RotateRootBone               AnimGraphNode_RotateRootBone;                      // 0x0998(0x00E0)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace_1;          // 0x0A78(0x0198)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0C10(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0D68(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0D98(0x0030)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace;            // 0x0DC8(0x0198)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0F60(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x0FE0(0x00A0)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x1080(0x0018)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x1098(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1138(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x11B8(0x00E8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x12A0(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1320(0x00A0)()
	float                                         HeadingDelta;                                      // 0x13C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AimOffsetRotator;                                  // 0x13C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ACACharacter_NPC*                       CACharacter_NPC;                                   // 0x13D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ACAProjectileBase*>              OverlappingProjectiles;                            // 0x13D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          HasProjectileOverlap;                              // 0x13E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDead;                                            // 0x13E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13EA[0x2];                                     // 0x13EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AIHeading;                                         // 0x13EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHeading;                                    // 0x13F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentHeading;                                    // 0x13F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsFacingAim;                                    // 0x13F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13F9[0x3];                                     // 0x13F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetHeading;                                     // 0x13FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAware;                                           // 0x1400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInCombat;                                        // 0x1401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFiring;                                          // 0x1402(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFloating;                                        // 0x1403(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ABP_Elite_Server_01(int32 EntryPoint);
	void OnPoolStateChanged(bool Is_in_pool);
	void OnDeath(class ACACharacter* Character, const struct FGameplayEffectSpec& Death_gameplay_effect_spec, float Damage_magnitude, const struct FNetworkedHit& Networked_hit, const class AActor* Killer);
	void OnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Elite_Server_01_C">();
	}
	static class UABP_Elite_Server_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Elite_Server_01_C>();
	}
};
static_assert(alignof(UABP_Elite_Server_01_C) == 0x000010, "Wrong alignment on UABP_Elite_Server_01_C");
static_assert(sizeof(UABP_Elite_Server_01_C) == 0x001410, "Wrong size on UABP_Elite_Server_01_C");
static_assert(offsetof(UABP_Elite_Server_01_C, UberGraphFrame) == 0x000410, "Member 'UABP_Elite_Server_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_Slot_4) == 0x000418, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_Slot_3) == 0x000500, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_ApplyAdditive) == 0x0005E8, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_Slot_2) == 0x0006B8, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_IdentityPose) == 0x0007A0, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_IdentityPose' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_LayeredBoneBlend) == 0x0007B8, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_Slot_1) == 0x000878, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_Root) == 0x000960, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_RotateRootBone) == 0x000998, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_RotateRootBone' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_RotationOffsetBlendSpace_1) == 0x000A78, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_RotationOffsetBlendSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_SaveCachedPose) == 0x000C10, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_UseCachedPose_1) == 0x000D68, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_UseCachedPose) == 0x000D98, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_RotationOffsetBlendSpace) == 0x000DC8, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_RotationOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_SequencePlayer_2) == 0x000F60, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_BlendListByBool_2) == 0x000FE0, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_LocalRefPose) == 0x001080, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_BlendListByBool_1) == 0x001098, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_SequencePlayer_1) == 0x001138, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_Slot) == 0x0011B8, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_SequencePlayer) == 0x0012A0, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AnimGraphNode_BlendListByBool) == 0x001320, "Member 'UABP_Elite_Server_01_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, HeadingDelta) == 0x0013C0, "Member 'UABP_Elite_Server_01_C::HeadingDelta' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AimOffsetRotator) == 0x0013C4, "Member 'UABP_Elite_Server_01_C::AimOffsetRotator' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, CACharacter_NPC) == 0x0013D0, "Member 'UABP_Elite_Server_01_C::CACharacter_NPC' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, OverlappingProjectiles) == 0x0013D8, "Member 'UABP_Elite_Server_01_C::OverlappingProjectiles' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, HasProjectileOverlap) == 0x0013E8, "Member 'UABP_Elite_Server_01_C::HasProjectileOverlap' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, IsDead) == 0x0013E9, "Member 'UABP_Elite_Server_01_C::IsDead' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, AIHeading) == 0x0013EC, "Member 'UABP_Elite_Server_01_C::AIHeading' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, CapsuleHeading) == 0x0013F0, "Member 'UABP_Elite_Server_01_C::CapsuleHeading' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, CurrentHeading) == 0x0013F4, "Member 'UABP_Elite_Server_01_C::CurrentHeading' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, NeedsFacingAim) == 0x0013F8, "Member 'UABP_Elite_Server_01_C::NeedsFacingAim' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, TargetHeading) == 0x0013FC, "Member 'UABP_Elite_Server_01_C::TargetHeading' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, IsAware) == 0x001400, "Member 'UABP_Elite_Server_01_C::IsAware' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, IsInCombat) == 0x001401, "Member 'UABP_Elite_Server_01_C::IsInCombat' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, IsFiring) == 0x001402, "Member 'UABP_Elite_Server_01_C::IsFiring' has a wrong offset!");
static_assert(offsetof(UABP_Elite_Server_01_C, IsFloating) == 0x001403, "Member 'UABP_Elite_Server_01_C::IsFloating' has a wrong offset!");

}

