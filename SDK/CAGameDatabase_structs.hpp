#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CAGameDatabase

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum CAGameDatabase.FDatabaseAssetPolicy
// NumValues: 0x0003
enum class EFDatabaseAssetPolicy : uint8
{
	LoadOnInit                               = 0,
	LoadOnDemand                             = 1,
	FDatabaseAssetPolicy_MAX                 = 2,
};

// ScriptStruct CAGameDatabase.CAGameDatabaseColumnID
// 0x0004 (0x0004 - 0x0000)
struct FCAGameDatabaseColumnID final
{
public:
	uint32                                        M_column_id_val;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCAGameDatabaseColumnID) == 0x000004, "Wrong alignment on FCAGameDatabaseColumnID");
static_assert(sizeof(FCAGameDatabaseColumnID) == 0x000004, "Wrong size on FCAGameDatabaseColumnID");
static_assert(offsetof(FCAGameDatabaseColumnID, M_column_id_val) == 0x000000, "Member 'FCAGameDatabaseColumnID::M_column_id_val' has a wrong offset!");

// ScriptStruct CAGameDatabase.CAGameDatabaseColumnHandle
// 0x0004 (0x0004 - 0x0000)
struct FCAGameDatabaseColumnHandle final
{
public:
	struct FCAGameDatabaseColumnID                M_column_id;                                       // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAGameDatabaseColumnHandle) == 0x000004, "Wrong alignment on FCAGameDatabaseColumnHandle");
static_assert(sizeof(FCAGameDatabaseColumnHandle) == 0x000004, "Wrong size on FCAGameDatabaseColumnHandle");
static_assert(offsetof(FCAGameDatabaseColumnHandle, M_column_id) == 0x000000, "Member 'FCAGameDatabaseColumnHandle::M_column_id' has a wrong offset!");

// ScriptStruct CAGameDatabase.CAGameDatabaseRowHandle
// 0x0018 (0x0018 - 0x0000)
struct FCAGameDatabaseRowHandle final
{
public:
	class FName                                   M_datatable_name;                                  // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_row_name;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAGameDatabaseRowHandle) == 0x000004, "Wrong alignment on FCAGameDatabaseRowHandle");
static_assert(sizeof(FCAGameDatabaseRowHandle) == 0x000018, "Wrong size on FCAGameDatabaseRowHandle");
static_assert(offsetof(FCAGameDatabaseRowHandle, M_datatable_name) == 0x000000, "Member 'FCAGameDatabaseRowHandle::M_datatable_name' has a wrong offset!");
static_assert(offsetof(FCAGameDatabaseRowHandle, M_row_name) == 0x00000C, "Member 'FCAGameDatabaseRowHandle::M_row_name' has a wrong offset!");

// ScriptStruct CAGameDatabase.CADataTableRowHandle
// 0x0000 (0x0018 - 0x0018)
struct FCADataTableRowHandle final : public FDataTableRowHandle
{
};
static_assert(alignof(FCADataTableRowHandle) == 0x000008, "Wrong alignment on FCADataTableRowHandle");
static_assert(sizeof(FCADataTableRowHandle) == 0x000018, "Wrong size on FCADataTableRowHandle");

// ScriptStruct CAGameDatabase.DatabaseEntryHandler
// 0x0004 (0x0004 - 0x0000)
struct FDatabaseEntryHandler final
{
public:
	uint32                                        M_data_table_id_val;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDatabaseEntryHandler) == 0x000004, "Wrong alignment on FDatabaseEntryHandler");
static_assert(sizeof(FDatabaseEntryHandler) == 0x000004, "Wrong size on FDatabaseEntryHandler");
static_assert(offsetof(FDatabaseEntryHandler, M_data_table_id_val) == 0x000000, "Member 'FDatabaseEntryHandler::M_data_table_id_val' has a wrong offset!");

// ScriptStruct CAGameDatabase.CAGameDatabaseHandle
// 0x0004 (0x0004 - 0x0000)
struct FCAGameDatabaseHandle final
{
public:
	struct FDatabaseEntryHandler                  M_data_table_id;                                   // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAGameDatabaseHandle) == 0x000004, "Wrong alignment on FCAGameDatabaseHandle");
static_assert(sizeof(FCAGameDatabaseHandle) == 0x000004, "Wrong size on FCAGameDatabaseHandle");
static_assert(offsetof(FCAGameDatabaseHandle, M_data_table_id) == 0x000000, "Member 'FCAGameDatabaseHandle::M_data_table_id' has a wrong offset!");

// ScriptStruct CAGameDatabase.CAGameDatabaseRowID
// 0x0004 (0x0004 - 0x0000)
struct FCAGameDatabaseRowID final
{
public:
	uint32                                        M_row_id_val;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCAGameDatabaseRowID) == 0x000004, "Wrong alignment on FCAGameDatabaseRowID");
static_assert(sizeof(FCAGameDatabaseRowID) == 0x000004, "Wrong size on FCAGameDatabaseRowID");
static_assert(offsetof(FCAGameDatabaseRowID, M_row_id_val) == 0x000000, "Member 'FCAGameDatabaseRowID::M_row_id_val' has a wrong offset!");

// ScriptStruct CAGameDatabase.CAGameDatabaseTypedRowHandle
// 0x0004 (0x0004 - 0x0000)
struct FCAGameDatabaseTypedRowHandle final
{
public:
	struct FCAGameDatabaseRowID                   M_row_id;                                          // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAGameDatabaseTypedRowHandle) == 0x000004, "Wrong alignment on FCAGameDatabaseTypedRowHandle");
static_assert(sizeof(FCAGameDatabaseTypedRowHandle) == 0x000004, "Wrong size on FCAGameDatabaseTypedRowHandle");
static_assert(offsetof(FCAGameDatabaseTypedRowHandle, M_row_id) == 0x000000, "Member 'FCAGameDatabaseTypedRowHandle::M_row_id' has a wrong offset!");

// ScriptStruct CAGameDatabase.CAGameDatabaseCellHandle
// 0x000C (0x000C - 0x0000)
struct FCAGameDatabaseCellHandle final
{
public:
	struct FCAGameDatabaseHandle                  M_datatable_handle;                                // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCAGameDatabaseTypedRowHandle          M_row_handle;                                      // 0x0004(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCAGameDatabaseColumnHandle            M_column_handle;                                   // 0x0008(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAGameDatabaseCellHandle) == 0x000004, "Wrong alignment on FCAGameDatabaseCellHandle");
static_assert(sizeof(FCAGameDatabaseCellHandle) == 0x00000C, "Wrong size on FCAGameDatabaseCellHandle");
static_assert(offsetof(FCAGameDatabaseCellHandle, M_datatable_handle) == 0x000000, "Member 'FCAGameDatabaseCellHandle::M_datatable_handle' has a wrong offset!");
static_assert(offsetof(FCAGameDatabaseCellHandle, M_row_handle) == 0x000004, "Member 'FCAGameDatabaseCellHandle::M_row_handle' has a wrong offset!");
static_assert(offsetof(FCAGameDatabaseCellHandle, M_column_handle) == 0x000008, "Member 'FCAGameDatabaseCellHandle::M_column_handle' has a wrong offset!");

// ScriptStruct CAGameDatabase.DatabaseAsset
// 0x0088 (0x0090 - 0x0008)
struct FDatabaseAsset final : public FTableRowBase
{
public:
	struct FFeatureObjectPtr                      Datatable;                                         // 0x0008(0x0068)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFDatabaseAssetPolicy                         Loading_policy;                                    // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Datatable_meta_type;                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Exclude_from_extra_resources;                      // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatabaseAsset) == 0x000008, "Wrong alignment on FDatabaseAsset");
static_assert(sizeof(FDatabaseAsset) == 0x000090, "Wrong size on FDatabaseAsset");
static_assert(offsetof(FDatabaseAsset, Datatable) == 0x000008, "Member 'FDatabaseAsset::Datatable' has a wrong offset!");
static_assert(offsetof(FDatabaseAsset, Loading_policy) == 0x000070, "Member 'FDatabaseAsset::Loading_policy' has a wrong offset!");
static_assert(offsetof(FDatabaseAsset, Datatable_meta_type) == 0x000078, "Member 'FDatabaseAsset::Datatable_meta_type' has a wrong offset!");
static_assert(offsetof(FDatabaseAsset, Exclude_from_extra_resources) == 0x000088, "Member 'FDatabaseAsset::Exclude_from_extra_resources' has a wrong offset!");

// ScriptStruct CAGameDatabase.CAFeatureRowHandle
// 0x0034 (0x0034 - 0x0000)
struct FCAFeatureRowHandle final
{
public:
	struct FFeatureKeyItem                        Feature;                                           // 0x0000(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAGameDatabaseRowHandle               FeatureEntry;                                      // 0x0004(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAGameDatabaseRowHandle               DefaultEntry;                                      // 0x001C(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAFeatureRowHandle) == 0x000004, "Wrong alignment on FCAFeatureRowHandle");
static_assert(sizeof(FCAFeatureRowHandle) == 0x000034, "Wrong size on FCAFeatureRowHandle");
static_assert(offsetof(FCAFeatureRowHandle, Feature) == 0x000000, "Member 'FCAFeatureRowHandle::Feature' has a wrong offset!");
static_assert(offsetof(FCAFeatureRowHandle, FeatureEntry) == 0x000004, "Member 'FCAFeatureRowHandle::FeatureEntry' has a wrong offset!");
static_assert(offsetof(FCAFeatureRowHandle, DefaultEntry) == 0x00001C, "Member 'FCAFeatureRowHandle::DefaultEntry' has a wrong offset!");

// ScriptStruct CAGameDatabase.CADataTableHandle
// 0x0008 (0x0008 - 0x0000)
struct FCADataTableHandle final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCADataTableHandle) == 0x000008, "Wrong alignment on FCADataTableHandle");
static_assert(sizeof(FCADataTableHandle) == 0x000008, "Wrong size on FCADataTableHandle");
static_assert(offsetof(FCADataTableHandle, Table) == 0x000000, "Member 'FCADataTableHandle::Table' has a wrong offset!");

}

