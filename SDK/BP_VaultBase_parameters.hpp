#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VaultBase

#include "Basic.hpp"

#include "Keaton_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_VaultBase.BP_VaultBase_C.ExecuteUbergraph_BP_VaultBase
// 0x01D0 (0x01D0 - 0x0000)
struct BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACASecurityArea*>                CallFunc_GetSecurityAreas_Security_Areas;          // 0x0008(0x0010)(ReferenceParm)
	class AActor*                                 K2Node_Event_User;                                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCAVaultActorData                      K2Node_Event_VaultData;                            // 0x0020(0x0088)()
	struct FGameplayTag                           K2Node_Event_Tag;                                  // 0x00A8(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCATeamID                              CallFunc_GetTeamID_ReturnValue;                    // 0x00B8(0x0004)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_IsLockdown;             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Heist_Contract_GM_C*                K2Node_DynamicCast_AsBP_Heist_Contract_GM;         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        K2Node_ComponentBoundEvent_OtherComp_1;            // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0100(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class USceneComponent*                        K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        K2Node_ComponentBoundEvent_OtherComp;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Player_C*                           K2Node_DynamicCast_AsBP_Player;                    // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Player_C*                           K2Node_DynamicCast_AsBP_Player_1;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase) == 0x000008, "Wrong alignment on BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase");
static_assert(sizeof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase) == 0x0001D0, "Wrong size on BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, EntryPoint) == 0x000000, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, CallFunc_GetSecurityAreas_Security_Areas) == 0x000008, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::CallFunc_GetSecurityAreas_Security_Areas' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_Event_User) == 0x000018, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_Event_User' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_Event_VaultData) == 0x000020, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_Event_VaultData' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_Event_Tag) == 0x0000A8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_Event_Tag' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, CallFunc_IsGameplayTagValid_ReturnValue) == 0x0000B4, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, CallFunc_IsValid_ReturnValue) == 0x0000B5, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, CallFunc_GetTeamID_ReturnValue) == 0x0000B8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_SwitchEnum_CmpSuccess) == 0x0000BC, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, CallFunc_GetGameMode_ReturnValue) == 0x0000C0, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_IsLockdown) == 0x0000C8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_IsLockdown' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_DynamicCast_AsBP_Heist_Contract_GM) == 0x0000D0, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_DynamicCast_AsBP_Heist_Contract_GM' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0000E0, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0000E8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0000F0, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0000F8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000FC, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_SweepResult) == 0x000100, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000190, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_OtherActor) == 0x000198, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_OtherComp) == 0x0001A0, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0001A8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_DynamicCast_AsBP_Player) == 0x0001B0, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_DynamicCast_AsBP_Player' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_DynamicCast_bSuccess_1) == 0x0001B8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_DynamicCast_AsBP_Player_1) == 0x0001C0, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_DynamicCast_AsBP_Player_1' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase, K2Node_DynamicCast_bSuccess_2) == 0x0001C8, "Member 'BP_VaultBase_C_ExecuteUbergraph_BP_VaultBase::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.BndEvt__BP_VaultBase_Vault Interior Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature final
{
public:
	class USceneComponent*                        OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.BndEvt__BP_VaultBase_Vault Interior Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class USceneComponent*                        OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_VaultBase_C_BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature final
{
public:
	bool                                          IsLockdown_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultBase_C_BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature) == 0x000001, "Wrong alignment on BP_VaultBase_C_BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature");
static_assert(sizeof(BP_VaultBase_C_BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature) == 0x000001, "Wrong size on BP_VaultBase_C_BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature");
static_assert(offsetof(BP_VaultBase_C_BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature, IsLockdown_0) == 0x000000, "Member 'BP_VaultBase_C_BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature::IsLockdown_0' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.SetCampTypeID
// 0x000C (0x000C - 0x0000)
struct BP_VaultBase_C_SetCampTypeID final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultBase_C_SetCampTypeID) == 0x000004, "Wrong alignment on BP_VaultBase_C_SetCampTypeID");
static_assert(sizeof(BP_VaultBase_C_SetCampTypeID) == 0x00000C, "Wrong size on BP_VaultBase_C_SetCampTypeID");
static_assert(offsetof(BP_VaultBase_C_SetCampTypeID, Tag) == 0x000000, "Member 'BP_VaultBase_C_SetCampTypeID::Tag' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.SetVaultCaptureID
// 0x0088 (0x0088 - 0x0000)
struct BP_VaultBase_C_SetVaultCaptureID final
{
public:
	struct FCAVaultActorData                      VaultData;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_VaultBase_C_SetVaultCaptureID) == 0x000008, "Wrong alignment on BP_VaultBase_C_SetVaultCaptureID");
static_assert(sizeof(BP_VaultBase_C_SetVaultCaptureID) == 0x000088, "Wrong size on BP_VaultBase_C_SetVaultCaptureID");
static_assert(offsetof(BP_VaultBase_C_SetVaultCaptureID, VaultData) == 0x000000, "Member 'BP_VaultBase_C_SetVaultCaptureID::VaultData' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.SetUserCapturing
// 0x0008 (0x0008 - 0x0000)
struct BP_VaultBase_C_SetUserCapturing final
{
public:
	class AActor*                                 User_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultBase_C_SetUserCapturing) == 0x000008, "Wrong alignment on BP_VaultBase_C_SetUserCapturing");
static_assert(sizeof(BP_VaultBase_C_SetUserCapturing) == 0x000008, "Wrong size on BP_VaultBase_C_SetUserCapturing");
static_assert(offsetof(BP_VaultBase_C_SetUserCapturing, User_0) == 0x000000, "Member 'BP_VaultBase_C_SetUserCapturing::User_0' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.GetSecurityAreas
// 0x0068 (0x0068 - 0x0000)
struct BP_VaultBase_C_GetSecurityAreas final
{
public:
	TArray<class ACASecurityArea*>                Security_Areas;                                    // 0x0000(0x0010)(Parm, OutParm)
	TArray<class ACASecurityArea*>                LocalSecuritAreas;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_overlaps;            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACASecurityArea*                        K2Node_DynamicCast_AsCASecurity_Area;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultBase_C_GetSecurityAreas) == 0x000008, "Wrong alignment on BP_VaultBase_C_GetSecurityAreas");
static_assert(sizeof(BP_VaultBase_C_GetSecurityAreas) == 0x000068, "Wrong size on BP_VaultBase_C_GetSecurityAreas");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, Security_Areas) == 0x000000, "Member 'BP_VaultBase_C_GetSecurityAreas::Security_Areas' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, LocalSecuritAreas) == 0x000010, "Member 'BP_VaultBase_C_GetSecurityAreas::LocalSecuritAreas' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_VaultBase_C_GetSecurityAreas::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_VaultBase_C_GetSecurityAreas::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_VaultBase_C_GetSecurityAreas::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, CallFunc_GetOverlappingActors_overlaps) == 0x000030, "Member 'BP_VaultBase_C_GetSecurityAreas::CallFunc_GetOverlappingActors_overlaps' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_VaultBase_C_GetSecurityAreas::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_VaultBase_C_GetSecurityAreas::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_VaultBase_C_GetSecurityAreas::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, K2Node_DynamicCast_AsCASecurity_Area) == 0x000058, "Member 'BP_VaultBase_C_GetSecurityAreas::K2Node_DynamicCast_AsCASecurity_Area' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_VaultBase_C_GetSecurityAreas::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_GetSecurityAreas, CallFunc_Array_Add_ReturnValue) == 0x000064, "Member 'BP_VaultBase_C_GetSecurityAreas::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.IsVaultBreached
// 0x0001 (0x0001 - 0x0000)
struct BP_VaultBase_C_IsVaultBreached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultBase_C_IsVaultBreached) == 0x000001, "Wrong alignment on BP_VaultBase_C_IsVaultBreached");
static_assert(sizeof(BP_VaultBase_C_IsVaultBreached) == 0x000001, "Wrong size on BP_VaultBase_C_IsVaultBreached");
static_assert(offsetof(BP_VaultBase_C_IsVaultBreached, ReturnValue) == 0x000000, "Member 'BP_VaultBase_C_IsVaultBreached::ReturnValue' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.SetHUDEntityID
// 0x000C (0x000C - 0x0000)
struct BP_VaultBase_C_SetHUDEntityID final
{
public:
	ECAUIHUDEntityId                              Ui_entity_id;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMapOrder_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldVaultHaveMarker_ShouldHaveMarker;   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultBase_C_SetHUDEntityID) == 0x000004, "Wrong alignment on BP_VaultBase_C_SetHUDEntityID");
static_assert(sizeof(BP_VaultBase_C_SetHUDEntityID) == 0x00000C, "Wrong size on BP_VaultBase_C_SetHUDEntityID");
static_assert(offsetof(BP_VaultBase_C_SetHUDEntityID, Ui_entity_id) == 0x000000, "Member 'BP_VaultBase_C_SetHUDEntityID::Ui_entity_id' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_SetHUDEntityID, CallFunc_GetMapOrder_ReturnValue) == 0x000004, "Member 'BP_VaultBase_C_SetHUDEntityID::CallFunc_GetMapOrder_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_SetHUDEntityID, CallFunc_ShouldVaultHaveMarker_ShouldHaveMarker) == 0x000008, "Member 'BP_VaultBase_C_SetHUDEntityID::CallFunc_ShouldVaultHaveMarker_ShouldHaveMarker' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_SetHUDEntityID, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'BP_VaultBase_C_SetHUDEntityID::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_SetHUDEntityID, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'BP_VaultBase_C_SetHUDEntityID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_SetHUDEntityID, CallFunc_IsValid_ReturnValue_1) == 0x00000B, "Member 'BP_VaultBase_C_SetHUDEntityID::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.GetMapEntityID
// 0x0004 (0x0004 - 0x0000)
struct BP_VaultBase_C_GetMapEntityID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultBase_C_GetMapEntityID) == 0x000004, "Wrong alignment on BP_VaultBase_C_GetMapEntityID");
static_assert(sizeof(BP_VaultBase_C_GetMapEntityID) == 0x000004, "Wrong size on BP_VaultBase_C_GetMapEntityID");
static_assert(offsetof(BP_VaultBase_C_GetMapEntityID, ReturnValue) == 0x000000, "Member 'BP_VaultBase_C_GetMapEntityID::ReturnValue' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.IsVaultInLockdown
// 0x0001 (0x0001 - 0x0000)
struct BP_VaultBase_C_IsVaultInLockdown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultBase_C_IsVaultInLockdown) == 0x000001, "Wrong alignment on BP_VaultBase_C_IsVaultInLockdown");
static_assert(sizeof(BP_VaultBase_C_IsVaultInLockdown) == 0x000001, "Wrong size on BP_VaultBase_C_IsVaultInLockdown");
static_assert(offsetof(BP_VaultBase_C_IsVaultInLockdown, ReturnValue) == 0x000000, "Member 'BP_VaultBase_C_IsVaultInLockdown::ReturnValue' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.IsVaultLooted
// 0x0001 (0x0001 - 0x0000)
struct BP_VaultBase_C_IsVaultLooted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultBase_C_IsVaultLooted) == 0x000001, "Wrong alignment on BP_VaultBase_C_IsVaultLooted");
static_assert(sizeof(BP_VaultBase_C_IsVaultLooted) == 0x000001, "Wrong size on BP_VaultBase_C_IsVaultLooted");
static_assert(offsetof(BP_VaultBase_C_IsVaultLooted, ReturnValue) == 0x000000, "Member 'BP_VaultBase_C_IsVaultLooted::ReturnValue' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.ShouldVaultHaveMarker
// 0x0130 (0x0130 - 0x0000)
struct BP_VaultBase_C_ShouldVaultHaveMarker final
{
public:
	ECAUIHUDEntityId                              MarkerID;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHaveMarker;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCALevelMapsRow                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x0028(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultBase_C_ShouldVaultHaveMarker) == 0x000008, "Wrong alignment on BP_VaultBase_C_ShouldVaultHaveMarker");
static_assert(sizeof(BP_VaultBase_C_ShouldVaultHaveMarker) == 0x000130, "Wrong size on BP_VaultBase_C_ShouldVaultHaveMarker");
static_assert(offsetof(BP_VaultBase_C_ShouldVaultHaveMarker, MarkerID) == 0x000000, "Member 'BP_VaultBase_C_ShouldVaultHaveMarker::MarkerID' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ShouldVaultHaveMarker, ShouldHaveMarker) == 0x000001, "Member 'BP_VaultBase_C_ShouldVaultHaveMarker::ShouldHaveMarker' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ShouldVaultHaveMarker, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_VaultBase_C_ShouldVaultHaveMarker::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ShouldVaultHaveMarker, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000008, "Member 'BP_VaultBase_C_ShouldVaultHaveMarker::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ShouldVaultHaveMarker, CallFunc_Conv_StringToName_ReturnValue) == 0x000018, "Member 'BP_VaultBase_C_ShouldVaultHaveMarker::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ShouldVaultHaveMarker, CallFunc_GetDataTableRowFromName_OutRow) == 0x000028, "Member 'BP_VaultBase_C_ShouldVaultHaveMarker::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ShouldVaultHaveMarker, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000128, "Member 'BP_VaultBase_C_ShouldVaultHaveMarker::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultBase_C_ShouldVaultHaveMarker, CallFunc_BooleanOR_ReturnValue) == 0x000129, "Member 'BP_VaultBase_C_ShouldVaultHaveMarker::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_VaultBase.BP_VaultBase_C.GetHUDEntityID
// 0x0001 (0x0001 - 0x0000)
struct BP_VaultBase_C_GetHUDEntityID final
{
public:
	ECAUIHUDEntityId                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultBase_C_GetHUDEntityID) == 0x000001, "Wrong alignment on BP_VaultBase_C_GetHUDEntityID");
static_assert(sizeof(BP_VaultBase_C_GetHUDEntityID) == 0x000001, "Wrong size on BP_VaultBase_C_GetHUDEntityID");
static_assert(offsetof(BP_VaultBase_C_GetHUDEntityID, ReturnValue) == 0x000000, "Member 'BP_VaultBase_C_GetHUDEntityID::ReturnValue' has a wrong offset!");

}

