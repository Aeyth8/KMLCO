#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RTXGI

#include "Basic.hpp"


namespace SDK::Params
{

// Function RTXGI.DDGIVolumeComponent.SetBlendingCutoffDistance
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetBlendingCutoffDistance final
{
public:
	float                                         NewBlendingCutoffDistance;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetBlendingCutoffDistance) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetBlendingCutoffDistance");
static_assert(sizeof(DDGIVolumeComponent_SetBlendingCutoffDistance) == 0x000004, "Wrong size on DDGIVolumeComponent_SetBlendingCutoffDistance");
static_assert(offsetof(DDGIVolumeComponent_SetBlendingCutoffDistance, NewBlendingCutoffDistance) == 0x000000, "Member 'DDGIVolumeComponent_SetBlendingCutoffDistance::NewBlendingCutoffDistance' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetBlendingDistance
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetBlendingDistance final
{
public:
	float                                         NewBlendingDistance;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetBlendingDistance) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetBlendingDistance");
static_assert(sizeof(DDGIVolumeComponent_SetBlendingDistance) == 0x000004, "Wrong size on DDGIVolumeComponent_SetBlendingDistance");
static_assert(offsetof(DDGIVolumeComponent_SetBlendingDistance, NewBlendingDistance) == 0x000000, "Member 'DDGIVolumeComponent_SetBlendingDistance::NewBlendingDistance' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetEmissiveMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetEmissiveMultiplier final
{
public:
	float                                         NewEmissiveMultiplier;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetEmissiveMultiplier) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetEmissiveMultiplier");
static_assert(sizeof(DDGIVolumeComponent_SetEmissiveMultiplier) == 0x000004, "Wrong size on DDGIVolumeComponent_SetEmissiveMultiplier");
static_assert(offsetof(DDGIVolumeComponent_SetEmissiveMultiplier, NewEmissiveMultiplier) == 0x000000, "Member 'DDGIVolumeComponent_SetEmissiveMultiplier::NewEmissiveMultiplier' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetIrradianceScalar
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetIrradianceScalar final
{
public:
	float                                         NewIrradianceScalar;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetIrradianceScalar) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetIrradianceScalar");
static_assert(sizeof(DDGIVolumeComponent_SetIrradianceScalar) == 0x000004, "Wrong size on DDGIVolumeComponent_SetIrradianceScalar");
static_assert(offsetof(DDGIVolumeComponent_SetIrradianceScalar, NewIrradianceScalar) == 0x000000, "Member 'DDGIVolumeComponent_SetIrradianceScalar::NewIrradianceScalar' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetLightingPriority
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetLightingPriority final
{
public:
	float                                         NewLightingPriority;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetLightingPriority) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetLightingPriority");
static_assert(sizeof(DDGIVolumeComponent_SetLightingPriority) == 0x000004, "Wrong size on DDGIVolumeComponent_SetLightingPriority");
static_assert(offsetof(DDGIVolumeComponent_SetLightingPriority, NewLightingPriority) == 0x000000, "Member 'DDGIVolumeComponent_SetLightingPriority::NewLightingPriority' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetLightMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetLightMultiplier final
{
public:
	float                                         NewLightMultiplier;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetLightMultiplier) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetLightMultiplier");
static_assert(sizeof(DDGIVolumeComponent_SetLightMultiplier) == 0x000004, "Wrong size on DDGIVolumeComponent_SetLightMultiplier");
static_assert(offsetof(DDGIVolumeComponent_SetLightMultiplier, NewLightMultiplier) == 0x000000, "Member 'DDGIVolumeComponent_SetLightMultiplier::NewLightMultiplier' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetNormalBias
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetNormalBias final
{
public:
	float                                         NewNormalBias;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetNormalBias) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetNormalBias");
static_assert(sizeof(DDGIVolumeComponent_SetNormalBias) == 0x000004, "Wrong size on DDGIVolumeComponent_SetNormalBias");
static_assert(offsetof(DDGIVolumeComponent_SetNormalBias, NewNormalBias) == 0x000000, "Member 'DDGIVolumeComponent_SetNormalBias::NewNormalBias' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetProbesVisualization
// 0x0001 (0x0001 - 0x0000)
struct DDGIVolumeComponent_SetProbesVisualization final
{
public:
	bool                                          IsProbesVisualized;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetProbesVisualization) == 0x000001, "Wrong alignment on DDGIVolumeComponent_SetProbesVisualization");
static_assert(sizeof(DDGIVolumeComponent_SetProbesVisualization) == 0x000001, "Wrong size on DDGIVolumeComponent_SetProbesVisualization");
static_assert(offsetof(DDGIVolumeComponent_SetProbesVisualization, IsProbesVisualized) == 0x000000, "Member 'DDGIVolumeComponent_SetProbesVisualization::IsProbesVisualized' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetUpdatePriority
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetUpdatePriority final
{
public:
	float                                         NewUpdatePriority;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetUpdatePriority) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetUpdatePriority");
static_assert(sizeof(DDGIVolumeComponent_SetUpdatePriority) == 0x000004, "Wrong size on DDGIVolumeComponent_SetUpdatePriority");
static_assert(offsetof(DDGIVolumeComponent_SetUpdatePriority, NewUpdatePriority) == 0x000000, "Member 'DDGIVolumeComponent_SetUpdatePriority::NewUpdatePriority' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.SetViewBias
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_SetViewBias final
{
public:
	float                                         NewViewBias;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_SetViewBias) == 0x000004, "Wrong alignment on DDGIVolumeComponent_SetViewBias");
static_assert(sizeof(DDGIVolumeComponent_SetViewBias) == 0x000004, "Wrong size on DDGIVolumeComponent_SetViewBias");
static_assert(offsetof(DDGIVolumeComponent_SetViewBias, NewViewBias) == 0x000000, "Member 'DDGIVolumeComponent_SetViewBias::NewViewBias' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.ToggleVolume
// 0x0001 (0x0001 - 0x0000)
struct DDGIVolumeComponent_ToggleVolume final
{
public:
	bool                                          IsVolumeEnabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_ToggleVolume) == 0x000001, "Wrong alignment on DDGIVolumeComponent_ToggleVolume");
static_assert(sizeof(DDGIVolumeComponent_ToggleVolume) == 0x000001, "Wrong size on DDGIVolumeComponent_ToggleVolume");
static_assert(offsetof(DDGIVolumeComponent_ToggleVolume, IsVolumeEnabled) == 0x000000, "Member 'DDGIVolumeComponent_ToggleVolume::IsVolumeEnabled' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetBlendingCutoffDistance
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetBlendingCutoffDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetBlendingCutoffDistance) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetBlendingCutoffDistance");
static_assert(sizeof(DDGIVolumeComponent_GetBlendingCutoffDistance) == 0x000004, "Wrong size on DDGIVolumeComponent_GetBlendingCutoffDistance");
static_assert(offsetof(DDGIVolumeComponent_GetBlendingCutoffDistance, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetBlendingCutoffDistance::ReturnValue' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetBlendingDistance
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetBlendingDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetBlendingDistance) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetBlendingDistance");
static_assert(sizeof(DDGIVolumeComponent_GetBlendingDistance) == 0x000004, "Wrong size on DDGIVolumeComponent_GetBlendingDistance");
static_assert(offsetof(DDGIVolumeComponent_GetBlendingDistance, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetBlendingDistance::ReturnValue' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetEmissiveMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetEmissiveMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetEmissiveMultiplier) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetEmissiveMultiplier");
static_assert(sizeof(DDGIVolumeComponent_GetEmissiveMultiplier) == 0x000004, "Wrong size on DDGIVolumeComponent_GetEmissiveMultiplier");
static_assert(offsetof(DDGIVolumeComponent_GetEmissiveMultiplier, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetEmissiveMultiplier::ReturnValue' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetIrradianceScalar
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetIrradianceScalar final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetIrradianceScalar) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetIrradianceScalar");
static_assert(sizeof(DDGIVolumeComponent_GetIrradianceScalar) == 0x000004, "Wrong size on DDGIVolumeComponent_GetIrradianceScalar");
static_assert(offsetof(DDGIVolumeComponent_GetIrradianceScalar, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetIrradianceScalar::ReturnValue' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetLightingPriority
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetLightingPriority final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetLightingPriority) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetLightingPriority");
static_assert(sizeof(DDGIVolumeComponent_GetLightingPriority) == 0x000004, "Wrong size on DDGIVolumeComponent_GetLightingPriority");
static_assert(offsetof(DDGIVolumeComponent_GetLightingPriority, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetLightingPriority::ReturnValue' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetLightMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetLightMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetLightMultiplier) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetLightMultiplier");
static_assert(sizeof(DDGIVolumeComponent_GetLightMultiplier) == 0x000004, "Wrong size on DDGIVolumeComponent_GetLightMultiplier");
static_assert(offsetof(DDGIVolumeComponent_GetLightMultiplier, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetLightMultiplier::ReturnValue' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetNormalBias
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetNormalBias final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetNormalBias) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetNormalBias");
static_assert(sizeof(DDGIVolumeComponent_GetNormalBias) == 0x000004, "Wrong size on DDGIVolumeComponent_GetNormalBias");
static_assert(offsetof(DDGIVolumeComponent_GetNormalBias, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetNormalBias::ReturnValue' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetUpdatePriority
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetUpdatePriority final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetUpdatePriority) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetUpdatePriority");
static_assert(sizeof(DDGIVolumeComponent_GetUpdatePriority) == 0x000004, "Wrong size on DDGIVolumeComponent_GetUpdatePriority");
static_assert(offsetof(DDGIVolumeComponent_GetUpdatePriority, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetUpdatePriority::ReturnValue' has a wrong offset!");

// Function RTXGI.DDGIVolumeComponent.GetViewBias
// 0x0004 (0x0004 - 0x0000)
struct DDGIVolumeComponent_GetViewBias final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DDGIVolumeComponent_GetViewBias) == 0x000004, "Wrong alignment on DDGIVolumeComponent_GetViewBias");
static_assert(sizeof(DDGIVolumeComponent_GetViewBias) == 0x000004, "Wrong size on DDGIVolumeComponent_GetViewBias");
static_assert(offsetof(DDGIVolumeComponent_GetViewBias, ReturnValue) == 0x000000, "Member 'DDGIVolumeComponent_GetViewBias::ReturnValue' has a wrong offset!");

}

