#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HeaderButton

#include "Basic.hpp"

#include "BP_HeaderButton_classes.hpp"
#include "BP_HeaderButton_parameters.hpp"


namespace SDK
{

// Function BP_HeaderButton.BP_HeaderButton_C.ExecuteUbergraph_BP_HeaderButton
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HeaderButton_C::ExecuteUbergraph_BP_HeaderButton(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "ExecuteUbergraph_BP_HeaderButton");

	Params::BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeaderButton.BP_HeaderButton_C.UpdateColors
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FSlateColor                      Hovered_color                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FSlateColor                      Normal_color                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FSlateColor                      Selected_color                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_HeaderButton_C::UpdateColors(const struct FSlateColor& Hovered_color, const struct FSlateColor& Normal_color, const struct FSlateColor& Selected_color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "UpdateColors");

	Params::BP_HeaderButton_C_UpdateColors Parms{};

	Parms.Hovered_color = std::move(Hovered_color);
	Parms.Normal_color = std::move(Normal_color);
	Parms.Selected_color = std::move(Selected_color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeaderButton.BP_HeaderButton_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HeaderButton_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "Tick");

	Params::BP_HeaderButton_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeaderButton.BP_HeaderButton_C.glitchMaterial
// (BlueprintCallable, BlueprintEvent)

void UBP_HeaderButton_C::GlitchMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "glitchMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HeaderButton.BP_HeaderButton_C.SetLabel
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Label                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_HeaderButton_C::SetLabel(const class FText& Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "SetLabel");

	Params::BP_HeaderButton_C_SetLabel Parms{};

	Parms.Label = std::move(Label);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeaderButton.BP_HeaderButton_C.OnIsEnabledChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInIsEnabled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_HeaderButton_C::OnIsEnabledChanged(bool bInIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "OnIsEnabledChanged");

	Params::BP_HeaderButton_C_OnIsEnabledChanged Parms{};

	Parms.bInIsEnabled = bInIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeaderButton.BP_HeaderButton_C.SetFocusedState
// (BlueprintCallable, BlueprintEvent)

void UBP_HeaderButton_C::SetFocusedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "SetFocusedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HeaderButton.BP_HeaderButton_C.SetInactiveState
// (BlueprintCallable, BlueprintEvent)

void UBP_HeaderButton_C::SetInactiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "SetInactiveState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HeaderButton.BP_HeaderButton_C.SetSelectedState
// (BlueprintCallable, BlueprintEvent)

void UBP_HeaderButton_C::SetSelectedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "SetSelectedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HeaderButton.BP_HeaderButton_C.OnUserSelected
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Using_mouse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_HeaderButton_C::OnUserSelected(bool Using_mouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "OnUserSelected");

	Params::BP_HeaderButton_C_OnUserSelected Parms{};

	Parms.Using_mouse = Using_mouse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeaderButton.BP_HeaderButton_C.OnUserLostFocus
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Using_mouse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_HeaderButton_C::OnUserLostFocus(bool Using_mouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "OnUserLostFocus");

	Params::BP_HeaderButton_C_OnUserLostFocus Parms{};

	Parms.Using_mouse = Using_mouse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeaderButton.BP_HeaderButton_C.OnUserFocused
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Using_mouse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_HeaderButton_C::OnUserFocused(bool Using_mouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "OnUserFocused");

	Params::BP_HeaderButton_C_OnUserFocused Parms{};

	Parms.Using_mouse = Using_mouse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeaderButton.BP_HeaderButton_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_HeaderButton_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeaderButton_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}

}

