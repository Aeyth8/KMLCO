#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Human_PostProcess

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Human_PostProcess.ABP_Human_PostProcess_C
// 0x07D0 (0x0AB0 - 0x02E0)
class UABP_Human_PostProcess_C final : public UCACharacterPostProcess
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_LinkedInputPose              AnimGraphNode_SubInput;                            // 0x02E8(0x0120)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0408(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0428(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0448(0x0038)()
	struct FCAAnimNode_DrivenLookBones            CAAnimGraphNode_DrivenLookBones_2;                 // 0x0480(0x0050)()
	struct FCAAnimNode_DrivenLookBones            CAAnimGraphNode_DrivenLookBones_1;                 // 0x04D0(0x0050)()
	struct FCAAnimNode_DrivenLookBones            CAAnimGraphNode_DrivenLookBones;                   // 0x0520(0x0050)()
	struct FCAAnimNode_DrivenTwistBones           CAAnimGraphNode_DrivenTwistBones_3;                // 0x0570(0x0048)()
	struct FCAAnimNode_DrivenTwistBones           CAAnimGraphNode_DrivenTwistBones_2;                // 0x05B8(0x0048)()
	struct FCAAnimNode_DrivenTwistBones           CAAnimGraphNode_DrivenTwistBones_1;                // 0x0600(0x0048)()
	struct FCAAnimNode_DrivenTwistBones           CAAnimGraphNode_DrivenTwistBones;                  // 0x0648(0x0048)()
	struct FAnimNode_RotationMultiplier           AnimGraphNode_RotationMultiplier_3;                // 0x0690(0x0100)()
	struct FAnimNode_RotationMultiplier           AnimGraphNode_RotationMultiplier_2;                // 0x0790(0x0100)()
	struct FAnimNode_RotationMultiplier           AnimGraphNode_RotationMultiplier_1;                // 0x0890(0x0100)()
	struct FAnimNode_RotationMultiplier           AnimGraphNode_RotationMultiplier;                  // 0x0990(0x0100)()
	bool                                          This_is_FP_mesh;                                   // 0x0A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          This_is_TP_mesh;                                   // 0x0A91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          This_is_Collapsed_mesh;                            // 0x0A92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A93[0x1];                                      // 0x0A93(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FP_effects_alpha;                                  // 0x0A94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TP_effects_alpha;                                  // 0x0A98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          This_is_Frontend_mesh;                             // 0x0A9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9D[0x3];                                      // 0x0A9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Gravity;                                           // 0x0AA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FE_Or_TP_Mesh;                                     // 0x0AAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ABP_Human_PostProcess(int32 EntryPoint);
	void OnActivate();
	void BlueprintInitializeAnimation();
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Human_PostProcess_C">();
	}
	static class UABP_Human_PostProcess_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Human_PostProcess_C>();
	}
};
static_assert(alignof(UABP_Human_PostProcess_C) == 0x000010, "Wrong alignment on UABP_Human_PostProcess_C");
static_assert(sizeof(UABP_Human_PostProcess_C) == 0x000AB0, "Wrong size on UABP_Human_PostProcess_C");
static_assert(offsetof(UABP_Human_PostProcess_C, UberGraphFrame) == 0x0002E0, "Member 'UABP_Human_PostProcess_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, AnimGraphNode_SubInput) == 0x0002E8, "Member 'UABP_Human_PostProcess_C::AnimGraphNode_SubInput' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, AnimGraphNode_LocalToComponentSpace) == 0x000408, "Member 'UABP_Human_PostProcess_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, AnimGraphNode_ComponentToLocalSpace) == 0x000428, "Member 'UABP_Human_PostProcess_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, AnimGraphNode_Root) == 0x000448, "Member 'UABP_Human_PostProcess_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, CAAnimGraphNode_DrivenLookBones_2) == 0x000480, "Member 'UABP_Human_PostProcess_C::CAAnimGraphNode_DrivenLookBones_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, CAAnimGraphNode_DrivenLookBones_1) == 0x0004D0, "Member 'UABP_Human_PostProcess_C::CAAnimGraphNode_DrivenLookBones_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, CAAnimGraphNode_DrivenLookBones) == 0x000520, "Member 'UABP_Human_PostProcess_C::CAAnimGraphNode_DrivenLookBones' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, CAAnimGraphNode_DrivenTwistBones_3) == 0x000570, "Member 'UABP_Human_PostProcess_C::CAAnimGraphNode_DrivenTwistBones_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, CAAnimGraphNode_DrivenTwistBones_2) == 0x0005B8, "Member 'UABP_Human_PostProcess_C::CAAnimGraphNode_DrivenTwistBones_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, CAAnimGraphNode_DrivenTwistBones_1) == 0x000600, "Member 'UABP_Human_PostProcess_C::CAAnimGraphNode_DrivenTwistBones_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, CAAnimGraphNode_DrivenTwistBones) == 0x000648, "Member 'UABP_Human_PostProcess_C::CAAnimGraphNode_DrivenTwistBones' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, AnimGraphNode_RotationMultiplier_3) == 0x000690, "Member 'UABP_Human_PostProcess_C::AnimGraphNode_RotationMultiplier_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, AnimGraphNode_RotationMultiplier_2) == 0x000790, "Member 'UABP_Human_PostProcess_C::AnimGraphNode_RotationMultiplier_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, AnimGraphNode_RotationMultiplier_1) == 0x000890, "Member 'UABP_Human_PostProcess_C::AnimGraphNode_RotationMultiplier_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, AnimGraphNode_RotationMultiplier) == 0x000990, "Member 'UABP_Human_PostProcess_C::AnimGraphNode_RotationMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, This_is_FP_mesh) == 0x000A90, "Member 'UABP_Human_PostProcess_C::This_is_FP_mesh' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, This_is_TP_mesh) == 0x000A91, "Member 'UABP_Human_PostProcess_C::This_is_TP_mesh' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, This_is_Collapsed_mesh) == 0x000A92, "Member 'UABP_Human_PostProcess_C::This_is_Collapsed_mesh' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, FP_effects_alpha) == 0x000A94, "Member 'UABP_Human_PostProcess_C::FP_effects_alpha' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, TP_effects_alpha) == 0x000A98, "Member 'UABP_Human_PostProcess_C::TP_effects_alpha' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, This_is_Frontend_mesh) == 0x000A9C, "Member 'UABP_Human_PostProcess_C::This_is_Frontend_mesh' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, Gravity) == 0x000AA0, "Member 'UABP_Human_PostProcess_C::Gravity' has a wrong offset!");
static_assert(offsetof(UABP_Human_PostProcess_C, FE_Or_TP_Mesh) == 0x000AAC, "Member 'UABP_Human_PostProcess_C::FE_Or_TP_Mesh' has a wrong offset!");

}

