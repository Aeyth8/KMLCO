#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tactical_EffectSphere_EMP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CAAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C
// 0x01C0 (0x0500 - 0x0340)
class ABP_Tactical_EffectSphere_EMP_C final : public ACAActorWithAbilities
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ArcLensInspectable_Projectile_C*    BP_ArcLensInspectable_Projectile;                  // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCAAudioComponent*                      TacticalEMPSphereAudio;                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCAGameplayCollisionComponent*          CAGameplayCollision;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, struct FActiveGameplayEffectHandle> ActiveLingerEffectByActor;                         // 0x0360(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class AActor*, struct FActiveGameplayEffectHandle> ActiveEffectByActor;                               // 0x03B0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 OnCollisionTargetActor;                            // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCATeamID                              OnCollision_TargetTeamID;                          // 0x0408(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            OnCollisionActiveGE;                               // 0x040C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          OnCollisionTargetIsPlayer;                         // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThisActorIsInZeroG;                                // 0x0415(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThisActorBalancingVariablesSet;                    // 0x0416(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThisActorAffectsFriendlies;                        // 0x0417(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThisActorIsNPCThrown;                              // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EMPDimensions;                                     // 0x0420(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EMPVFX;                                            // 0x042C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceAffectFriendlies;                             // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACAActorWithTimedMovement*>      OverlappingIngredients;                            // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 IndexesToRemove;                                   // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSet<class ACAActorWithTimedMovement*>        IngredientsToRemove;                               // 0x0460(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          ThisActorDestroysAllProjectiles;                   // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      Test_Var;                                          // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EMPVFX_Upgrade;                                    // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThisActorIsUpgraded;                               // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Tactical_Level;                                    // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Always_Destroy_Specialist_Abilities;               // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RadiusUpgradeRequiredLvl;                          // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Persistent_EMP;                              // 0x04DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioPlaybackInstance               SFXEMPAOESphereInstance;                           // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TimeDetonated;                                     // 0x04F0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          DetonationTimeSet;                                 // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Tactical_EffectSphere_EMP(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void TryApplyingOverlappingEffect(class AActor* OverlappingActor);
	void BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_1_SceneComponentEndOverlapSignature__DelegateSignature(class USceneComponent* OverlappedComponent, class AActor* OtherActor, class USceneComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_0_SceneComponentBeginOverlapSignature__DelegateSignature(class USceneComponent* OverlappedComponent, class AActor* OtherActor, class USceneComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();
	void SetBalancingVariables();
	void GetDurationFromDT(bool Upgraded, bool IsNPCThrown, float* Lifespan);
	void Remove_Linger_Effect(const class AActor*& Target_Actor);
	void TriggerVFX();
	void StartSFX(int32 Tactical_Level_0, struct FCAAudioPlaybackInstance* Looped_SFX_Instance);
	void PlaySFXOnSphereEnding();
	void Check_Destroy_Overlapping_Actor(class AActor* Overlapped_Actor, bool* Disruption_Handled);
	void Apply_Player_EMP_GE(class UAbilitySystemComponent*& Target_Ability_System_Component_Reference, struct FActiveGameplayEffectHandle* Out_GE);
	void Apply_Player_EMP_Linger_GE(class UAbilitySystemComponent*& Target_Ability_System_Component_Reference);
	void OnRep_TimeDetonated();

	bool IsPlayerInFutureDamageArea() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Tactical_EffectSphere_EMP_C">();
	}
	static class ABP_Tactical_EffectSphere_EMP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Tactical_EffectSphere_EMP_C>();
	}
};
static_assert(alignof(ABP_Tactical_EffectSphere_EMP_C) == 0x000008, "Wrong alignment on ABP_Tactical_EffectSphere_EMP_C");
static_assert(sizeof(ABP_Tactical_EffectSphere_EMP_C) == 0x000500, "Wrong size on ABP_Tactical_EffectSphere_EMP_C");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, UberGraphFrame) == 0x000340, "Member 'ABP_Tactical_EffectSphere_EMP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, BP_ArcLensInspectable_Projectile) == 0x000348, "Member 'ABP_Tactical_EffectSphere_EMP_C::BP_ArcLensInspectable_Projectile' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, TacticalEMPSphereAudio) == 0x000350, "Member 'ABP_Tactical_EffectSphere_EMP_C::TacticalEMPSphereAudio' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, CAGameplayCollision) == 0x000358, "Member 'ABP_Tactical_EffectSphere_EMP_C::CAGameplayCollision' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ActiveLingerEffectByActor) == 0x000360, "Member 'ABP_Tactical_EffectSphere_EMP_C::ActiveLingerEffectByActor' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ActiveEffectByActor) == 0x0003B0, "Member 'ABP_Tactical_EffectSphere_EMP_C::ActiveEffectByActor' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, OnCollisionTargetActor) == 0x000400, "Member 'ABP_Tactical_EffectSphere_EMP_C::OnCollisionTargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, OnCollision_TargetTeamID) == 0x000408, "Member 'ABP_Tactical_EffectSphere_EMP_C::OnCollision_TargetTeamID' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, OnCollisionActiveGE) == 0x00040C, "Member 'ABP_Tactical_EffectSphere_EMP_C::OnCollisionActiveGE' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, OnCollisionTargetIsPlayer) == 0x000414, "Member 'ABP_Tactical_EffectSphere_EMP_C::OnCollisionTargetIsPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ThisActorIsInZeroG) == 0x000415, "Member 'ABP_Tactical_EffectSphere_EMP_C::ThisActorIsInZeroG' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ThisActorBalancingVariablesSet) == 0x000416, "Member 'ABP_Tactical_EffectSphere_EMP_C::ThisActorBalancingVariablesSet' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ThisActorAffectsFriendlies) == 0x000417, "Member 'ABP_Tactical_EffectSphere_EMP_C::ThisActorAffectsFriendlies' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ThisActorIsNPCThrown) == 0x000418, "Member 'ABP_Tactical_EffectSphere_EMP_C::ThisActorIsNPCThrown' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, Radius) == 0x00041C, "Member 'ABP_Tactical_EffectSphere_EMP_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, EMPDimensions) == 0x000420, "Member 'ABP_Tactical_EffectSphere_EMP_C::EMPDimensions' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, EMPVFX) == 0x00042C, "Member 'ABP_Tactical_EffectSphere_EMP_C::EMPVFX' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ForceAffectFriendlies) == 0x000438, "Member 'ABP_Tactical_EffectSphere_EMP_C::ForceAffectFriendlies' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, OverlappingIngredients) == 0x000440, "Member 'ABP_Tactical_EffectSphere_EMP_C::OverlappingIngredients' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, IndexesToRemove) == 0x000450, "Member 'ABP_Tactical_EffectSphere_EMP_C::IndexesToRemove' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, IngredientsToRemove) == 0x000460, "Member 'ABP_Tactical_EffectSphere_EMP_C::IngredientsToRemove' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ThisActorDestroysAllProjectiles) == 0x0004B0, "Member 'ABP_Tactical_EffectSphere_EMP_C::ThisActorDestroysAllProjectiles' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, Test_Var) == 0x0004B8, "Member 'ABP_Tactical_EffectSphere_EMP_C::Test_Var' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, EMPVFX_Upgrade) == 0x0004C0, "Member 'ABP_Tactical_EffectSphere_EMP_C::EMPVFX_Upgrade' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, ThisActorIsUpgraded) == 0x0004CC, "Member 'ABP_Tactical_EffectSphere_EMP_C::ThisActorIsUpgraded' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, Tactical_Level) == 0x0004D0, "Member 'ABP_Tactical_EffectSphere_EMP_C::Tactical_Level' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, Always_Destroy_Specialist_Abilities) == 0x0004D4, "Member 'ABP_Tactical_EffectSphere_EMP_C::Always_Destroy_Specialist_Abilities' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, RadiusUpgradeRequiredLvl) == 0x0004D8, "Member 'ABP_Tactical_EffectSphere_EMP_C::RadiusUpgradeRequiredLvl' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, Debug_Persistent_EMP) == 0x0004DC, "Member 'ABP_Tactical_EffectSphere_EMP_C::Debug_Persistent_EMP' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, SFXEMPAOESphereInstance) == 0x0004E0, "Member 'ABP_Tactical_EffectSphere_EMP_C::SFXEMPAOESphereInstance' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, TimeDetonated) == 0x0004F0, "Member 'ABP_Tactical_EffectSphere_EMP_C::TimeDetonated' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, DetonationTimeSet) == 0x0004F4, "Member 'ABP_Tactical_EffectSphere_EMP_C::DetonationTimeSet' has a wrong offset!");
static_assert(offsetof(ABP_Tactical_EffectSphere_EMP_C, Duration) == 0x0004F8, "Member 'ABP_Tactical_EffectSphere_EMP_C::Duration' has a wrong offset!");

}

