#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UmbraCulling

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "UmbraCulling_structs.hpp"


namespace SDK
{

// Class UmbraCulling.UmbraPrecomputedDataCustom
// 0x0068 (0x00A0 - 0x0038)
class UUmbraPrecomputedDataCustom final : public UDataAsset
{
public:
	TArray<uint32>                                Data;                                              // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FUmbraLevelVisibilityData> LevelData;                                         // 0x0048(0x0050)(NativeAccessSpecifierPublic)
	uint64                                        M_level_static_geometry_hash;                      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UmbraPrecomputedDataCustom">();
	}
	static class UUmbraPrecomputedDataCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmbraPrecomputedDataCustom>();
	}
};
static_assert(alignof(UUmbraPrecomputedDataCustom) == 0x000008, "Wrong alignment on UUmbraPrecomputedDataCustom");
static_assert(sizeof(UUmbraPrecomputedDataCustom) == 0x0000A0, "Wrong size on UUmbraPrecomputedDataCustom");
static_assert(offsetof(UUmbraPrecomputedDataCustom, Data) == 0x000038, "Member 'UUmbraPrecomputedDataCustom::Data' has a wrong offset!");
static_assert(offsetof(UUmbraPrecomputedDataCustom, LevelData) == 0x000048, "Member 'UUmbraPrecomputedDataCustom::LevelData' has a wrong offset!");
static_assert(offsetof(UUmbraPrecomputedDataCustom, M_level_static_geometry_hash) == 0x000098, "Member 'UUmbraPrecomputedDataCustom::M_level_static_geometry_hash' has a wrong offset!");

// Class UmbraCulling.UmbraPrecomputedData
// 0x0068 (0x0098 - 0x0030)
class UUmbraPrecomputedData final : public UAssetUserData
{
public:
	TArray<uint32>                                Data;                                              // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class UPrimitiveComponent>, int32> VisibilityIDs;                                     // 0x0040(0x0050)(NativeAccessSpecifierPublic)
	uint64                                        M_level_static_geometry_hash;                      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UmbraPrecomputedData">();
	}
	static class UUmbraPrecomputedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmbraPrecomputedData>();
	}
};
static_assert(alignof(UUmbraPrecomputedData) == 0x000008, "Wrong alignment on UUmbraPrecomputedData");
static_assert(sizeof(UUmbraPrecomputedData) == 0x000098, "Wrong size on UUmbraPrecomputedData");
static_assert(offsetof(UUmbraPrecomputedData, Data) == 0x000030, "Member 'UUmbraPrecomputedData::Data' has a wrong offset!");
static_assert(offsetof(UUmbraPrecomputedData, VisibilityIDs) == 0x000040, "Member 'UUmbraPrecomputedData::VisibilityIDs' has a wrong offset!");
static_assert(offsetof(UUmbraPrecomputedData, M_level_static_geometry_hash) == 0x000090, "Member 'UUmbraPrecomputedData::M_level_static_geometry_hash' has a wrong offset!");

// Class UmbraCulling.CAUmbraPrecomputedDataWrapper
// 0x0008 (0x0038 - 0x0030)
class UCAUmbraPrecomputedDataWrapper final : public UAssetUserData
{
public:
	class UUmbraPrecomputedData*                  M_wrapped;                                         // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CAUmbraPrecomputedDataWrapper">();
	}
	static class UCAUmbraPrecomputedDataWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCAUmbraPrecomputedDataWrapper>();
	}
};
static_assert(alignof(UCAUmbraPrecomputedDataWrapper) == 0x000008, "Wrong alignment on UCAUmbraPrecomputedDataWrapper");
static_assert(sizeof(UCAUmbraPrecomputedDataWrapper) == 0x000038, "Wrong size on UCAUmbraPrecomputedDataWrapper");
static_assert(offsetof(UCAUmbraPrecomputedDataWrapper, M_wrapped) == 0x000030, "Member 'UCAUmbraPrecomputedDataWrapper::M_wrapped' has a wrong offset!");

// Class UmbraCulling.UmbraStreamingVolume
// 0x0010 (0x02A0 - 0x0290)
class AUmbraStreamingVolume final : public AVolume
{
public:
	int32                                         UniqueStreamingId;                                 // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComputedStreamingId;                               // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUmbraPrecomputedData*                  PrecomputedData;                                   // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UmbraStreamingVolume">();
	}
	static class AUmbraStreamingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUmbraStreamingVolume>();
	}
};
static_assert(alignof(AUmbraStreamingVolume) == 0x000008, "Wrong alignment on AUmbraStreamingVolume");
static_assert(sizeof(AUmbraStreamingVolume) == 0x0002A0, "Wrong size on AUmbraStreamingVolume");
static_assert(offsetof(AUmbraStreamingVolume, UniqueStreamingId) == 0x000290, "Member 'AUmbraStreamingVolume::UniqueStreamingId' has a wrong offset!");
static_assert(offsetof(AUmbraStreamingVolume, ComputedStreamingId) == 0x000294, "Member 'AUmbraStreamingVolume::ComputedStreamingId' has a wrong offset!");
static_assert(offsetof(AUmbraStreamingVolume, PrecomputedData) == 0x000298, "Member 'AUmbraStreamingVolume::PrecomputedData' has a wrong offset!");

}

