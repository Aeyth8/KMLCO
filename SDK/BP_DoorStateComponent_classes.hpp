#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DoorStateComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DoorStateComponent.BP_DoorStateComponent_C
// 0x0100 (0x0E60 - 0x0D60)
class UBP_DoorStateComponent_C final : public UCAStateMachineComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         AutomaticCloseDelay;                               // 0x0D68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D6C[0x4];                                      // 0x0D6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EventClosed;                                       // 0x0D70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventOpen;                                         // 0x0D80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventOpening;                                      // 0x0D90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventClosing;                                      // 0x0DA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdateOpen;                                        // 0x0DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventMoving;                                       // 0x0DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventStopped;                                      // 0x0DD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventTick;                                         // 0x0DE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsOpen;                                            // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DF1[0x7];                                      // 0x0DF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EventFoamed;                                       // 0x0DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventUnfoamed;                                     // 0x0E08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ShouldClosedOnDefoamed;                            // 0x0E18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E19[0x7];                                      // 0x0E19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EventLocked;                                       // 0x0E20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventUnlocked;                                     // 0x0E30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventEMP;                                          // 0x0E40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventEMPFinished;                                  // 0x0E50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void EventClosed__DelegateSignature();
	void EventOpen__DelegateSignature();
	void EventOpening__DelegateSignature();
	void EventClosing__DelegateSignature();
	void UpdateOpen__DelegateSignature(float Percentage);
	void EventMoving__DelegateSignature();
	void EventStopped__DelegateSignature();
	void EventTick__DelegateSignature();
	void EventFoamed__DelegateSignature();
	void EventUnfoamed__DelegateSignature();
	void EventLocked__DelegateSignature();
	void EventUnlocked__DelegateSignature();
	void EventEMP__DelegateSignature();
	void EventEMPFinished__DelegateSignature();
	void ExecuteUbergraph_BP_DoorStateComponent(int32 EntryPoint);
	void OnActorEnteredArea(class AActor* User);
	void OnActorExitedArea(class AActor* User);
	void TagChanged(const struct FGameplayTag& Tag, bool Added);
	void AnimationTicked();
	void PreConstruction();
	void Closed();
	void ReceiveTick(float DeltaSeconds);
	void BindDelegates();
	void ClosingResumed();
	void ClosingSuspended();
	void OpeningResumed();
	void OpeningSuspended();
	void Open();
	void Closing();
	void Opening();
	void SetLockedState(bool Locked);
	void SetAutomaticState(bool Automatic);
	void SetPoweredState(bool Powered);
	void SetIgnoreLockdown(bool Ignore);
	void AutomaticClose();
	void SetHeldOpen(bool Hold);
	void SetOverridable(bool Overridable);

	bool CanEnterArea(class AActor* User) const;
	void IsPlayer(class UObject* Object, bool* Result) const;
	void IsUserNPC(class UObject* Object, bool* Result) const;
	void HasAuthorisedUsers(bool* Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DoorStateComponent_C">();
	}
	static class UBP_DoorStateComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DoorStateComponent_C>();
	}
};
static_assert(alignof(UBP_DoorStateComponent_C) == 0x000008, "Wrong alignment on UBP_DoorStateComponent_C");
static_assert(sizeof(UBP_DoorStateComponent_C) == 0x000E60, "Wrong size on UBP_DoorStateComponent_C");
static_assert(offsetof(UBP_DoorStateComponent_C, UberGraphFrame) == 0x000D60, "Member 'UBP_DoorStateComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, AutomaticCloseDelay) == 0x000D68, "Member 'UBP_DoorStateComponent_C::AutomaticCloseDelay' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventClosed) == 0x000D70, "Member 'UBP_DoorStateComponent_C::EventClosed' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventOpen) == 0x000D80, "Member 'UBP_DoorStateComponent_C::EventOpen' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventOpening) == 0x000D90, "Member 'UBP_DoorStateComponent_C::EventOpening' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventClosing) == 0x000DA0, "Member 'UBP_DoorStateComponent_C::EventClosing' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, UpdateOpen) == 0x000DB0, "Member 'UBP_DoorStateComponent_C::UpdateOpen' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventMoving) == 0x000DC0, "Member 'UBP_DoorStateComponent_C::EventMoving' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventStopped) == 0x000DD0, "Member 'UBP_DoorStateComponent_C::EventStopped' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventTick) == 0x000DE0, "Member 'UBP_DoorStateComponent_C::EventTick' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, IsOpen) == 0x000DF0, "Member 'UBP_DoorStateComponent_C::IsOpen' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventFoamed) == 0x000DF8, "Member 'UBP_DoorStateComponent_C::EventFoamed' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventUnfoamed) == 0x000E08, "Member 'UBP_DoorStateComponent_C::EventUnfoamed' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, ShouldClosedOnDefoamed) == 0x000E18, "Member 'UBP_DoorStateComponent_C::ShouldClosedOnDefoamed' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventLocked) == 0x000E20, "Member 'UBP_DoorStateComponent_C::EventLocked' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventUnlocked) == 0x000E30, "Member 'UBP_DoorStateComponent_C::EventUnlocked' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventEMP) == 0x000E40, "Member 'UBP_DoorStateComponent_C::EventEMP' has a wrong offset!");
static_assert(offsetof(UBP_DoorStateComponent_C, EventEMPFinished) == 0x000E50, "Member 'UBP_DoorStateComponent_C::EventEMPFinished' has a wrong offset!");

}

