#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_NPC_Pushed

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AB_NPC_Pushed.AB_NPC_Pushed_C
// 0x0038 (0x0408 - 0x03D0)
class UAB_NPC_Pushed_C final : public UGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         PushedByExplosionTime;                             // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Push_Time;                                         // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PushedByMeleeTime;                                 // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyingImpulseMultiplier;                           // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundedImpulseMultiplier;                         // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACACharacter*                           TargetCharacter;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         GroundedLaunchAngleLowerBound;                     // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundedLaunchAngleUpperBound;                     // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TargetIsFlyingOrZeroG;                             // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_AB_NPC_Pushed(int32 EntryPoint);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_OnEndAbility(bool bWasCancelled);
	void Calculate_Force_Vector(class UObject* Grenade_Object, float Magnitude, struct FVector* PushVector, bool* Valid);
	void SetValues();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_NPC_Pushed_C">();
	}
	static class UAB_NPC_Pushed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_NPC_Pushed_C>();
	}
};
static_assert(alignof(UAB_NPC_Pushed_C) == 0x000008, "Wrong alignment on UAB_NPC_Pushed_C");
static_assert(sizeof(UAB_NPC_Pushed_C) == 0x000408, "Wrong size on UAB_NPC_Pushed_C");
static_assert(offsetof(UAB_NPC_Pushed_C, UberGraphFrame) == 0x0003D0, "Member 'UAB_NPC_Pushed_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, PushedByExplosionTime) == 0x0003D8, "Member 'UAB_NPC_Pushed_C::PushedByExplosionTime' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, Push_Time) == 0x0003DC, "Member 'UAB_NPC_Pushed_C::Push_Time' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, PushedByMeleeTime) == 0x0003E0, "Member 'UAB_NPC_Pushed_C::PushedByMeleeTime' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, FlyingImpulseMultiplier) == 0x0003E4, "Member 'UAB_NPC_Pushed_C::FlyingImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, GroundedImpulseMultiplier) == 0x0003E8, "Member 'UAB_NPC_Pushed_C::GroundedImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, TargetCharacter) == 0x0003F0, "Member 'UAB_NPC_Pushed_C::TargetCharacter' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, GroundedLaunchAngleLowerBound) == 0x0003F8, "Member 'UAB_NPC_Pushed_C::GroundedLaunchAngleLowerBound' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, GroundedLaunchAngleUpperBound) == 0x0003FC, "Member 'UAB_NPC_Pushed_C::GroundedLaunchAngleUpperBound' has a wrong offset!");
static_assert(offsetof(UAB_NPC_Pushed_C, TargetIsFlyingOrZeroG) == 0x000400, "Member 'UAB_NPC_Pushed_C::TargetIsFlyingOrZeroG' has a wrong offset!");

}

