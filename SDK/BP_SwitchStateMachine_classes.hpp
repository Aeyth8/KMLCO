#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SwitchStateMachine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SwitchStateMachine.BP_SwitchStateMachine_C
// 0x00B0 (0x0E10 - 0x0D60)
class UBP_SwitchStateMachine_C final : public UCAStateMachineComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	FMulticastInlineDelegateProperty_             EventAvailable;                                    // 0x0D68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventUsed;                                         // 0x0D78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventDisabled;                                     // 0x0D88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCAAbilitySystemComponent*              AbilityComponent;                                  // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShootable;                                       // 0x0DA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA1[0x7];                                      // 0x0DA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   HitTarget;                                         // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            ImmuneGE;                                          // 0x0DB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EventSwitchedOn;                                   // 0x0DB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventSwitchedOff;                                  // 0x0DC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventCooldownToOn;                                 // 0x0DD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventCooldownToOff;                                // 0x0DE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventEnabled;                                      // 0x0DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCAFiniteState*                         LastNonDisabledState;                              // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EventAvailable__DelegateSignature();
	void EventUsed__DelegateSignature();
	void EventDisabled__DelegateSignature();
	void EventSwitchedOn__DelegateSignature();
	void EventSwitchedOff__DelegateSignature();
	void EventCooldownToOn__DelegateSignature();
	void EventCooldownToOff__DelegateSignature();
	void EventEnabled__DelegateSignature();
	void ExecuteUbergraph_BP_SwitchStateMachine(int32 EntryPoint);
	void Enabled();
	void Disabled();
	void CooldownToOff();
	void CooldownToOn();
	void SwitchedOff();
	void SwitchedOn();
	void BindDelegates();
	void SetHitTarget(class UStaticMeshComponent* HitTarget_0);
	bool CanProcessHit(const struct FGameplayEffectSpec& Effect_spec);
	void SetLastNonDisabledState(class UCAFiniteState* State);
	void GetLastNonDisabledState(class UCAFiniteState** LastNonDisabledState_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SwitchStateMachine_C">();
	}
	static class UBP_SwitchStateMachine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SwitchStateMachine_C>();
	}
};
static_assert(alignof(UBP_SwitchStateMachine_C) == 0x000008, "Wrong alignment on UBP_SwitchStateMachine_C");
static_assert(sizeof(UBP_SwitchStateMachine_C) == 0x000E10, "Wrong size on UBP_SwitchStateMachine_C");
static_assert(offsetof(UBP_SwitchStateMachine_C, UberGraphFrame) == 0x000D60, "Member 'UBP_SwitchStateMachine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, EventAvailable) == 0x000D68, "Member 'UBP_SwitchStateMachine_C::EventAvailable' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, EventUsed) == 0x000D78, "Member 'UBP_SwitchStateMachine_C::EventUsed' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, EventDisabled) == 0x000D88, "Member 'UBP_SwitchStateMachine_C::EventDisabled' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, AbilityComponent) == 0x000D98, "Member 'UBP_SwitchStateMachine_C::AbilityComponent' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, IsShootable) == 0x000DA0, "Member 'UBP_SwitchStateMachine_C::IsShootable' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, HitTarget) == 0x000DA8, "Member 'UBP_SwitchStateMachine_C::HitTarget' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, ImmuneGE) == 0x000DB0, "Member 'UBP_SwitchStateMachine_C::ImmuneGE' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, EventSwitchedOn) == 0x000DB8, "Member 'UBP_SwitchStateMachine_C::EventSwitchedOn' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, EventSwitchedOff) == 0x000DC8, "Member 'UBP_SwitchStateMachine_C::EventSwitchedOff' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, EventCooldownToOn) == 0x000DD8, "Member 'UBP_SwitchStateMachine_C::EventCooldownToOn' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, EventCooldownToOff) == 0x000DE8, "Member 'UBP_SwitchStateMachine_C::EventCooldownToOff' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, EventEnabled) == 0x000DF8, "Member 'UBP_SwitchStateMachine_C::EventEnabled' has a wrong offset!");
static_assert(offsetof(UBP_SwitchStateMachine_C, LastNonDisabledState) == 0x000E08, "Member 'UBP_SwitchStateMachine_C::LastNonDisabledState' has a wrong offset!");

}

