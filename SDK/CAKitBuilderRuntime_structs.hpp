#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CAKitBuilderRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum CAKitBuilderRuntime.ECAKitPieceAdditiveEnabledState
// NumValues: 0x0006
enum class ECAKitPieceAdditiveEnabledState : uint8
{
	Default                                  = 0,
	On                                       = 1,
	Off                                      = 2,
	AlwaysOn                                 = 3,
	Invalid                                  = 4,
	ECAKitPieceAdditiveEnabledState_MAX      = 5,
};

// Enum CAKitBuilderRuntime.ECAKitPieceCheckType
// NumValues: 0x0005
enum class ECAKitPieceCheckType : uint8
{
	All                                      = 0,
	Meshes                                   = 1,
	Collision                                = 2,
	Sockets                                  = 3,
	ECAKitPieceCheckType_MAX                 = 4,
};

// Enum CAKitBuilderRuntime.ETagMode
// NumValues: 0x0005
enum class ETagMode : uint8
{
	None                                     = 0,
	Floor_tool                               = 1,
	Ceiling_tool                             = 2,
	Room_tool                                = 3,
	ETagMode_MAX                             = 4,
};

// Enum CAKitBuilderRuntime.EFloorUsage
// NumValues: 0x0005
enum class EFloorUsage : uint8
{
	Whitebox                                 = 0,
	Floor_ground_only                        = 1,
	Floor_upper_only                         = 2,
	Floor_any                                = 3,
	EFloorUsage_MAX                          = 4,
};

// Enum CAKitBuilderRuntime.ESlackAlignment
// NumValues: 0x0005
enum class ESlackAlignment : uint8
{
	Off                                      = 0,
	FromNode                                 = 1,
	Split                                    = 2,
	ToNode                                   = 3,
	ESlackAlignment_MAX                      = 4,
};

// Enum CAKitBuilderRuntime.EArchetype
// NumValues: 0x0006
enum class EArchetype : uint8
{
	Cargo                                    = 0,
	Command                                  = 1,
	Habitation                               = 2,
	Maintenance                              = 3,
	Generic                                  = 4,
	EArchetype_MAX                           = 5,
};

// Enum CAKitBuilderRuntime.EKitPieceRole
// NumValues: 0x0007
enum class EKitPieceRole : uint8
{
	Structural                               = 0,
	CoverProps                               = 1,
	CFK_Floor                                = 2,
	CFK_Ceiling                              = 3,
	Num                                      = 4,
	Invalid                                  = 5,
	EKitPieceRole_MAX                        = 6,
};

// Enum CAKitBuilderRuntime.EWallShape
// NumValues: 0x000B
enum class EWallShape : uint8
{
	Straight                                 = 0,
	CornerInterior                           = 1,
	CornerExterior                           = 2,
	T_Junction                               = 3,
	X_Junction                               = 4,
	Termination                              = 5,
	GeneratedCorner                          = 6,
	Num                                      = 7,
	Not_Applicable                           = 8,
	Invalid                                  = 9,
	EWallShape_MAX                           = 10,
};

// Enum CAKitBuilderRuntime.EElevation
// NumValues: 0x0007
enum class EElevation : uint8
{
	Short                                    = 0,
	Medium                                   = 1,
	Tall                                     = 2,
	Num                                      = 3,
	Not_Applicable                           = 4,
	Mixed                                    = 5,
	EElevation_MAX                           = 6,
};

// Enum CAKitBuilderRuntime.ELength
// NumValues: 0x0017
enum class ELength : uint8
{
	Length_0m                                = 0,
	Length_0_05m                             = 1,
	Length_0_20m                             = 2,
	Length_0_25m                             = 3,
	Length_0_30m                             = 4,
	Length_0_45m                             = 5,
	Length_0_50m                             = 6,
	Length_0_80m                             = 7,
	Length_1m                                = 8,
	Length_2m                                = 9,
	Length_3m                                = 10,
	Length_4m                                = 11,
	Length_5m                                = 12,
	Length_6m                                = 13,
	Length_7m                                = 14,
	Length_8m                                = 15,
	Length_9m                                = 16,
	Length_10m                               = 17,
	Length_12m                               = 18,
	Length_16m                               = 19,
	Num                                      = 20,
	Length_Invalid                           = 21,
	ELength_MAX                              = 22,
};

// Enum CAKitBuilderRuntime.EWallArchetype
// NumValues: 0x000C
enum class EWallArchetype : uint8
{
	Whitebox                                 = 0,
	Generic                                  = 1,
	Cargo                                    = 2,
	Command                                  = 3,
	Habitation                               = 4,
	Maintenance                              = 5,
	Num                                      = 6,
	Shared                                   = 7,
	Mixed                                    = 8,
	Unset                                    = 9,
	Invalid                                  = 10,
	EWallArchetype_MAX                       = 11,
};

// Enum CAKitBuilderRuntime.ESuperStructure
// NumValues: 0x0017
enum class ESuperStructure : uint8
{
	None                                     = 0,
	Coving_Small                             = 1,
	Coving_Large                             = 2,
	Walkway                                  = 3,
	Walkway_Narrow                           = 4,
	Landing                                  = 5,
	Landing_Narrow                           = 6,
	Mezzanine                                = 7,
	Stairs_Ground                            = 8,
	Stairs_Traverse                          = 9,
	Stairs_With_Mez                          = 10,
	Stairs_Narrow_Ground                     = 11,
	Stairs_Narrow_Traverse                   = 12,
	Stairs_Narrow_With_Mez                   = 13,
	Wall                                     = 14,
	Wall_With_Walkway                        = 15,
	Wall_With_Coving_Small                   = 16,
	Wall_With_Coving_Large                   = 17,
	Not_Applicable                           = 18,
	Num                                      = 19,
	Mixed                                    = 20,
	Invalid                                  = 21,
	ESuperStructure_MAX                      = 22,
};

// Enum CAKitBuilderRuntime.EStructuralType
// NumValues: 0x001E
enum class EStructuralType : uint8
{
	None                                     = 0,
	Wall                                     = 1,
	Walkway                                  = 2,
	Walkway_Narrow                           = 3,
	Mezzanine_Edge                           = 4,
	Raised_Floor_Edge                        = 5,
	Dropped_Ceiling_Edge                     = 6,
	Arch_Lintel_Top                          = 7,
	Arch_Lintel_Middle                       = 8,
	Arch_Lintel_Bottom                       = 9,
	Access                                   = 10,
	Access_Top                               = 11,
	Access_Middle                            = 12,
	Access_Bottom                            = 13,
	Raised_Floor_Stairs                      = 14,
	Stairs                                   = 15,
	Corridor_Narrow                          = 16,
	Corridor_Narrow_Landing                  = 17,
	Corridor_Wide                            = 18,
	Corridor_Wide_Landing                    = 19,
	Vent                                     = 20,
	Vent_Low                                 = 21,
	Capper_Boundary                          = 22,
	Bespoke_Geo                              = 23,
	Num                                      = 24,
	Arch_Lintel                              = 25,
	Arch_Lintel_Extend                       = 26,
	Mixed                                    = 27,
	Invalid                                  = 28,
	EStructuralType_MAX                      = 29,
};

// Enum CAKitBuilderRuntime.ECAKitPieceDisplayType
// NumValues: 0x0004
enum class ECAKitPieceDisplayType : uint8
{
	White_box                                = 0,
	Grey_box                                 = 1,
	Display_geometry                         = 2,
	ECAKitPieceDisplayType_MAX               = 3,
};

// ScriptStruct CAKitBuilderRuntime.MaterialGroup
// 0x0010 (0x0010 - 0x0000)
struct FMaterialGroup final
{
public:
	EWallArchetype                                M_archetype;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_name;                                            // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialGroup) == 0x000004, "Wrong alignment on FMaterialGroup");
static_assert(sizeof(FMaterialGroup) == 0x000010, "Wrong size on FMaterialGroup");
static_assert(offsetof(FMaterialGroup, M_archetype) == 0x000000, "Member 'FMaterialGroup::M_archetype' has a wrong offset!");
static_assert(offsetof(FMaterialGroup, M_name) == 0x000004, "Member 'FMaterialGroup::M_name' has a wrong offset!");

// ScriptStruct CAKitBuilderRuntime.CAKitPieceChildComponent
// 0x00B0 (0x00B0 - 0x0000)
struct FCAKitPieceChildComponent final
{
public:
	struct FTransform                             M_component_transform;                             // 0x0000(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     M_child_actor;                                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USceneComponent>            M_child_component;                                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_enabled;                                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMeshSocket>       M_socket;                                          // 0x0048(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  M_attached_actor;                                  // 0x0078(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_persist_across_variants;                         // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAKitPieceChildComponent) == 0x000010, "Wrong alignment on FCAKitPieceChildComponent");
static_assert(sizeof(FCAKitPieceChildComponent) == 0x0000B0, "Wrong size on FCAKitPieceChildComponent");
static_assert(offsetof(FCAKitPieceChildComponent, M_component_transform) == 0x000000, "Member 'FCAKitPieceChildComponent::M_component_transform' has a wrong offset!");
static_assert(offsetof(FCAKitPieceChildComponent, M_child_actor) == 0x000030, "Member 'FCAKitPieceChildComponent::M_child_actor' has a wrong offset!");
static_assert(offsetof(FCAKitPieceChildComponent, M_child_component) == 0x000038, "Member 'FCAKitPieceChildComponent::M_child_component' has a wrong offset!");
static_assert(offsetof(FCAKitPieceChildComponent, M_enabled) == 0x000040, "Member 'FCAKitPieceChildComponent::M_enabled' has a wrong offset!");
static_assert(offsetof(FCAKitPieceChildComponent, M_socket) == 0x000048, "Member 'FCAKitPieceChildComponent::M_socket' has a wrong offset!");
static_assert(offsetof(FCAKitPieceChildComponent, M_attached_actor) == 0x000078, "Member 'FCAKitPieceChildComponent::M_attached_actor' has a wrong offset!");
static_assert(offsetof(FCAKitPieceChildComponent, M_persist_across_variants) == 0x0000A8, "Member 'FCAKitPieceChildComponent::M_persist_across_variants' has a wrong offset!");

// ScriptStruct CAKitBuilderRuntime.CAKitPieceComponentStates
// 0x0080 (0x0080 - 0x0000)
struct FCAKitPieceComponentStates final
{
public:
	TSoftObjectPtr<class UStaticMesh>             M_selected_base;                                   // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class UStaticMesh>, ECAKitPieceAdditiveEnabledState> M_additives_enabled_states;                        // 0x0030(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAKitPieceComponentStates) == 0x000008, "Wrong alignment on FCAKitPieceComponentStates");
static_assert(sizeof(FCAKitPieceComponentStates) == 0x000080, "Wrong size on FCAKitPieceComponentStates");
static_assert(offsetof(FCAKitPieceComponentStates, M_selected_base) == 0x000000, "Member 'FCAKitPieceComponentStates::M_selected_base' has a wrong offset!");
static_assert(offsetof(FCAKitPieceComponentStates, M_additives_enabled_states) == 0x000030, "Member 'FCAKitPieceComponentStates::M_additives_enabled_states' has a wrong offset!");

// ScriptStruct CAKitBuilderRuntime.CAKitPieceMaterialOverrideData
// 0x0048 (0x0048 - 0x0000)
struct FCAKitPieceMaterialOverrideData final
{
public:
	class FName                                   M_group_name;                                      // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      M_material;                                        // 0x0010(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_include_preview_thumbnail;                       // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAKitPieceMaterialOverrideData) == 0x000008, "Wrong alignment on FCAKitPieceMaterialOverrideData");
static_assert(sizeof(FCAKitPieceMaterialOverrideData) == 0x000048, "Wrong size on FCAKitPieceMaterialOverrideData");
static_assert(offsetof(FCAKitPieceMaterialOverrideData, M_group_name) == 0x000000, "Member 'FCAKitPieceMaterialOverrideData::M_group_name' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMaterialOverrideData, M_material) == 0x000010, "Member 'FCAKitPieceMaterialOverrideData::M_material' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMaterialOverrideData, M_include_preview_thumbnail) == 0x000040, "Member 'FCAKitPieceMaterialOverrideData::M_include_preview_thumbnail' has a wrong offset!");

// ScriptStruct CAKitBuilderRuntime.CAKitPieceMaterialOverrideDataRow
// 0x0048 (0x0050 - 0x0008)
struct FCAKitPieceMaterialOverrideDataRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInterface>      M_material;                                        // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype;                                       // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCAKitPieceMaterialOverrideData> M_material_instances;                              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAKitPieceMaterialOverrideDataRow) == 0x000008, "Wrong alignment on FCAKitPieceMaterialOverrideDataRow");
static_assert(sizeof(FCAKitPieceMaterialOverrideDataRow) == 0x000050, "Wrong size on FCAKitPieceMaterialOverrideDataRow");
static_assert(offsetof(FCAKitPieceMaterialOverrideDataRow, M_material) == 0x000008, "Member 'FCAKitPieceMaterialOverrideDataRow::M_material' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMaterialOverrideDataRow, M_archetype) == 0x000038, "Member 'FCAKitPieceMaterialOverrideDataRow::M_archetype' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMaterialOverrideDataRow, M_material_instances) == 0x000040, "Member 'FCAKitPieceMaterialOverrideDataRow::M_material_instances' has a wrong offset!");

// ScriptStruct CAKitBuilderRuntime.CAAtlasTintPaletteRow
// 0x0018 (0x0020 - 0x0008)
struct FCAAtlasTintPaletteRow final : public FTableRowBase
{
public:
	int32                                         M_unique_index;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 M_color_0;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 M_color_1;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 M_color_2;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 M_color_3;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAtlasTintPaletteRow) == 0x000008, "Wrong alignment on FCAAtlasTintPaletteRow");
static_assert(sizeof(FCAAtlasTintPaletteRow) == 0x000020, "Wrong size on FCAAtlasTintPaletteRow");
static_assert(offsetof(FCAAtlasTintPaletteRow, M_unique_index) == 0x000008, "Member 'FCAAtlasTintPaletteRow::M_unique_index' has a wrong offset!");
static_assert(offsetof(FCAAtlasTintPaletteRow, M_color_0) == 0x00000C, "Member 'FCAAtlasTintPaletteRow::M_color_0' has a wrong offset!");
static_assert(offsetof(FCAAtlasTintPaletteRow, M_color_1) == 0x000010, "Member 'FCAAtlasTintPaletteRow::M_color_1' has a wrong offset!");
static_assert(offsetof(FCAAtlasTintPaletteRow, M_color_2) == 0x000014, "Member 'FCAAtlasTintPaletteRow::M_color_2' has a wrong offset!");
static_assert(offsetof(FCAAtlasTintPaletteRow, M_color_3) == 0x000018, "Member 'FCAAtlasTintPaletteRow::M_color_3' has a wrong offset!");

// ScriptStruct CAKitBuilderRuntime.CAKitPieceMetadataTableRow
// 0x0038 (0x0040 - 0x0008)
struct FCAKitPieceMetadataTableRow final : public FTableRowBase
{
public:
	class UStaticMesh*                            M_static_mesh;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EStructuralType>                       M_structural_types;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ELength                                       M_length;                                          // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_flipped;                                         // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallShape                                    M_shape;                                           // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EArchetype>                            M_archetype_groups;                                // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EKitPieceRole                                 M_role;                                            // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAKitPieceMetadataTableRow) == 0x000008, "Wrong alignment on FCAKitPieceMetadataTableRow");
static_assert(sizeof(FCAKitPieceMetadataTableRow) == 0x000040, "Wrong size on FCAKitPieceMetadataTableRow");
static_assert(offsetof(FCAKitPieceMetadataTableRow, M_static_mesh) == 0x000008, "Member 'FCAKitPieceMetadataTableRow::M_static_mesh' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMetadataTableRow, M_structural_types) == 0x000010, "Member 'FCAKitPieceMetadataTableRow::M_structural_types' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMetadataTableRow, M_length) == 0x000020, "Member 'FCAKitPieceMetadataTableRow::M_length' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMetadataTableRow, M_flipped) == 0x000021, "Member 'FCAKitPieceMetadataTableRow::M_flipped' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMetadataTableRow, M_shape) == 0x000022, "Member 'FCAKitPieceMetadataTableRow::M_shape' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMetadataTableRow, M_archetype_groups) == 0x000028, "Member 'FCAKitPieceMetadataTableRow::M_archetype_groups' has a wrong offset!");
static_assert(offsetof(FCAKitPieceMetadataTableRow, M_role) == 0x000038, "Member 'FCAKitPieceMetadataTableRow::M_role' has a wrong offset!");

// ScriptStruct CAKitBuilderRuntime.CAKitPieceDataRow
// 0x00E8 (0x00F0 - 0x0008)
struct FCAKitPieceDataRow final : public FTableRowBase
{
public:
	TSet<class FName>                             M_categories;                                      // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	class FName                                   M_variant_set_name;                                // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 M_asset;                                           // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             M_white_box;                                       // 0x0098(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UStaticMesh>>     M_bases;                                           // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UStaticMesh>>     M_additives;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	ECAKitPieceDisplayType                        M_display_type;                                    // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_was_deleted;                                     // 0x00E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAKitPieceDataRow) == 0x000008, "Wrong alignment on FCAKitPieceDataRow");
static_assert(sizeof(FCAKitPieceDataRow) == 0x0000F0, "Wrong size on FCAKitPieceDataRow");
static_assert(offsetof(FCAKitPieceDataRow, M_categories) == 0x000008, "Member 'FCAKitPieceDataRow::M_categories' has a wrong offset!");
static_assert(offsetof(FCAKitPieceDataRow, M_variant_set_name) == 0x000058, "Member 'FCAKitPieceDataRow::M_variant_set_name' has a wrong offset!");
static_assert(offsetof(FCAKitPieceDataRow, M_asset) == 0x000068, "Member 'FCAKitPieceDataRow::M_asset' has a wrong offset!");
static_assert(offsetof(FCAKitPieceDataRow, M_white_box) == 0x000098, "Member 'FCAKitPieceDataRow::M_white_box' has a wrong offset!");
static_assert(offsetof(FCAKitPieceDataRow, M_bases) == 0x0000C8, "Member 'FCAKitPieceDataRow::M_bases' has a wrong offset!");
static_assert(offsetof(FCAKitPieceDataRow, M_additives) == 0x0000D8, "Member 'FCAKitPieceDataRow::M_additives' has a wrong offset!");
static_assert(offsetof(FCAKitPieceDataRow, M_display_type) == 0x0000E8, "Member 'FCAKitPieceDataRow::M_display_type' has a wrong offset!");
static_assert(offsetof(FCAKitPieceDataRow, M_was_deleted) == 0x0000E9, "Member 'FCAKitPieceDataRow::M_was_deleted' has a wrong offset!");

}

