#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CAProceduralRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CAKitBuilderRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum CAProceduralRuntime.ENodeBuildType
// NumValues: 0x0004
enum class ENodeBuildType : uint8
{
	None                                     = 0,
	NoneTraversable                          = 1,
	Traversable                              = 2,
	ENodeBuildType_MAX                       = 3,
};

// Enum CAProceduralRuntime.EFeatureType
// NumValues: 0x0005
enum class EFeatureType : uint8
{
	None                                     = 0,
	Valve                                    = 1,
	WallBracket                              = 2,
	Num                                      = 3,
	EFeatureType_MAX                         = 4,
};

// Enum CAProceduralRuntime.EPipeType
// NumValues: 0x0003
enum class EPipeType : uint8
{
	Square                                   = 0,
	Round                                    = 1,
	EPipeType_MAX                            = 2,
};

// Enum CAProceduralRuntime.ECAProceduralErrorSeverity
// NumValues: 0x0003
enum class ECAProceduralErrorSeverity : uint8
{
	Warning                                  = 0,
	Error                                    = 1,
	ECAProceduralErrorSeverity_MAX           = 2,
};

// Enum CAProceduralRuntime.EPathWidth
// NumValues: 0x0003
enum class EPathWidth : uint8
{
	Single                                   = 1,
	Double                                   = 2,
	EPathWidth_MAX                           = 3,
};

// Enum CAProceduralRuntime.EPathAlignment
// NumValues: 0x0004
enum class EPathAlignment : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	EPathAlignment_MAX                       = 3,
};

// Enum CAProceduralRuntime.ECARoomConstructionMethod
// NumValues: 0x0003
enum class ECARoomConstructionMethod : uint8
{
	RoomToolV1                               = 0,
	RoomToolV2                               = 1,
	ECARoomConstructionMethod_MAX            = 2,
};

// Enum CAProceduralRuntime.ECapperRegionType
// NumValues: 0x0006
enum class ECapperRegionType : uint8
{
	Panel                                    = 0,
	Greeble                                  = 1,
	None                                     = 2,
	Num                                      = 3,
	Invalid                                  = 4,
	ECapperRegionType_MAX                    = 5,
};

// Enum CAProceduralRuntime.ECapperConnectionType
// NumValues: 0x0007
enum class ECapperConnectionType : uint8
{
	Perimeter                                = 0,
	Divider                                  = 1,
	Path                                     = 2,
	Bulkhead                                 = 3,
	Num                                      = 4,
	Invalid                                  = 5,
	ECapperConnectionType_MAX                = 6,
};

// Enum CAProceduralRuntime.ECornerType
// NumValues: 0x0004
enum class ECornerType : uint8
{
	Round                                    = 0,
	Chamfered                                = 1,
	Square                                   = 2,
	ECornerType_MAX                          = 3,
};

// Enum CAProceduralRuntime.ECapperType
// NumValues: 0x0004
enum class ECapperType : uint8
{
	Floor                                    = 0,
	Ceiling                                  = 1,
	Invalid                                  = 2,
	ECapperType_MAX                          = 3,
};

// Enum CAProceduralRuntime.EGeneratedCornerPartType
// NumValues: 0x001A
enum class EGeneratedCornerPartType : uint8
{
	Wall_Main                                = 0,
	Wall_Mid                                 = 1,
	Wall_MidH                                = 2,
	Wall_Walkway                             = 3,
	Walkway                                  = 4,
	Walkway_Narrow                           = 5,
	Landing_Walkway                          = 6,
	Landing_Walkway_Narrow                   = 7,
	Wall_Walkway_Narrow                      = 8,
	Mezzanine_Edge                           = 9,
	Raised_Floor_Edge                        = 10,
	Arch_Lintel                              = 11,
	Corridor_Wall_Narrow                     = 12,
	Corridor_Wall_Wide                       = 13,
	Vent                                     = 14,
	Corridor_Floor_Narrow                    = 15,
	Corridor_Floor_Wide                      = 16,
	Corridor_Ceiling_Narrow                  = 17,
	Corridor_Ceiling_Wide                    = 18,
	Coving_Small                             = 19,
	Coving_Large                             = 20,
	Vent_Low                                 = 21,
	Landing_Wall                             = 22,
	Landing_Wall_Raised                      = 23,
	Dropped_Ceiling_Edge                     = 24,
	EGeneratedCornerPartType_MAX             = 25,
};

// Enum CAProceduralRuntime.ETJunctionRotation
// NumValues: 0x0006
enum class ETJunctionRotation : uint8
{
	None                                     = 0,
	Plus_90                                  = 1,
	Neg_90                                   = 2,
	Num                                      = 3,
	Invalid                                  = 4,
	ETJunctionRotation_MAX                   = 5,
};

// Enum CAProceduralRuntime.ECAWallOffsetType
// NumValues: 0x0005
enum class ECAWallOffsetType : uint8
{
	Unset                                    = 0,
	Fixed                                    = 1,
	GeneratedCorner                          = 2,
	DeadEnd                                  = 3,
	ECAWallOffsetType_MAX                    = 4,
};

// Enum CAProceduralRuntime.EBreakType
// NumValues: 0x002F
enum class EBreakType : uint8
{
	None                                     = 0,
	Empty                                    = 1,
	Wall                                     = 2,
	Door                                     = 3,
	DoorSingle                               = 4,
	DoorDouble                               = 5,
	Arch                                     = 6,
	Window                                   = 7,
	WindowLarge                              = 8,
	MaintenanceAccess                        = 9,
	Bulkhead                                 = 10,
	BulkheadBraceSmall                       = 11,
	BulkheadBraceMedium                      = 12,
	BulkheadBraceLarge                       = 13,
	BulkheadDoorSingle                       = 14,
	BulkheadDoorDouble                       = 15,
	BulkheadArchSingle                       = 16,
	BulkheadArchDouble                       = 17,
	Vent                                     = 18,
	VentLow                                  = 19,
	VaultDoor                                = 20,
	VendingMachine                           = 21,
	StairsCenterGround                       = 22,
	StairsCenterRaised                       = 23,
	StairsCenterTraverse                     = 24,
	StairsLeftGround                         = 25,
	StairsLeftRaised                         = 26,
	StairsLeftTraverse                       = 27,
	StairsRightGround                        = 28,
	StairsRightRaised                        = 29,
	StairsRightTraverse                      = 30,
	StairsUpFull                             = 31,
	StairsUpHalf                             = 32,
	StairsDownFull                           = 33,
	StairsDownHalf                           = 34,
	StairsUpFullNoBulkheads                  = 35,
	StairsUpHalfNoBulkheads                  = 36,
	StairsDownFullNoBulkheads                = 37,
	StairsDownHalfNoBulkheads                = 38,
	StairsNarrowCenterGround                 = 39,
	StairsNarrowCenterTraverse               = 40,
	StairsNarrowLeftGround                   = 41,
	StairsNarrowLeftTraverse                 = 42,
	StairsNarrowRightGround                  = 43,
	StairsNarrowRightTraverse                = 44,
	Num                                      = 45,
	EBreakType_MAX                           = 46,
};

// Enum CAProceduralRuntime.EWallBuildType
// NumValues: 0x0006
enum class EWallBuildType : uint8
{
	Unset                                    = 0,
	SingleSided                              = 1,
	DoubleSided                              = 2,
	Exclusive                                = 3,
	MonoRail                                 = 4,
	EWallBuildType_MAX                       = 5,
};

// Enum CAProceduralRuntime.EStructuralRole
// NumValues: 0x0003
enum class EStructuralRole : uint8
{
	MainStructure                            = 0,
	SuperStructure                           = 1,
	EStructuralRole_MAX                      = 2,
};

// Enum CAProceduralRuntime.EWallBuildSection
// NumValues: 0x0003
enum class EWallBuildSection : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	EWallBuildSection_MAX                    = 2,
};

// Enum CAProceduralRuntime.EColourTintType
// NumValues: 0x0003
enum class EColourTintType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	EColourTintType_MAX                      = 2,
};

// Enum CAProceduralRuntime.EWallNum
// NumValues: 0x0013
enum class EWallNum : uint8
{
	Wall_0                                   = 0,
	Wall_1                                   = 1,
	Wall_2                                   = 2,
	Wall_3                                   = 3,
	Wall_4                                   = 4,
	Wall_5                                   = 5,
	Wall_6                                   = 6,
	Wall_7                                   = 7,
	Above_Wall_0                             = 8,
	Above_Wall_1                             = 9,
	Above_Wall_2                             = 10,
	Above_Wall_3                             = 11,
	Above_Wall_4                             = 12,
	Above_Wall_5                             = 13,
	Above_Wall_6                             = 14,
	Above_Wall_7                             = 15,
	None                                     = 16,
	Invalid                                  = 17,
	EWallNum_MAX                             = 18,
};

// Enum CAProceduralRuntime.EAdditiveSetBy
// NumValues: 0x0005
enum class EAdditiveSetBy : uint8
{
	None                                     = 0,
	KitPieceConfigWall                       = 1,
	OppositeKitPieceConfigWall               = 2,
	AboveOppositeKitPieceConfigWall          = 3,
	EAdditiveSetBy_MAX                       = 4,
};

// Enum CAProceduralRuntime.ECeilingEnabledState
// NumValues: 0x0004
enum class ECeilingEnabledState : uint8
{
	Any                                      = 0,
	On                                       = 1,
	Off                                      = 2,
	ECeilingEnabledState_MAX                 = 3,
};

// Enum CAProceduralRuntime.EFloorEnabledState
// NumValues: 0x0004
enum class EFloorEnabledState : uint8
{
	Any                                      = 0,
	On                                       = 1,
	Off                                      = 2,
	EFloorEnabledState_MAX                   = 3,
};

// Enum CAProceduralRuntime.EWallConstructionPattern
// NumValues: 0x0005
enum class EWallConstructionPattern : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	Symmetrical                              = 2,
	RoomToolV1                               = 3,
	EWallConstructionPattern_MAX             = 4,
};

// Enum CAProceduralRuntime.EWallSegStateFlag
// NumValues: 0x000A
enum class EWallSegStateFlag : uint8
{
	None                                     = 0,
	HasWalkway                               = 1,
	IsRaised                                 = 2,
	HasFloor                                 = 4,
	HasCeiling                               = 8,
	IsOffset                                 = 16,
	HasLedge                                 = 32,
	HasRailing                               = 64,
	HasCover                                 = 128,
	EWallSegStateFlag_MAX                    = 129,
};

// ScriptStruct CAProceduralRuntime.CAConnectionShapeData
// 0x0090 (0x0090 - 0x0000)
struct FCAConnectionShapeData final
{
public:
	TSoftObjectPtr<class UCACapperWallSeg>        M_from_wall;                                       // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCACapperWallSeg>        M_to_wall;                                         // 0x0030(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCACapperNode>           M_node;                                            // 0x0060(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAConnectionShapeData) == 0x000008, "Wrong alignment on FCAConnectionShapeData");
static_assert(sizeof(FCAConnectionShapeData) == 0x000090, "Wrong size on FCAConnectionShapeData");
static_assert(offsetof(FCAConnectionShapeData, M_from_wall) == 0x000000, "Member 'FCAConnectionShapeData::M_from_wall' has a wrong offset!");
static_assert(offsetof(FCAConnectionShapeData, M_to_wall) == 0x000030, "Member 'FCAConnectionShapeData::M_to_wall' has a wrong offset!");
static_assert(offsetof(FCAConnectionShapeData, M_node) == 0x000060, "Member 'FCAConnectionShapeData::M_node' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACapperArchetypeSettingsRow
// 0x0038 (0x0040 - 0x0008)
struct FCACapperArchetypeSettingsRow final : public FTableRowBase
{
public:
	ECapperConnectionType                         M_connection_type;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype;                                       // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_inner_arc_length_default;                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_outer_arc_length_default;                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ease_in_default;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_division_spacing_default;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_variable_widths_supported;                       // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_asymmetric_widths_supported;                     // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_corners_supported;                               // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_non_concentric_corners_supported;                // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_junctions_supported;                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECornerType>                           M_corner_shapes_supported;                         // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ECornerType                                   M_corner_shape_default;                            // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCACapperArchetypeSettingsRow) == 0x000008, "Wrong alignment on FCACapperArchetypeSettingsRow");
static_assert(sizeof(FCACapperArchetypeSettingsRow) == 0x000040, "Wrong size on FCACapperArchetypeSettingsRow");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_connection_type) == 0x000008, "Member 'FCACapperArchetypeSettingsRow::M_connection_type' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_archetype) == 0x000009, "Member 'FCACapperArchetypeSettingsRow::M_archetype' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_inner_arc_length_default) == 0x00000C, "Member 'FCACapperArchetypeSettingsRow::M_inner_arc_length_default' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_outer_arc_length_default) == 0x000010, "Member 'FCACapperArchetypeSettingsRow::M_outer_arc_length_default' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_ease_in_default) == 0x000014, "Member 'FCACapperArchetypeSettingsRow::M_ease_in_default' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_division_spacing_default) == 0x000018, "Member 'FCACapperArchetypeSettingsRow::M_division_spacing_default' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_variable_widths_supported) == 0x00001C, "Member 'FCACapperArchetypeSettingsRow::M_variable_widths_supported' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_asymmetric_widths_supported) == 0x00001D, "Member 'FCACapperArchetypeSettingsRow::M_asymmetric_widths_supported' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_corners_supported) == 0x00001E, "Member 'FCACapperArchetypeSettingsRow::M_corners_supported' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_non_concentric_corners_supported) == 0x00001F, "Member 'FCACapperArchetypeSettingsRow::M_non_concentric_corners_supported' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_junctions_supported) == 0x000020, "Member 'FCACapperArchetypeSettingsRow::M_junctions_supported' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_corner_shapes_supported) == 0x000028, "Member 'FCACapperArchetypeSettingsRow::M_corner_shapes_supported' has a wrong offset!");
static_assert(offsetof(FCACapperArchetypeSettingsRow, M_corner_shape_default) == 0x000038, "Member 'FCACapperArchetypeSettingsRow::M_corner_shape_default' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACapperMaterialInstanceData
// 0x0040 (0x0040 - 0x0000)
struct FCACapperMaterialInstanceData final
{
public:
	class FName                                   M_group_name;                                      // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      M_material_instance;                               // 0x0010(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCACapperMaterialInstanceData) == 0x000008, "Wrong alignment on FCACapperMaterialInstanceData");
static_assert(sizeof(FCACapperMaterialInstanceData) == 0x000040, "Wrong size on FCACapperMaterialInstanceData");
static_assert(offsetof(FCACapperMaterialInstanceData, M_group_name) == 0x000000, "Member 'FCACapperMaterialInstanceData::M_group_name' has a wrong offset!");
static_assert(offsetof(FCACapperMaterialInstanceData, M_material_instance) == 0x000010, "Member 'FCACapperMaterialInstanceData::M_material_instance' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACapperRegionMaterialsDataRow
// 0x0058 (0x0060 - 0x0008)
struct FCACapperRegionMaterialsDataRow final : public FTableRowBase
{
public:
	ECapperRegionType                             M_capper_region_type;                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_material_type;                                   // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      M_preview_material;                                // 0x0018(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype;                                       // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECapperType                                   M_capper_type;                                     // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCACapperMaterialInstanceData>  M_material_instances;                              // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCACapperRegionMaterialsDataRow) == 0x000008, "Wrong alignment on FCACapperRegionMaterialsDataRow");
static_assert(sizeof(FCACapperRegionMaterialsDataRow) == 0x000060, "Wrong size on FCACapperRegionMaterialsDataRow");
static_assert(offsetof(FCACapperRegionMaterialsDataRow, M_capper_region_type) == 0x000008, "Member 'FCACapperRegionMaterialsDataRow::M_capper_region_type' has a wrong offset!");
static_assert(offsetof(FCACapperRegionMaterialsDataRow, M_material_type) == 0x00000C, "Member 'FCACapperRegionMaterialsDataRow::M_material_type' has a wrong offset!");
static_assert(offsetof(FCACapperRegionMaterialsDataRow, M_preview_material) == 0x000018, "Member 'FCACapperRegionMaterialsDataRow::M_preview_material' has a wrong offset!");
static_assert(offsetof(FCACapperRegionMaterialsDataRow, M_archetype) == 0x000048, "Member 'FCACapperRegionMaterialsDataRow::M_archetype' has a wrong offset!");
static_assert(offsetof(FCACapperRegionMaterialsDataRow, M_capper_type) == 0x000049, "Member 'FCACapperRegionMaterialsDataRow::M_capper_type' has a wrong offset!");
static_assert(offsetof(FCACapperRegionMaterialsDataRow, M_material_instances) == 0x000050, "Member 'FCACapperRegionMaterialsDataRow::M_material_instances' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACapperConnectionMaterialsDataRow
// 0x0020 (0x0028 - 0x0008)
struct FCACapperConnectionMaterialsDataRow final : public FTableRowBase
{
public:
	class FName                                   M_slot_name;                                       // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECapperConnectionType                         M_connection_type;                                 // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype;                                       // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECapperType                                   M_capper_type;                                     // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCACapperMaterialInstanceData>  M_material_instances;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCACapperConnectionMaterialsDataRow) == 0x000008, "Wrong alignment on FCACapperConnectionMaterialsDataRow");
static_assert(sizeof(FCACapperConnectionMaterialsDataRow) == 0x000028, "Wrong size on FCACapperConnectionMaterialsDataRow");
static_assert(offsetof(FCACapperConnectionMaterialsDataRow, M_slot_name) == 0x000008, "Member 'FCACapperConnectionMaterialsDataRow::M_slot_name' has a wrong offset!");
static_assert(offsetof(FCACapperConnectionMaterialsDataRow, M_connection_type) == 0x000014, "Member 'FCACapperConnectionMaterialsDataRow::M_connection_type' has a wrong offset!");
static_assert(offsetof(FCACapperConnectionMaterialsDataRow, M_archetype) == 0x000015, "Member 'FCACapperConnectionMaterialsDataRow::M_archetype' has a wrong offset!");
static_assert(offsetof(FCACapperConnectionMaterialsDataRow, M_capper_type) == 0x000016, "Member 'FCACapperConnectionMaterialsDataRow::M_capper_type' has a wrong offset!");
static_assert(offsetof(FCACapperConnectionMaterialsDataRow, M_material_instances) == 0x000018, "Member 'FCACapperConnectionMaterialsDataRow::M_material_instances' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACapperMaterialsDataRow
// 0x0020 (0x0028 - 0x0008)
struct FCACapperMaterialsDataRow final : public FTableRowBase
{
public:
	class FName                                   M_slot_name;                                       // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECapperType                                   M_capper_type;                                     // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCACapperMaterialInstanceData>  M_material_instances;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCACapperMaterialsDataRow) == 0x000008, "Wrong alignment on FCACapperMaterialsDataRow");
static_assert(sizeof(FCACapperMaterialsDataRow) == 0x000028, "Wrong size on FCACapperMaterialsDataRow");
static_assert(offsetof(FCACapperMaterialsDataRow, M_slot_name) == 0x000008, "Member 'FCACapperMaterialsDataRow::M_slot_name' has a wrong offset!");
static_assert(offsetof(FCACapperMaterialsDataRow, M_archetype) == 0x000014, "Member 'FCACapperMaterialsDataRow::M_archetype' has a wrong offset!");
static_assert(offsetof(FCACapperMaterialsDataRow, M_capper_type) == 0x000015, "Member 'FCACapperMaterialsDataRow::M_capper_type' has a wrong offset!");
static_assert(offsetof(FCACapperMaterialsDataRow, M_material_instances) == 0x000018, "Member 'FCACapperMaterialsDataRow::M_material_instances' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallOffset
// 0x0010 (0x0010 - 0x0000)
struct FCAWallOffset final
{
public:
	float                                         M_offset;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_offset_user_override;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_slack;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_generated_corner_min_offset;                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAWallOffset) == 0x000004, "Wrong alignment on FCAWallOffset");
static_assert(sizeof(FCAWallOffset) == 0x000010, "Wrong size on FCAWallOffset");
static_assert(offsetof(FCAWallOffset, M_offset) == 0x000000, "Member 'FCAWallOffset::M_offset' has a wrong offset!");
static_assert(offsetof(FCAWallOffset, M_offset_user_override) == 0x000004, "Member 'FCAWallOffset::M_offset_user_override' has a wrong offset!");
static_assert(offsetof(FCAWallOffset, M_slack) == 0x000008, "Member 'FCAWallOffset::M_slack' has a wrong offset!");
static_assert(offsetof(FCAWallOffset, M_generated_corner_min_offset) == 0x00000C, "Member 'FCAWallOffset::M_generated_corner_min_offset' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallOffsets
// 0x0040 (0x0040 - 0x0000)
struct FCAWallOffsets final
{
public:
	float                                         M_primary_offset;                                  // 0x0000(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_secondary_offset;                                // 0x0004(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAWallOffset                          M_wall_offset_primary;                             // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FCAWallOffset                          M_wall_offset_secondary;                           // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         M_primary_offset_user_override;                    // 0x0028(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_secondary_offset_user_override;                  // 0x002C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_squidgy_distance_primary;                        // 0x0030(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_squidgy_distance_secondary;                      // 0x0034(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_generated_corner_min_offset_primary;             // 0x0038(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_generated_corner_min_offset_secondary;           // 0x003C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FCAWallOffsets) == 0x000004, "Wrong alignment on FCAWallOffsets");
static_assert(sizeof(FCAWallOffsets) == 0x000040, "Wrong size on FCAWallOffsets");
static_assert(offsetof(FCAWallOffsets, M_primary_offset) == 0x000000, "Member 'FCAWallOffsets::M_primary_offset' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_secondary_offset) == 0x000004, "Member 'FCAWallOffsets::M_secondary_offset' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_wall_offset_primary) == 0x000008, "Member 'FCAWallOffsets::M_wall_offset_primary' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_wall_offset_secondary) == 0x000018, "Member 'FCAWallOffsets::M_wall_offset_secondary' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_primary_offset_user_override) == 0x000028, "Member 'FCAWallOffsets::M_primary_offset_user_override' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_secondary_offset_user_override) == 0x00002C, "Member 'FCAWallOffsets::M_secondary_offset_user_override' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_squidgy_distance_primary) == 0x000030, "Member 'FCAWallOffsets::M_squidgy_distance_primary' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_squidgy_distance_secondary) == 0x000034, "Member 'FCAWallOffsets::M_squidgy_distance_secondary' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_generated_corner_min_offset_primary) == 0x000038, "Member 'FCAWallOffsets::M_generated_corner_min_offset_primary' has a wrong offset!");
static_assert(offsetof(FCAWallOffsets, M_generated_corner_min_offset_secondary) == 0x00003C, "Member 'FCAWallOffsets::M_generated_corner_min_offset_secondary' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallProperties
// 0x000C (0x000C - 0x0000)
struct FCAWallProperties final
{
public:
	EStructuralType                               M_structural_type;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESuperStructure                               M_super_structure;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EElevation                                    M_elevation;                                       // 0x0002(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype;                                       // 0x0003(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype_superstructure;                        // 0x0004(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_state_flag;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAWallProperties) == 0x000004, "Wrong alignment on FCAWallProperties");
static_assert(sizeof(FCAWallProperties) == 0x00000C, "Wrong size on FCAWallProperties");
static_assert(offsetof(FCAWallProperties, M_structural_type) == 0x000000, "Member 'FCAWallProperties::M_structural_type' has a wrong offset!");
static_assert(offsetof(FCAWallProperties, M_super_structure) == 0x000001, "Member 'FCAWallProperties::M_super_structure' has a wrong offset!");
static_assert(offsetof(FCAWallProperties, M_elevation) == 0x000002, "Member 'FCAWallProperties::M_elevation' has a wrong offset!");
static_assert(offsetof(FCAWallProperties, M_archetype) == 0x000003, "Member 'FCAWallProperties::M_archetype' has a wrong offset!");
static_assert(offsetof(FCAWallProperties, M_archetype_superstructure) == 0x000004, "Member 'FCAWallProperties::M_archetype_superstructure' has a wrong offset!");
static_assert(offsetof(FCAWallProperties, M_state_flag) == 0x000008, "Member 'FCAWallProperties::M_state_flag' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAGeneratedCornerProperties
// 0x00B0 (0x00B0 - 0x0000)
struct FCAGeneratedCornerProperties final
{
public:
	class FString                                 M_last_id;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_articulation_angle;                              // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAWallOffsets                         M_offsets_1;                                       // 0x0014(0x0040)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAWallOffsets                         M_offsets_2;                                       // 0x0054(0x0040)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAWallProperties                      M_wall_1;                                          // 0x0094(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAWallProperties                      M_wall_2;                                          // 0x00A0(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAGeneratedCornerProperties) == 0x000008, "Wrong alignment on FCAGeneratedCornerProperties");
static_assert(sizeof(FCAGeneratedCornerProperties) == 0x0000B0, "Wrong size on FCAGeneratedCornerProperties");
static_assert(offsetof(FCAGeneratedCornerProperties, M_last_id) == 0x000000, "Member 'FCAGeneratedCornerProperties::M_last_id' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerProperties, M_articulation_angle) == 0x000010, "Member 'FCAGeneratedCornerProperties::M_articulation_angle' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerProperties, M_offsets_1) == 0x000014, "Member 'FCAGeneratedCornerProperties::M_offsets_1' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerProperties, M_offsets_2) == 0x000054, "Member 'FCAGeneratedCornerProperties::M_offsets_2' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerProperties, M_wall_1) == 0x000094, "Member 'FCAGeneratedCornerProperties::M_wall_1' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerProperties, M_wall_2) == 0x0000A0, "Member 'FCAGeneratedCornerProperties::M_wall_2' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAGeneratedCornerTableRow
// 0x00C0 (0x00C8 - 0x0008)
struct FCAGeneratedCornerTableRow final : public FTableRowBase
{
public:
	struct FCAGeneratedCornerProperties           M_corner_properties;                               // 0x0008(0x00B0)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UStaticMesh>>     M_meshes;                                          // 0x00B8(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAGeneratedCornerTableRow) == 0x000008, "Wrong alignment on FCAGeneratedCornerTableRow");
static_assert(sizeof(FCAGeneratedCornerTableRow) == 0x0000C8, "Wrong size on FCAGeneratedCornerTableRow");
static_assert(offsetof(FCAGeneratedCornerTableRow, M_corner_properties) == 0x000008, "Member 'FCAGeneratedCornerTableRow::M_corner_properties' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerTableRow, M_meshes) == 0x0000B8, "Member 'FCAGeneratedCornerTableRow::M_meshes' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAGeneratedCornerConstructionProperties
// 0x0050 (0x0050 - 0x0000)
struct FCAGeneratedCornerConstructionProperties final
{
public:
	class FString                                 M_guid;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 M_corner_peice_name;                               // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_component_name;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_variant_name;                                    // 0x0030(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_variant_group;                                   // 0x003C(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColourTintType                               M_colour_tint_type;                                // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_enabled_by_default;                              // 0x0049(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFloorUsage                                   M_floor_usage;                                     // 0x004A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStructuralRole                               M_structural_role;                                 // 0x004B(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_is_non_occluder;                                 // 0x004C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_was_deleted;                                     // 0x004D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAGeneratedCornerConstructionProperties) == 0x000008, "Wrong alignment on FCAGeneratedCornerConstructionProperties");
static_assert(sizeof(FCAGeneratedCornerConstructionProperties) == 0x000050, "Wrong size on FCAGeneratedCornerConstructionProperties");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_guid) == 0x000000, "Member 'FCAGeneratedCornerConstructionProperties::M_guid' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_corner_peice_name) == 0x000010, "Member 'FCAGeneratedCornerConstructionProperties::M_corner_peice_name' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_component_name) == 0x000020, "Member 'FCAGeneratedCornerConstructionProperties::M_component_name' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_variant_name) == 0x000030, "Member 'FCAGeneratedCornerConstructionProperties::M_variant_name' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_variant_group) == 0x00003C, "Member 'FCAGeneratedCornerConstructionProperties::M_variant_group' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_colour_tint_type) == 0x000048, "Member 'FCAGeneratedCornerConstructionProperties::M_colour_tint_type' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_enabled_by_default) == 0x000049, "Member 'FCAGeneratedCornerConstructionProperties::M_enabled_by_default' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_floor_usage) == 0x00004A, "Member 'FCAGeneratedCornerConstructionProperties::M_floor_usage' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_structural_role) == 0x00004B, "Member 'FCAGeneratedCornerConstructionProperties::M_structural_role' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_is_non_occluder) == 0x00004C, "Member 'FCAGeneratedCornerConstructionProperties::M_is_non_occluder' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerConstructionProperties, M_was_deleted) == 0x00004D, "Member 'FCAGeneratedCornerConstructionProperties::M_was_deleted' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAProceduralMaterialInstanceData
// 0x0040 (0x0040 - 0x0000)
struct FCAProceduralMaterialInstanceData final
{
public:
	class FName                                   M_group_name;                                      // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      M_material_instance;                               // 0x0010(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAProceduralMaterialInstanceData) == 0x000008, "Wrong alignment on FCAProceduralMaterialInstanceData");
static_assert(sizeof(FCAProceduralMaterialInstanceData) == 0x000040, "Wrong size on FCAProceduralMaterialInstanceData");
static_assert(offsetof(FCAProceduralMaterialInstanceData, M_group_name) == 0x000000, "Member 'FCAProceduralMaterialInstanceData::M_group_name' has a wrong offset!");
static_assert(offsetof(FCAProceduralMaterialInstanceData, M_material_instance) == 0x000010, "Member 'FCAProceduralMaterialInstanceData::M_material_instance' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAGeneratedCornerMaterialsDataRow
// 0x0020 (0x0028 - 0x0008)
struct FCAGeneratedCornerMaterialsDataRow final : public FTableRowBase
{
public:
	class FName                                   M_slot_name;                                       // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCAProceduralMaterialInstanceData> M_material_instances;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAGeneratedCornerMaterialsDataRow) == 0x000008, "Wrong alignment on FCAGeneratedCornerMaterialsDataRow");
static_assert(sizeof(FCAGeneratedCornerMaterialsDataRow) == 0x000028, "Wrong size on FCAGeneratedCornerMaterialsDataRow");
static_assert(offsetof(FCAGeneratedCornerMaterialsDataRow, M_slot_name) == 0x000008, "Member 'FCAGeneratedCornerMaterialsDataRow::M_slot_name' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMaterialsDataRow, M_archetype) == 0x000014, "Member 'FCAGeneratedCornerMaterialsDataRow::M_archetype' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMaterialsDataRow, M_material_instances) == 0x000018, "Member 'FCAGeneratedCornerMaterialsDataRow::M_material_instances' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.PathPointData
// 0x0040 (0x0040 - 0x0000)
struct FPathPointData final
{
public:
	struct FTransform                             M_transform;                                       // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EPathWidth                                    M_width;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathAlignment                                M_alignment;                                       // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_group;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPathPointData) == 0x000010, "Wrong alignment on FPathPointData");
static_assert(sizeof(FPathPointData) == 0x000040, "Wrong size on FPathPointData");
static_assert(offsetof(FPathPointData, M_transform) == 0x000000, "Member 'FPathPointData::M_transform' has a wrong offset!");
static_assert(offsetof(FPathPointData, M_width) == 0x000030, "Member 'FPathPointData::M_width' has a wrong offset!");
static_assert(offsetof(FPathPointData, M_alignment) == 0x000031, "Member 'FPathPointData::M_alignment' has a wrong offset!");
static_assert(offsetof(FPathPointData, M_group) == 0x000034, "Member 'FPathPointData::M_group' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAProceduralUtility
// 0x0001 (0x0001 - 0x0000)
struct FCAProceduralUtility final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAProceduralUtility) == 0x000001, "Wrong alignment on FCAProceduralUtility");
static_assert(sizeof(FCAProceduralUtility) == 0x000001, "Wrong size on FCAProceduralUtility");

// ScriptStruct CAProceduralRuntime.CAKitPieceConstructionData
// 0x0018 (0x0018 - 0x0000)
struct FCAKitPieceConstructionData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCAWallSegment*                         M_attribute_wall_seg;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAKitPieceConstructionData) == 0x000008, "Wrong alignment on FCAKitPieceConstructionData");
static_assert(sizeof(FCAKitPieceConstructionData) == 0x000018, "Wrong size on FCAKitPieceConstructionData");
static_assert(offsetof(FCAKitPieceConstructionData, M_attribute_wall_seg) == 0x000010, "Member 'FCAKitPieceConstructionData::M_attribute_wall_seg' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACeilingMaterialsDataRow
// 0x0090 (0x0098 - 0x0008)
struct FCACeilingMaterialsDataRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInterface>      M_whitebox;                                        // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      M_ceiling;                                         // 0x0038(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      M_ceiling_trim;                                    // 0x0068(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCACeilingMaterialsDataRow) == 0x000008, "Wrong alignment on FCACeilingMaterialsDataRow");
static_assert(sizeof(FCACeilingMaterialsDataRow) == 0x000098, "Wrong size on FCACeilingMaterialsDataRow");
static_assert(offsetof(FCACeilingMaterialsDataRow, M_whitebox) == 0x000008, "Member 'FCACeilingMaterialsDataRow::M_whitebox' has a wrong offset!");
static_assert(offsetof(FCACeilingMaterialsDataRow, M_ceiling) == 0x000038, "Member 'FCACeilingMaterialsDataRow::M_ceiling' has a wrong offset!");
static_assert(offsetof(FCACeilingMaterialsDataRow, M_ceiling_trim) == 0x000068, "Member 'FCACeilingMaterialsDataRow::M_ceiling_trim' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAFloorMaterialsDataRow
// 0x00F0 (0x00F8 - 0x0008)
struct FCAFloorMaterialsDataRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInterface>      M_whitebox;                                        // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      M_floor;                                           // 0x0038(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      M_floor_trim;                                      // 0x0068(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      M_path;                                            // 0x0098(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      M_path_trim;                                       // 0x00C8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAFloorMaterialsDataRow) == 0x000008, "Wrong alignment on FCAFloorMaterialsDataRow");
static_assert(sizeof(FCAFloorMaterialsDataRow) == 0x0000F8, "Wrong size on FCAFloorMaterialsDataRow");
static_assert(offsetof(FCAFloorMaterialsDataRow, M_whitebox) == 0x000008, "Member 'FCAFloorMaterialsDataRow::M_whitebox' has a wrong offset!");
static_assert(offsetof(FCAFloorMaterialsDataRow, M_floor) == 0x000038, "Member 'FCAFloorMaterialsDataRow::M_floor' has a wrong offset!");
static_assert(offsetof(FCAFloorMaterialsDataRow, M_floor_trim) == 0x000068, "Member 'FCAFloorMaterialsDataRow::M_floor_trim' has a wrong offset!");
static_assert(offsetof(FCAFloorMaterialsDataRow, M_path) == 0x000098, "Member 'FCAFloorMaterialsDataRow::M_path' has a wrong offset!");
static_assert(offsetof(FCAFloorMaterialsDataRow, M_path_trim) == 0x0000C8, "Member 'FCAFloorMaterialsDataRow::M_path_trim' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAGeneratedCornerMetricsRow
// 0x0028 (0x0030 - 0x0008)
struct FCAGeneratedCornerMetricsRow final : public FTableRowBase
{
public:
	EGeneratedCornerPartType                      M_part_type;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallArchetype                                M_archetype;                                       // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_thickness;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_max_locate_part_length;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ease_in_obtuse;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ease_in_reflex;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_inner_arc_obtuse;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_inner_arc_reflex;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_outer_arc_obtuse;                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_outer_arc_reflex;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_specify_outer_arc;                               // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_is_double_sided;                                 // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAGeneratedCornerMetricsRow) == 0x000008, "Wrong alignment on FCAGeneratedCornerMetricsRow");
static_assert(sizeof(FCAGeneratedCornerMetricsRow) == 0x000030, "Wrong size on FCAGeneratedCornerMetricsRow");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_part_type) == 0x000008, "Member 'FCAGeneratedCornerMetricsRow::M_part_type' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_archetype) == 0x000009, "Member 'FCAGeneratedCornerMetricsRow::M_archetype' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_thickness) == 0x00000C, "Member 'FCAGeneratedCornerMetricsRow::M_thickness' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_max_locate_part_length) == 0x000010, "Member 'FCAGeneratedCornerMetricsRow::M_max_locate_part_length' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_ease_in_obtuse) == 0x000014, "Member 'FCAGeneratedCornerMetricsRow::M_ease_in_obtuse' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_ease_in_reflex) == 0x000018, "Member 'FCAGeneratedCornerMetricsRow::M_ease_in_reflex' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_inner_arc_obtuse) == 0x00001C, "Member 'FCAGeneratedCornerMetricsRow::M_inner_arc_obtuse' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_inner_arc_reflex) == 0x000020, "Member 'FCAGeneratedCornerMetricsRow::M_inner_arc_reflex' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_outer_arc_obtuse) == 0x000024, "Member 'FCAGeneratedCornerMetricsRow::M_outer_arc_obtuse' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_outer_arc_reflex) == 0x000028, "Member 'FCAGeneratedCornerMetricsRow::M_outer_arc_reflex' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_specify_outer_arc) == 0x00002C, "Member 'FCAGeneratedCornerMetricsRow::M_specify_outer_arc' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerMetricsRow, M_is_double_sided) == 0x00002D, "Member 'FCAGeneratedCornerMetricsRow::M_is_double_sided' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAGeneratedCornerPart
// 0x0014 (0x0014 - 0x0000)
struct FCAGeneratedCornerPart final
{
public:
	EGeneratedCornerPartType                      M_part_type;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStructuralRole                               M_structural_role;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallBuildSection                             M_build_offset;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_vertical_offset;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_horizontal_offset;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_height;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_floor;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ceiling;                                         // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAGeneratedCornerPart) == 0x000004, "Wrong alignment on FCAGeneratedCornerPart");
static_assert(sizeof(FCAGeneratedCornerPart) == 0x000014, "Wrong size on FCAGeneratedCornerPart");
static_assert(offsetof(FCAGeneratedCornerPart, M_part_type) == 0x000000, "Member 'FCAGeneratedCornerPart::M_part_type' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerPart, M_structural_role) == 0x000001, "Member 'FCAGeneratedCornerPart::M_structural_role' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerPart, M_build_offset) == 0x000002, "Member 'FCAGeneratedCornerPart::M_build_offset' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerPart, M_vertical_offset) == 0x000004, "Member 'FCAGeneratedCornerPart::M_vertical_offset' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerPart, M_horizontal_offset) == 0x000008, "Member 'FCAGeneratedCornerPart::M_horizontal_offset' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerPart, M_height) == 0x00000C, "Member 'FCAGeneratedCornerPart::M_height' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerPart, M_floor) == 0x000010, "Member 'FCAGeneratedCornerPart::M_floor' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerPart, M_ceiling) == 0x000011, "Member 'FCAGeneratedCornerPart::M_ceiling' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAGeneratedCornerAsemblyRow
// 0x0018 (0x0020 - 0x0008)
struct FCAGeneratedCornerAsemblyRow final : public FTableRowBase
{
public:
	EStructuralType                               M_structural_type;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESuperStructure                               M_super_structure_type;                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EElevation                                    M_elevation;                                       // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_is_raised;                                       // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCAGeneratedCornerPart>         M_corner_parts;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAGeneratedCornerAsemblyRow) == 0x000008, "Wrong alignment on FCAGeneratedCornerAsemblyRow");
static_assert(sizeof(FCAGeneratedCornerAsemblyRow) == 0x000020, "Wrong size on FCAGeneratedCornerAsemblyRow");
static_assert(offsetof(FCAGeneratedCornerAsemblyRow, M_structural_type) == 0x000008, "Member 'FCAGeneratedCornerAsemblyRow::M_structural_type' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerAsemblyRow, M_super_structure_type) == 0x000009, "Member 'FCAGeneratedCornerAsemblyRow::M_super_structure_type' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerAsemblyRow, M_elevation) == 0x00000A, "Member 'FCAGeneratedCornerAsemblyRow::M_elevation' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerAsemblyRow, M_is_raised) == 0x00000B, "Member 'FCAGeneratedCornerAsemblyRow::M_is_raised' has a wrong offset!");
static_assert(offsetof(FCAGeneratedCornerAsemblyRow, M_corner_parts) == 0x000010, "Member 'FCAGeneratedCornerAsemblyRow::M_corner_parts' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallInputTableRow
// 0x0008 (0x0010 - 0x0008)
struct FCAWallInputTableRow final : public FTableRowBase
{
public:
	EStructuralType                               M_structural_type;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESuperStructure                               M_super_structure;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EElevation                                    M_elevation;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFloorEnabledState                            M_floor_enabled_state;                             // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECeilingEnabledState                          M_ceiling_enabled_state;                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_is_raised;                                       // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_is_offset;                                       // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAWallInputTableRow) == 0x000008, "Wrong alignment on FCAWallInputTableRow");
static_assert(sizeof(FCAWallInputTableRow) == 0x000010, "Wrong size on FCAWallInputTableRow");
static_assert(offsetof(FCAWallInputTableRow, M_structural_type) == 0x000008, "Member 'FCAWallInputTableRow::M_structural_type' has a wrong offset!");
static_assert(offsetof(FCAWallInputTableRow, M_super_structure) == 0x000009, "Member 'FCAWallInputTableRow::M_super_structure' has a wrong offset!");
static_assert(offsetof(FCAWallInputTableRow, M_elevation) == 0x00000A, "Member 'FCAWallInputTableRow::M_elevation' has a wrong offset!");
static_assert(offsetof(FCAWallInputTableRow, M_floor_enabled_state) == 0x00000B, "Member 'FCAWallInputTableRow::M_floor_enabled_state' has a wrong offset!");
static_assert(offsetof(FCAWallInputTableRow, M_ceiling_enabled_state) == 0x00000C, "Member 'FCAWallInputTableRow::M_ceiling_enabled_state' has a wrong offset!");
static_assert(offsetof(FCAWallInputTableRow, M_is_raised) == 0x00000D, "Member 'FCAWallInputTableRow::M_is_raised' has a wrong offset!");
static_assert(offsetof(FCAWallInputTableRow, M_is_offset) == 0x00000E, "Member 'FCAWallInputTableRow::M_is_offset' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAJunctionOffsets
// 0x0008 (0x0008 - 0x0000)
struct FCAJunctionOffsets final
{
public:
	float                                         M_primary_offset;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_secondary_offset;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAJunctionOffsets) == 0x000004, "Wrong alignment on FCAJunctionOffsets");
static_assert(sizeof(FCAJunctionOffsets) == 0x000008, "Wrong size on FCAJunctionOffsets");
static_assert(offsetof(FCAJunctionOffsets, M_primary_offset) == 0x000000, "Member 'FCAJunctionOffsets::M_primary_offset' has a wrong offset!");
static_assert(offsetof(FCAJunctionOffsets, M_secondary_offset) == 0x000004, "Member 'FCAJunctionOffsets::M_secondary_offset' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAKitPieceSetup
// 0x0028 (0x0028 - 0x0000)
struct FCAKitPieceSetup final
{
public:
	class UStaticMesh*                            M_mesh;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_position;                                        // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_rotation;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColourTintType                               M_colour_tint_type;                                // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStructuralRole                               M_structural_role;                                 // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallBuildSection                             M_build_to_offset;                                 // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_kitpiece_config_wall;                            // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_floor_additive_set_by_wall;                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_raised_floor_additive_set_by_wall;               // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_mez_floor_additive_set_by_wall;                  // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_ceiling_additive_set_by_wall;                    // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_dropped_ceiling_additive_set_by_wall;            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_railing_a_additive_set_by_wall;                  // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_cover_a_additive_set_by_wall;                    // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_railing_b_additive_set_by_wall;                  // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallNum                                      M_cover_b_additive_set_by_wall;                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAKitPieceSetup) == 0x000008, "Wrong alignment on FCAKitPieceSetup");
static_assert(sizeof(FCAKitPieceSetup) == 0x000028, "Wrong size on FCAKitPieceSetup");
static_assert(offsetof(FCAKitPieceSetup, M_mesh) == 0x000000, "Member 'FCAKitPieceSetup::M_mesh' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_position) == 0x000008, "Member 'FCAKitPieceSetup::M_position' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_rotation) == 0x000014, "Member 'FCAKitPieceSetup::M_rotation' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_colour_tint_type) == 0x000018, "Member 'FCAKitPieceSetup::M_colour_tint_type' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_structural_role) == 0x000019, "Member 'FCAKitPieceSetup::M_structural_role' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_build_to_offset) == 0x00001A, "Member 'FCAKitPieceSetup::M_build_to_offset' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_kitpiece_config_wall) == 0x00001B, "Member 'FCAKitPieceSetup::M_kitpiece_config_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_floor_additive_set_by_wall) == 0x00001C, "Member 'FCAKitPieceSetup::M_floor_additive_set_by_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_raised_floor_additive_set_by_wall) == 0x00001D, "Member 'FCAKitPieceSetup::M_raised_floor_additive_set_by_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_mez_floor_additive_set_by_wall) == 0x00001E, "Member 'FCAKitPieceSetup::M_mez_floor_additive_set_by_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_ceiling_additive_set_by_wall) == 0x00001F, "Member 'FCAKitPieceSetup::M_ceiling_additive_set_by_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_dropped_ceiling_additive_set_by_wall) == 0x000020, "Member 'FCAKitPieceSetup::M_dropped_ceiling_additive_set_by_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_railing_a_additive_set_by_wall) == 0x000021, "Member 'FCAKitPieceSetup::M_railing_a_additive_set_by_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_cover_a_additive_set_by_wall) == 0x000022, "Member 'FCAKitPieceSetup::M_cover_a_additive_set_by_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_railing_b_additive_set_by_wall) == 0x000023, "Member 'FCAKitPieceSetup::M_railing_b_additive_set_by_wall' has a wrong offset!");
static_assert(offsetof(FCAKitPieceSetup, M_cover_b_additive_set_by_wall) == 0x000024, "Member 'FCAKitPieceSetup::M_cover_b_additive_set_by_wall' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallOutputTableRow
// 0x0010 (0x0018 - 0x0008)
struct FCAWallOutputTableRow final : public FTableRowBase
{
public:
	TArray<struct FCAKitPieceSetup>               M_kitpieces;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAWallOutputTableRow) == 0x000008, "Wrong alignment on FCAWallOutputTableRow");
static_assert(sizeof(FCAWallOutputTableRow) == 0x000018, "Wrong size on FCAWallOutputTableRow");
static_assert(offsetof(FCAWallOutputTableRow, M_kitpieces) == 0x000008, "Member 'FCAWallOutputTableRow::M_kitpieces' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAXJunctionTableRow
// 0x00B8 (0x00C0 - 0x0008)
struct FCAXJunctionTableRow final : public FTableRowBase
{
public:
	struct FCAWallInputTableRow                   M_wall_0;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_1;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_2;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_3;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_4;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_5;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_6;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_7;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall_0_1;                       // 0x0088(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall_2_3;                       // 0x0090(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall_4_5;                       // 0x0098(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall_6_7;                       // 0x00A0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAWallOutputTableRow                  M_output;                                          // 0x00A8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAXJunctionTableRow) == 0x000008, "Wrong alignment on FCAXJunctionTableRow");
static_assert(sizeof(FCAXJunctionTableRow) == 0x0000C0, "Wrong size on FCAXJunctionTableRow");
static_assert(offsetof(FCAXJunctionTableRow, M_wall_0) == 0x000008, "Member 'FCAXJunctionTableRow::M_wall_0' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_wall_1) == 0x000018, "Member 'FCAXJunctionTableRow::M_wall_1' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_wall_2) == 0x000028, "Member 'FCAXJunctionTableRow::M_wall_2' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_wall_3) == 0x000038, "Member 'FCAXJunctionTableRow::M_wall_3' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_wall_4) == 0x000048, "Member 'FCAXJunctionTableRow::M_wall_4' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_wall_5) == 0x000058, "Member 'FCAXJunctionTableRow::M_wall_5' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_wall_6) == 0x000068, "Member 'FCAXJunctionTableRow::M_wall_6' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_wall_7) == 0x000078, "Member 'FCAXJunctionTableRow::M_wall_7' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_junction_offsets_wall_0_1) == 0x000088, "Member 'FCAXJunctionTableRow::M_junction_offsets_wall_0_1' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_junction_offsets_wall_2_3) == 0x000090, "Member 'FCAXJunctionTableRow::M_junction_offsets_wall_2_3' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_junction_offsets_wall_4_5) == 0x000098, "Member 'FCAXJunctionTableRow::M_junction_offsets_wall_4_5' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_junction_offsets_wall_6_7) == 0x0000A0, "Member 'FCAXJunctionTableRow::M_junction_offsets_wall_6_7' has a wrong offset!");
static_assert(offsetof(FCAXJunctionTableRow, M_output) == 0x0000A8, "Member 'FCAXJunctionTableRow::M_output' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CATJunctionOutputVariant
// 0x0050 (0x0050 - 0x0000)
struct FCATJunctionOutputVariant final
{
public:
	struct FCAJunctionOffsets                     M_junction_offsets_wall_0;                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall_1;                         // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall_2_3;                       // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall_4;                         // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall_5;                         // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAWallOutputTableRow                  M_output;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   M_variant_label;                                   // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCATJunctionOutputVariant) == 0x000008, "Wrong alignment on FCATJunctionOutputVariant");
static_assert(sizeof(FCATJunctionOutputVariant) == 0x000050, "Wrong size on FCATJunctionOutputVariant");
static_assert(offsetof(FCATJunctionOutputVariant, M_junction_offsets_wall_0) == 0x000000, "Member 'FCATJunctionOutputVariant::M_junction_offsets_wall_0' has a wrong offset!");
static_assert(offsetof(FCATJunctionOutputVariant, M_junction_offsets_wall_1) == 0x000008, "Member 'FCATJunctionOutputVariant::M_junction_offsets_wall_1' has a wrong offset!");
static_assert(offsetof(FCATJunctionOutputVariant, M_junction_offsets_wall_2_3) == 0x000010, "Member 'FCATJunctionOutputVariant::M_junction_offsets_wall_2_3' has a wrong offset!");
static_assert(offsetof(FCATJunctionOutputVariant, M_junction_offsets_wall_4) == 0x000018, "Member 'FCATJunctionOutputVariant::M_junction_offsets_wall_4' has a wrong offset!");
static_assert(offsetof(FCATJunctionOutputVariant, M_junction_offsets_wall_5) == 0x000020, "Member 'FCATJunctionOutputVariant::M_junction_offsets_wall_5' has a wrong offset!");
static_assert(offsetof(FCATJunctionOutputVariant, M_output) == 0x000028, "Member 'FCATJunctionOutputVariant::M_output' has a wrong offset!");
static_assert(offsetof(FCATJunctionOutputVariant, M_variant_label) == 0x000040, "Member 'FCATJunctionOutputVariant::M_variant_label' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CATJunctionTableRow
// 0x0078 (0x0080 - 0x0008)
struct FCATJunctionTableRow final : public FTableRowBase
{
public:
	struct FCAWallInputTableRow                   M_wall_0;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_1;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_2;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_3;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_4;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_5;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          M_only_build_t_junction_when_forth_connection_is_none; // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETJunctionRotation                            M_rotation;                                        // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCATJunctionOutputVariant>      M_output_variants;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCATJunctionTableRow) == 0x000008, "Wrong alignment on FCATJunctionTableRow");
static_assert(sizeof(FCATJunctionTableRow) == 0x000080, "Wrong size on FCATJunctionTableRow");
static_assert(offsetof(FCATJunctionTableRow, M_wall_0) == 0x000008, "Member 'FCATJunctionTableRow::M_wall_0' has a wrong offset!");
static_assert(offsetof(FCATJunctionTableRow, M_wall_1) == 0x000018, "Member 'FCATJunctionTableRow::M_wall_1' has a wrong offset!");
static_assert(offsetof(FCATJunctionTableRow, M_wall_2) == 0x000028, "Member 'FCATJunctionTableRow::M_wall_2' has a wrong offset!");
static_assert(offsetof(FCATJunctionTableRow, M_wall_3) == 0x000038, "Member 'FCATJunctionTableRow::M_wall_3' has a wrong offset!");
static_assert(offsetof(FCATJunctionTableRow, M_wall_4) == 0x000048, "Member 'FCATJunctionTableRow::M_wall_4' has a wrong offset!");
static_assert(offsetof(FCATJunctionTableRow, M_wall_5) == 0x000058, "Member 'FCATJunctionTableRow::M_wall_5' has a wrong offset!");
static_assert(offsetof(FCATJunctionTableRow, M_only_build_t_junction_when_forth_connection_is_none) == 0x000068, "Member 'FCATJunctionTableRow::M_only_build_t_junction_when_forth_connection_is_none' has a wrong offset!");
static_assert(offsetof(FCATJunctionTableRow, M_rotation) == 0x000069, "Member 'FCATJunctionTableRow::M_rotation' has a wrong offset!");
static_assert(offsetof(FCATJunctionTableRow, M_output_variants) == 0x000070, "Member 'FCATJunctionTableRow::M_output_variants' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACornerOutputVariant
// 0x0038 (0x0038 - 0x0000)
struct FCACornerOutputVariant final
{
public:
	class FName                                   M_variant_label;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAWallOutputTableRow                  M_output;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall1;                          // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAJunctionOffsets                     M_junction_offsets_wall2;                          // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCACornerOutputVariant) == 0x000008, "Wrong alignment on FCACornerOutputVariant");
static_assert(sizeof(FCACornerOutputVariant) == 0x000038, "Wrong size on FCACornerOutputVariant");
static_assert(offsetof(FCACornerOutputVariant, M_variant_label) == 0x000000, "Member 'FCACornerOutputVariant::M_variant_label' has a wrong offset!");
static_assert(offsetof(FCACornerOutputVariant, M_output) == 0x000010, "Member 'FCACornerOutputVariant::M_output' has a wrong offset!");
static_assert(offsetof(FCACornerOutputVariant, M_junction_offsets_wall1) == 0x000028, "Member 'FCACornerOutputVariant::M_junction_offsets_wall1' has a wrong offset!");
static_assert(offsetof(FCACornerOutputVariant, M_junction_offsets_wall2) == 0x000030, "Member 'FCACornerOutputVariant::M_junction_offsets_wall2' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACornerTableRow
// 0x0050 (0x0058 - 0x0008)
struct FCACornerTableRow final : public FTableRowBase
{
public:
	struct FCAWallInputTableRow                   M_wall_0;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_1;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_2;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAWallInputTableRow                   M_wall_3;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCACornerOutputVariant>         M_wall_output_variants;                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCACornerTableRow) == 0x000008, "Wrong alignment on FCACornerTableRow");
static_assert(sizeof(FCACornerTableRow) == 0x000058, "Wrong size on FCACornerTableRow");
static_assert(offsetof(FCACornerTableRow, M_wall_0) == 0x000008, "Member 'FCACornerTableRow::M_wall_0' has a wrong offset!");
static_assert(offsetof(FCACornerTableRow, M_wall_1) == 0x000018, "Member 'FCACornerTableRow::M_wall_1' has a wrong offset!");
static_assert(offsetof(FCACornerTableRow, M_wall_2) == 0x000028, "Member 'FCACornerTableRow::M_wall_2' has a wrong offset!");
static_assert(offsetof(FCACornerTableRow, M_wall_3) == 0x000038, "Member 'FCACornerTableRow::M_wall_3' has a wrong offset!");
static_assert(offsetof(FCACornerTableRow, M_wall_output_variants) == 0x000048, "Member 'FCACornerTableRow::M_wall_output_variants' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallSegmentTableRow
// 0x0038 (0x0040 - 0x0008)
struct FCAWallSegmentTableRow : public FTableRowBase
{
public:
	struct FCAWallInputTableRow                   M_wall;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ELength                                       M_length;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_min_scale_cm;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_max_scale_cm;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAWallOutputTableRow                  M_output;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAWallSegmentTableRow) == 0x000008, "Wrong alignment on FCAWallSegmentTableRow");
static_assert(sizeof(FCAWallSegmentTableRow) == 0x000040, "Wrong size on FCAWallSegmentTableRow");
static_assert(offsetof(FCAWallSegmentTableRow, M_wall) == 0x000008, "Member 'FCAWallSegmentTableRow::M_wall' has a wrong offset!");
static_assert(offsetof(FCAWallSegmentTableRow, M_length) == 0x000018, "Member 'FCAWallSegmentTableRow::M_length' has a wrong offset!");
static_assert(offsetof(FCAWallSegmentTableRow, M_min_scale_cm) == 0x00001C, "Member 'FCAWallSegmentTableRow::M_min_scale_cm' has a wrong offset!");
static_assert(offsetof(FCAWallSegmentTableRow, M_max_scale_cm) == 0x000020, "Member 'FCAWallSegmentTableRow::M_max_scale_cm' has a wrong offset!");
static_assert(offsetof(FCAWallSegmentTableRow, M_output) == 0x000028, "Member 'FCAWallSegmentTableRow::M_output' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallBreakTableRow
// 0x0010 (0x0050 - 0x0040)
struct FCAWallBreakTableRow final : public FCAWallSegmentTableRow
{
public:
	EBreakType                                    M_break_type;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallShape                                    M_shape;                                           // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_single_sided_feature;                            // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_only_build_left_wall;                            // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_centered;                                        // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_capper_build_offset;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAWallBreakTableRow) == 0x000008, "Wrong alignment on FCAWallBreakTableRow");
static_assert(sizeof(FCAWallBreakTableRow) == 0x000050, "Wrong size on FCAWallBreakTableRow");
static_assert(offsetof(FCAWallBreakTableRow, M_break_type) == 0x000040, "Member 'FCAWallBreakTableRow::M_break_type' has a wrong offset!");
static_assert(offsetof(FCAWallBreakTableRow, M_shape) == 0x000041, "Member 'FCAWallBreakTableRow::M_shape' has a wrong offset!");
static_assert(offsetof(FCAWallBreakTableRow, M_single_sided_feature) == 0x000042, "Member 'FCAWallBreakTableRow::M_single_sided_feature' has a wrong offset!");
static_assert(offsetof(FCAWallBreakTableRow, M_only_build_left_wall) == 0x000043, "Member 'FCAWallBreakTableRow::M_only_build_left_wall' has a wrong offset!");
static_assert(offsetof(FCAWallBreakTableRow, M_centered) == 0x000044, "Member 'FCAWallBreakTableRow::M_centered' has a wrong offset!");
static_assert(offsetof(FCAWallBreakTableRow, M_capper_build_offset) == 0x000048, "Member 'FCAWallBreakTableRow::M_capper_build_offset' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallPropertiesTableRow
// 0x0058 (0x0060 - 0x0008)
struct FCAWallPropertiesTableRow final : public FTableRowBase
{
public:
	struct FCAWallInputTableRow                   M_wall;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EWallBuildType                                M_build_type;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_has_visual_parity;                               // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_generates_cappers;                               // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_contributes_to_floor_capper_above;               // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EWallArchetype>                        M_archetypes_main_structure;                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EWallArchetype>                        M_archetypes_super_structure;                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         M_wall_depth_left_primary;                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_wall_depth_left_secondary;                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_wall_depth_right_primary;                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_wall_depth_right_secondary;                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_capper_offset;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_capper_associated_offset;                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_visualiser_offset;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_visualiser_associated_offset;                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAWallPropertiesTableRow) == 0x000008, "Wrong alignment on FCAWallPropertiesTableRow");
static_assert(sizeof(FCAWallPropertiesTableRow) == 0x000060, "Wrong size on FCAWallPropertiesTableRow");
static_assert(offsetof(FCAWallPropertiesTableRow, M_wall) == 0x000008, "Member 'FCAWallPropertiesTableRow::M_wall' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_build_type) == 0x000018, "Member 'FCAWallPropertiesTableRow::M_build_type' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_has_visual_parity) == 0x000019, "Member 'FCAWallPropertiesTableRow::M_has_visual_parity' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_generates_cappers) == 0x00001A, "Member 'FCAWallPropertiesTableRow::M_generates_cappers' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_contributes_to_floor_capper_above) == 0x00001B, "Member 'FCAWallPropertiesTableRow::M_contributes_to_floor_capper_above' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_archetypes_main_structure) == 0x000020, "Member 'FCAWallPropertiesTableRow::M_archetypes_main_structure' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_archetypes_super_structure) == 0x000030, "Member 'FCAWallPropertiesTableRow::M_archetypes_super_structure' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_wall_depth_left_primary) == 0x000040, "Member 'FCAWallPropertiesTableRow::M_wall_depth_left_primary' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_wall_depth_left_secondary) == 0x000044, "Member 'FCAWallPropertiesTableRow::M_wall_depth_left_secondary' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_wall_depth_right_primary) == 0x000048, "Member 'FCAWallPropertiesTableRow::M_wall_depth_right_primary' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_wall_depth_right_secondary) == 0x00004C, "Member 'FCAWallPropertiesTableRow::M_wall_depth_right_secondary' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_capper_offset) == 0x000050, "Member 'FCAWallPropertiesTableRow::M_capper_offset' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_capper_associated_offset) == 0x000054, "Member 'FCAWallPropertiesTableRow::M_capper_associated_offset' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_visualiser_offset) == 0x000058, "Member 'FCAWallPropertiesTableRow::M_visualiser_offset' has a wrong offset!");
static_assert(offsetof(FCAWallPropertiesTableRow, M_visualiser_associated_offset) == 0x00005C, "Member 'FCAWallPropertiesTableRow::M_visualiser_associated_offset' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAWallConstructionRow
// 0x0020 (0x0028 - 0x0008)
struct FCAWallConstructionRow final : public FTableRowBase
{
public:
	int32                                         M_length;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallConstructionPattern                      M_construction_pattern;                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELength                                       M_min_length;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELength                                       M_max_length;                                      // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_scale;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELength>                               M_lengths;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAWallConstructionRow) == 0x000008, "Wrong alignment on FCAWallConstructionRow");
static_assert(sizeof(FCAWallConstructionRow) == 0x000028, "Wrong size on FCAWallConstructionRow");
static_assert(offsetof(FCAWallConstructionRow, M_length) == 0x000008, "Member 'FCAWallConstructionRow::M_length' has a wrong offset!");
static_assert(offsetof(FCAWallConstructionRow, M_construction_pattern) == 0x00000C, "Member 'FCAWallConstructionRow::M_construction_pattern' has a wrong offset!");
static_assert(offsetof(FCAWallConstructionRow, M_min_length) == 0x00000D, "Member 'FCAWallConstructionRow::M_min_length' has a wrong offset!");
static_assert(offsetof(FCAWallConstructionRow, M_max_length) == 0x00000E, "Member 'FCAWallConstructionRow::M_max_length' has a wrong offset!");
static_assert(offsetof(FCAWallConstructionRow, M_scale) == 0x000010, "Member 'FCAWallConstructionRow::M_scale' has a wrong offset!");
static_assert(offsetof(FCAWallConstructionRow, M_lengths) == 0x000018, "Member 'FCAWallConstructionRow::M_lengths' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.ActorPool
// 0x0010 (0x0010 - 0x0000)
struct FActorPool final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          M_actors;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorPool) == 0x000008, "Wrong alignment on FActorPool");
static_assert(sizeof(FActorPool) == 0x000010, "Wrong size on FActorPool");
static_assert(offsetof(FActorPool, M_actors) == 0x000000, "Member 'FActorPool::M_actors' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAJunctionConstructionData
// 0x0050 (0x0050 - 0x0000)
struct FCAJunctionConstructionData
{
public:
	TArray<TSoftObjectPtr<class UCAWallSegment>>  M_wall_segs;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCAWallSegment>          M_attribute_wall_seg;                              // 0x0010(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_row_name;                                        // 0x0040(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_angle_from;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAJunctionConstructionData) == 0x000008, "Wrong alignment on FCAJunctionConstructionData");
static_assert(sizeof(FCAJunctionConstructionData) == 0x000050, "Wrong size on FCAJunctionConstructionData");
static_assert(offsetof(FCAJunctionConstructionData, M_wall_segs) == 0x000000, "Member 'FCAJunctionConstructionData::M_wall_segs' has a wrong offset!");
static_assert(offsetof(FCAJunctionConstructionData, M_attribute_wall_seg) == 0x000010, "Member 'FCAJunctionConstructionData::M_attribute_wall_seg' has a wrong offset!");
static_assert(offsetof(FCAJunctionConstructionData, M_row_name) == 0x000040, "Member 'FCAJunctionConstructionData::M_row_name' has a wrong offset!");
static_assert(offsetof(FCAJunctionConstructionData, M_angle_from) == 0x00004C, "Member 'FCAJunctionConstructionData::M_angle_from' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CACornerJunction
// 0x0020 (0x0070 - 0x0050)
struct FCACornerJunction final : public FCAJunctionConstructionData
{
public:
	struct FVector                                M_dir_from;                                        // 0x0050(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_dir_to;                                          // 0x005C(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallShape                                    M_shape;                                           // 0x0068(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_is_part_of_t_or_x_junction;                      // 0x0069(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_is_used;                                         // 0x006A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCACornerJunction) == 0x000008, "Wrong alignment on FCACornerJunction");
static_assert(sizeof(FCACornerJunction) == 0x000070, "Wrong size on FCACornerJunction");
static_assert(offsetof(FCACornerJunction, M_dir_from) == 0x000050, "Member 'FCACornerJunction::M_dir_from' has a wrong offset!");
static_assert(offsetof(FCACornerJunction, M_dir_to) == 0x00005C, "Member 'FCACornerJunction::M_dir_to' has a wrong offset!");
static_assert(offsetof(FCACornerJunction, M_shape) == 0x000068, "Member 'FCACornerJunction::M_shape' has a wrong offset!");
static_assert(offsetof(FCACornerJunction, M_is_part_of_t_or_x_junction) == 0x000069, "Member 'FCACornerJunction::M_is_part_of_t_or_x_junction' has a wrong offset!");
static_assert(offsetof(FCACornerJunction, M_is_used) == 0x00006A, "Member 'FCACornerJunction::M_is_used' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAConnetionEnd
// 0x0000 (0x0050 - 0x0050)
struct FCAConnetionEnd final : public FCAJunctionConstructionData
{
};
static_assert(alignof(FCAConnetionEnd) == 0x000008, "Wrong alignment on FCAConnetionEnd");
static_assert(sizeof(FCAConnetionEnd) == 0x000050, "Wrong size on FCAConnetionEnd");

// ScriptStruct CAProceduralRuntime.CATJunction
// 0x0008 (0x0058 - 0x0050)
struct FCATJunction final : public FCAJunctionConstructionData
{
public:
	ETJunctionRotation                            Rotation;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_fourth_connection_is_null;                       // 0x0051(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCATJunction) == 0x000008, "Wrong alignment on FCATJunction");
static_assert(sizeof(FCATJunction) == 0x000058, "Wrong size on FCATJunction");
static_assert(offsetof(FCATJunction, Rotation) == 0x000050, "Member 'FCATJunction::Rotation' has a wrong offset!");
static_assert(offsetof(FCATJunction, M_fourth_connection_is_null) == 0x000051, "Member 'FCATJunction::M_fourth_connection_is_null' has a wrong offset!");

// ScriptStruct CAProceduralRuntime.CAXJunction
// 0x0000 (0x0050 - 0x0050)
struct FCAXJunction final : public FCAJunctionConstructionData
{
};
static_assert(alignof(FCAXJunction) == 0x000008, "Wrong alignment on FCAXJunction");
static_assert(sizeof(FCAXJunction) == 0x000050, "Wrong size on FCAXJunction");

// ScriptStruct CAProceduralRuntime.CAJunctionTableData
// 0x0050 (0x0050 - 0x0000)
struct FCAJunctionTableData final
{
public:
	EWallShape                                    M_wall_shape;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_table_row;                                       // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCAWallSegment>          M_wall_zero;                                       // 0x0010(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UCAWallSegment>>  M_walls;                                           // 0x0040(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAJunctionTableData) == 0x000008, "Wrong alignment on FCAJunctionTableData");
static_assert(sizeof(FCAJunctionTableData) == 0x000050, "Wrong size on FCAJunctionTableData");
static_assert(offsetof(FCAJunctionTableData, M_wall_shape) == 0x000000, "Member 'FCAJunctionTableData::M_wall_shape' has a wrong offset!");
static_assert(offsetof(FCAJunctionTableData, M_table_row) == 0x000004, "Member 'FCAJunctionTableData::M_table_row' has a wrong offset!");
static_assert(offsetof(FCAJunctionTableData, M_wall_zero) == 0x000010, "Member 'FCAJunctionTableData::M_wall_zero' has a wrong offset!");
static_assert(offsetof(FCAJunctionTableData, M_walls) == 0x000040, "Member 'FCAJunctionTableData::M_walls' has a wrong offset!");

}

