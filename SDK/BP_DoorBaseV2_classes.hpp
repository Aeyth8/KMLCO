#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DoorBaseV2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CAAudio_structs.hpp"
#include "F_EditorActorSnapToData_structs.hpp"
#include "Keaton_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DoorBaseV2.BP_DoorBaseV2_C
// 0x02C0 (0x0670 - 0x03B0)
class ABP_DoorBaseV2_C final : public ACADoorBaseV2
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticDoor;                                        // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCAFoamAlignmentComponent*              CAFoamAlignment;                                   // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   DoorTypeText1;                                     // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   DoorTypeText;                                      // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DoorSwitchReference2;                              // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorSwitchMesh1;                                   // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Door_Switch_2_Arrow;                               // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Door_Switch_1_Arrow;                               // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DoorSwitchReference1;                              // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorSwitchMesh;                                    // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCAGameplayCollisionComponent*          OccupiedSensor;                                    // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   RearAudioNode;                                     // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   FrontAudioNode;                                    // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCANavModifierComponent*                CANavModifier;                                     // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCAAudioComponent*                      CAAudio;                                           // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GravityBarrierComponent_C*          GravityBarrierComponent;                           // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCAAudioSpatialLinkComponent*           AudioSpatialLink;                                  // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LockedARMesh_Back_PLACEHOLDER;                     // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LockedARMesh_Front_PLACEHOLDER;                    // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DoorStateComponent_C*               StateMachineComponent;                             // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractionBox;                                    // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCACollisionComponent*                  ProximitySensor;                                   // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Door;                                              // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockedAtStart;                                   // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOpenAtStart;                                     // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsAutomatic;                                       // 0x047A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPowered;                                         // 0x047B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FCAAudioEventType                      PlayEvent;                                         // 0x047C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	struct FCAAudioEventType                      StopEvent;                                         // 0x0480(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	float                                         AutomaticCloseDelay;                               // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoorSwitchOnFront;                                 // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BackDoorSwitchTransform;                           // 0x0490(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             FrontDoorSwitchTransform;                          // 0x04C0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SocketAutoSnapDoorSwitch;                          // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ACACharacter_MainPlayer*, struct FVector> PlayersCrossing;                                   // 0x04F8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_DoorSwitch_C*                       DoorSwitch;                                        // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverridable;                                     // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ClosestFrontDoorSwitch;                            // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ClosestBackDoorSwitch;                             // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class AActor>                     DoorSwitchClass;                                   // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          DoubleSidedSwitch;                                 // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DoorSwitchType_DT;                                 // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DoorSwitchType_RowHandle;                          // 0x0580(0x0018)(Edit, BlueprintVisible, NoDestructor)
	uint8                                         Pad_598[0x8];                                      // 0x0598(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Previous_Transform;                                // 0x05A0(0x0030)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	bool                                          Is_Moving_State;                                   // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FF_EditorActorSnapToData>       SnapInfo;                                          // 0x05D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance)
	struct FVector                                SnapActorCenter;                                   // 0x05E8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnapOverlapRadius;                                 // 0x05F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllowedSnapDistance;                               // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowAutoSnap;                                     // 0x05FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD[0x3];                                      // 0x05FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Door_Switch_1;                                     // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Door_Switch_2;                                     // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             DoorSwitch1OriginalTransform;                      // 0x0610(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             DoorSwitch2OriginalTransform;                      // 0x0640(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DoorBaseV2(int32 EntryPoint);
	void BndEvt__BP_DoorBaseV2_StateMachineComponent_K2Node_ComponentBoundEvent_11_EventEMPFinished__DelegateSignature();
	void BndEvt__BP_DoorBaseV2_StateMachineComponent_K2Node_ComponentBoundEvent_10_EventEMP__DelegateSignature();
	void ReceiveBeginPlay();
	void BndEvt__BP_DoorBaseV2_StateMachineComponent_K2Node_ComponentBoundEvent_9_EventLocked__DelegateSignature();
	void OnProjectileAttached();
	void BndEvt__StateMachineComponent_K2Node_ComponentBoundEvent_0_EventOpen__DelegateSignature();
	void BndEvt__StateMachineComponent_K2Node_ComponentBoundEvent_1_EventClosed__DelegateSignature();
	void BndEvt__BP_DoorBaseV2_StateMachineComponent_K2Node_ComponentBoundEvent_7_StateTagChangedDelegate__DelegateSignature(const struct FGameplayTag& Tag, bool Added);
	void BndEvt__StateMachineComponent_K2Node_ComponentBoundEvent_2_EventOpening__DelegateSignature();
	void OnActorEndBlocking(class USceneComponent* OverlappedComponent, class AActor* OtherActor, class USceneComponent* OtherComp, int32 OtherBodyIndex);
	void OnActorBlocking(class USceneComponent* OverlappedComponent, class AActor* OtherActor, class USceneComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__StateMachineComponent_K2Node_ComponentBoundEvent_3_EventClosing__DelegateSignature();
	void BndEvt__StateMachineComponent_K2Node_ComponentBoundEvent_8_EventTick__DelegateSignature();
	void BndEvt__StateMachineComponent_K2Node_ComponentBoundEvent_6_EventStopped__DelegateSignature();
	void BndEvt__StateMachineComponent_K2Node_ComponentBoundEvent_5_EventMoving__DelegateSignature();
	void BndEvt__StateMachineComponent_K2Node_ComponentBoundEvent_4_UpdateOpen__DelegateSignature(float Percentage);
	void UserConstructionScript();
	void SetOpen(bool Open);
	void ShowLockedState(bool ShowLocked);
	void EnableFoam(bool Enable);
	void UpdateLockedStatus();
	void GetDoorSwitchLocation();
	void SpawnDoorSwitch();
	void Set_Actor_Start_Blocking(class AActor* Actor);
	void Set_Actor_End_Blocking(class AActor* Actor);
	void UpdateDoorSwitchSide();
	void Update_Door_Switch_Type(const struct FDataTableRowHandle& DoorSwitchType);
	void ResetDoorSwitchLocations();
	void FindSnapTarget(bool* Found, struct FTransform* NearestSnapPoint, struct FBox* BoundsDebugBox);
	void Construct_Snap_to_Frame();
	void SnapToFrame();
	void Update_Switch_Unlocked_Tag(bool Is_Locked);

	bool RequiresAuthorization() const;
	bool HasAuthorization(class AActor* User) const;
	void IsOwningTeam(class AActor* User, bool* Result) const;
	class UObject* GetObjectiveLoopElementComponent() const;
	void IsAnySwitchLocked(bool* Locked) const;
	TArray<class AActor*> GetRelatedActorsToIgnoreLOSChecks(const struct FVector& Aoe_centre, const float Aoe_radius, const class AActor* Instigator_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DoorBaseV2_C">();
	}
	static class ABP_DoorBaseV2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DoorBaseV2_C>();
	}
};
static_assert(alignof(ABP_DoorBaseV2_C) == 0x000010, "Wrong alignment on ABP_DoorBaseV2_C");
static_assert(sizeof(ABP_DoorBaseV2_C) == 0x000670, "Wrong size on ABP_DoorBaseV2_C");
static_assert(offsetof(ABP_DoorBaseV2_C, UberGraphFrame) == 0x0003B0, "Member 'ABP_DoorBaseV2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, StaticDoor) == 0x0003B8, "Member 'ABP_DoorBaseV2_C::StaticDoor' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, CAFoamAlignment) == 0x0003C0, "Member 'ABP_DoorBaseV2_C::CAFoamAlignment' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorTypeText1) == 0x0003C8, "Member 'ABP_DoorBaseV2_C::DoorTypeText1' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorTypeText) == 0x0003D0, "Member 'ABP_DoorBaseV2_C::DoorTypeText' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitchReference2) == 0x0003D8, "Member 'ABP_DoorBaseV2_C::DoorSwitchReference2' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitchMesh1) == 0x0003E0, "Member 'ABP_DoorBaseV2_C::DoorSwitchMesh1' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, Door_Switch_2_Arrow) == 0x0003E8, "Member 'ABP_DoorBaseV2_C::Door_Switch_2_Arrow' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, Door_Switch_1_Arrow) == 0x0003F0, "Member 'ABP_DoorBaseV2_C::Door_Switch_1_Arrow' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitchReference1) == 0x0003F8, "Member 'ABP_DoorBaseV2_C::DoorSwitchReference1' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitchMesh) == 0x000400, "Member 'ABP_DoorBaseV2_C::DoorSwitchMesh' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, OccupiedSensor) == 0x000408, "Member 'ABP_DoorBaseV2_C::OccupiedSensor' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, RearAudioNode) == 0x000410, "Member 'ABP_DoorBaseV2_C::RearAudioNode' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, FrontAudioNode) == 0x000418, "Member 'ABP_DoorBaseV2_C::FrontAudioNode' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, CANavModifier) == 0x000420, "Member 'ABP_DoorBaseV2_C::CANavModifier' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, CAAudio) == 0x000428, "Member 'ABP_DoorBaseV2_C::CAAudio' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, GravityBarrierComponent) == 0x000430, "Member 'ABP_DoorBaseV2_C::GravityBarrierComponent' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, AudioSpatialLink) == 0x000438, "Member 'ABP_DoorBaseV2_C::AudioSpatialLink' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, LockedARMesh_Back_PLACEHOLDER) == 0x000440, "Member 'ABP_DoorBaseV2_C::LockedARMesh_Back_PLACEHOLDER' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, LockedARMesh_Front_PLACEHOLDER) == 0x000448, "Member 'ABP_DoorBaseV2_C::LockedARMesh_Front_PLACEHOLDER' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, StateMachineComponent) == 0x000450, "Member 'ABP_DoorBaseV2_C::StateMachineComponent' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, InteractionBox) == 0x000458, "Member 'ABP_DoorBaseV2_C::InteractionBox' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, ProximitySensor) == 0x000460, "Member 'ABP_DoorBaseV2_C::ProximitySensor' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, Door) == 0x000468, "Member 'ABP_DoorBaseV2_C::Door' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DefaultSceneRoot) == 0x000470, "Member 'ABP_DoorBaseV2_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, IsLockedAtStart) == 0x000478, "Member 'ABP_DoorBaseV2_C::IsLockedAtStart' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, IsOpenAtStart) == 0x000479, "Member 'ABP_DoorBaseV2_C::IsOpenAtStart' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, IsAutomatic) == 0x00047A, "Member 'ABP_DoorBaseV2_C::IsAutomatic' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, IsPowered) == 0x00047B, "Member 'ABP_DoorBaseV2_C::IsPowered' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, PlayEvent) == 0x00047C, "Member 'ABP_DoorBaseV2_C::PlayEvent' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, StopEvent) == 0x000480, "Member 'ABP_DoorBaseV2_C::StopEvent' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, AutomaticCloseDelay) == 0x000484, "Member 'ABP_DoorBaseV2_C::AutomaticCloseDelay' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitchOnFront) == 0x000488, "Member 'ABP_DoorBaseV2_C::DoorSwitchOnFront' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, BackDoorSwitchTransform) == 0x000490, "Member 'ABP_DoorBaseV2_C::BackDoorSwitchTransform' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, FrontDoorSwitchTransform) == 0x0004C0, "Member 'ABP_DoorBaseV2_C::FrontDoorSwitchTransform' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, SocketAutoSnapDoorSwitch) == 0x0004F0, "Member 'ABP_DoorBaseV2_C::SocketAutoSnapDoorSwitch' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, PlayersCrossing) == 0x0004F8, "Member 'ABP_DoorBaseV2_C::PlayersCrossing' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitch) == 0x000548, "Member 'ABP_DoorBaseV2_C::DoorSwitch' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, IsOverridable) == 0x000550, "Member 'ABP_DoorBaseV2_C::IsOverridable' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, ClosestFrontDoorSwitch) == 0x000558, "Member 'ABP_DoorBaseV2_C::ClosestFrontDoorSwitch' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, ClosestBackDoorSwitch) == 0x000560, "Member 'ABP_DoorBaseV2_C::ClosestBackDoorSwitch' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitchClass) == 0x000568, "Member 'ABP_DoorBaseV2_C::DoorSwitchClass' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoubleSidedSwitch) == 0x000570, "Member 'ABP_DoorBaseV2_C::DoubleSidedSwitch' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitchType_DT) == 0x000578, "Member 'ABP_DoorBaseV2_C::DoorSwitchType_DT' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitchType_RowHandle) == 0x000580, "Member 'ABP_DoorBaseV2_C::DoorSwitchType_RowHandle' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, Previous_Transform) == 0x0005A0, "Member 'ABP_DoorBaseV2_C::Previous_Transform' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, Is_Moving_State) == 0x0005D0, "Member 'ABP_DoorBaseV2_C::Is_Moving_State' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, SnapInfo) == 0x0005D8, "Member 'ABP_DoorBaseV2_C::SnapInfo' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, SnapActorCenter) == 0x0005E8, "Member 'ABP_DoorBaseV2_C::SnapActorCenter' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, SnapOverlapRadius) == 0x0005F4, "Member 'ABP_DoorBaseV2_C::SnapOverlapRadius' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, AllowedSnapDistance) == 0x0005F8, "Member 'ABP_DoorBaseV2_C::AllowedSnapDistance' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, AllowAutoSnap) == 0x0005FC, "Member 'ABP_DoorBaseV2_C::AllowAutoSnap' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, Door_Switch_1) == 0x000600, "Member 'ABP_DoorBaseV2_C::Door_Switch_1' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, Door_Switch_2) == 0x000608, "Member 'ABP_DoorBaseV2_C::Door_Switch_2' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitch1OriginalTransform) == 0x000610, "Member 'ABP_DoorBaseV2_C::DoorSwitch1OriginalTransform' has a wrong offset!");
static_assert(offsetof(ABP_DoorBaseV2_C, DoorSwitch2OriginalTransform) == 0x000640, "Member 'ABP_DoorBaseV2_C::DoorSwitch2OriginalTransform' has a wrong offset!");

}

