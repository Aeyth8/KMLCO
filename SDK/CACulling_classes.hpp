#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CACulling

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class CACulling.CACullingGameInstance
// 0x0000 (0x0030 - 0x0030)
class ICACullingGameInstance final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CACullingGameInstance">();
	}
	static class ICACullingGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICACullingGameInstance>();
	}
};
static_assert(alignof(ICACullingGameInstance) == 0x000008, "Wrong alignment on ICACullingGameInstance");
static_assert(sizeof(ICACullingGameInstance) == 0x000030, "Wrong size on ICACullingGameInstance");

// Class CACulling.CACullingManager
// 0x0020 (0x0050 - 0x0030)
class UCACullingManager final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACACullingZone*>                 M_world_culling_zones;                             // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CACullingManager">();
	}
	static class UCACullingManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCACullingManager>();
	}
};
static_assert(alignof(UCACullingManager) == 0x000008, "Wrong alignment on UCACullingManager");
static_assert(sizeof(UCACullingManager) == 0x000050, "Wrong size on UCACullingManager");
static_assert(offsetof(UCACullingManager, M_world_culling_zones) == 0x000038, "Member 'UCACullingManager::M_world_culling_zones' has a wrong offset!");

// Class CACulling.CACullingPortal
// 0x0078 (0x02D0 - 0x0258)
class ACACullingPortal final : public AActor
{
public:
	class UCACullingPortalComponent*              PortalComponent;                                   // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          M_enable;                                          // 0x0260(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_always_connected;                                // 0x0261(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ACACullingZone>          ZoneA;                                             // 0x0268(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ACACullingZone>          ZoneB;                                             // 0x0298(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnable(bool New_enable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CACullingPortal">();
	}
	static class ACACullingPortal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACACullingPortal>();
	}
};
static_assert(alignof(ACACullingPortal) == 0x000008, "Wrong alignment on ACACullingPortal");
static_assert(sizeof(ACACullingPortal) == 0x0002D0, "Wrong size on ACACullingPortal");
static_assert(offsetof(ACACullingPortal, PortalComponent) == 0x000258, "Member 'ACACullingPortal::PortalComponent' has a wrong offset!");
static_assert(offsetof(ACACullingPortal, M_enable) == 0x000260, "Member 'ACACullingPortal::M_enable' has a wrong offset!");
static_assert(offsetof(ACACullingPortal, M_always_connected) == 0x000261, "Member 'ACACullingPortal::M_always_connected' has a wrong offset!");
static_assert(offsetof(ACACullingPortal, ZoneA) == 0x000268, "Member 'ACACullingPortal::ZoneA' has a wrong offset!");
static_assert(offsetof(ACACullingPortal, ZoneB) == 0x000298, "Member 'ACACullingPortal::ZoneB' has a wrong offset!");

// Class CACulling.CACullingPortalComponent
// 0x0000 (0x0250 - 0x0250)
class UCACullingPortalComponent final : public USceneComponent
{
public:
	class UBoxComponent*                          PreviewBox;                                        // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CACullingPortalComponent">();
	}
	static class UCACullingPortalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCACullingPortalComponent>();
	}
};
static_assert(alignof(UCACullingPortalComponent) == 0x000010, "Wrong alignment on UCACullingPortalComponent");
static_assert(sizeof(UCACullingPortalComponent) == 0x000250, "Wrong size on UCACullingPortalComponent");
static_assert(offsetof(UCACullingPortalComponent, PreviewBox) == 0x000248, "Member 'UCACullingPortalComponent::PreviewBox' has a wrong offset!");

// Class CACulling.CACullingZone
// 0x0030 (0x02C0 - 0x0290)
class ACACullingZone final : public AVolume
{
public:
	bool                                          M_enable;                                          // 0x0290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACACullingPortal*>               M_portals;                                         // 0x0298(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ACACullingZone>>  M_disabled_zones;                                  // 0x02A8(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnable(bool New_enable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CACullingZone">();
	}
	static class ACACullingZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACACullingZone>();
	}
};
static_assert(alignof(ACACullingZone) == 0x000008, "Wrong alignment on ACACullingZone");
static_assert(sizeof(ACACullingZone) == 0x0002C0, "Wrong size on ACACullingZone");
static_assert(offsetof(ACACullingZone, M_enable) == 0x000290, "Member 'ACACullingZone::M_enable' has a wrong offset!");
static_assert(offsetof(ACACullingZone, M_portals) == 0x000298, "Member 'ACACullingZone::M_portals' has a wrong offset!");
static_assert(offsetof(ACACullingZone, M_disabled_zones) == 0x0002A8, "Member 'ACACullingZone::M_disabled_zones' has a wrong offset!");

}

