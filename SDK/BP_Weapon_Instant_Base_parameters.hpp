#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Weapon_Instant_Base

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_Weapon_Instant_Base.BP_Weapon_Instant_Base_C.ExecuteUbergraph_BP_Weapon_Instant_Base
// 0x0030 (0x0030 - 0x0000)
struct BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_callback_tag;                         // 0x0004(0x000C)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_new_count;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCAWeaponVFXSet*                        K2Node_CustomEvent_BaseVFXSet;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCAWeaponVFXSet*                        K2Node_CustomEvent_DamageBuffVFXSet;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base) == 0x000008, "Wrong alignment on BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base");
static_assert(sizeof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base) == 0x000030, "Wrong size on BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base");
static_assert(offsetof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base, EntryPoint) == 0x000000, "Member 'BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base, K2Node_Event_callback_tag) == 0x000004, "Member 'BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base::K2Node_Event_callback_tag' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base, K2Node_Event_new_count) == 0x000010, "Member 'BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base::K2Node_Event_new_count' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base, K2Node_CustomEvent_BaseVFXSet) == 0x000018, "Member 'BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base::K2Node_CustomEvent_BaseVFXSet' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base, K2Node_CustomEvent_DamageBuffVFXSet) == 0x000020, "Member 'BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base::K2Node_CustomEvent_DamageBuffVFXSet' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base, CallFunc_Less_IntInt_ReturnValue) == 0x000029, "Member 'BP_Weapon_Instant_Base_C_ExecuteUbergraph_BP_Weapon_Instant_Base::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Weapon_Instant_Base.BP_Weapon_Instant_Base_C.SelectAndApplyVFXSet
// 0x0010 (0x0010 - 0x0000)
struct BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet final
{
public:
	class UCAWeaponVFXSet*                        BaseVFXSet;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCAWeaponVFXSet*                        DamageBuffVFXSet;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet) == 0x000008, "Wrong alignment on BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet");
static_assert(sizeof(BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet) == 0x000010, "Wrong size on BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet");
static_assert(offsetof(BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet, BaseVFXSet) == 0x000000, "Member 'BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet::BaseVFXSet' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet, DamageBuffVFXSet) == 0x000008, "Member 'BP_Weapon_Instant_Base_C_SelectAndApplyVFXSet::DamageBuffVFXSet' has a wrong offset!");

// Function BP_Weapon_Instant_Base.BP_Weapon_Instant_Base_C.OnDamageBuffChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_Weapon_Instant_Base_C_OnDamageBuffChanged final
{
public:
	struct FGameplayTag                           Callback_tag;                                      // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         New_count;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Weapon_Instant_Base_C_OnDamageBuffChanged) == 0x000004, "Wrong alignment on BP_Weapon_Instant_Base_C_OnDamageBuffChanged");
static_assert(sizeof(BP_Weapon_Instant_Base_C_OnDamageBuffChanged) == 0x000010, "Wrong size on BP_Weapon_Instant_Base_C_OnDamageBuffChanged");
static_assert(offsetof(BP_Weapon_Instant_Base_C_OnDamageBuffChanged, Callback_tag) == 0x000000, "Member 'BP_Weapon_Instant_Base_C_OnDamageBuffChanged::Callback_tag' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_OnDamageBuffChanged, New_count) == 0x00000C, "Member 'BP_Weapon_Instant_Base_C_OnDamageBuffChanged::New_count' has a wrong offset!");

// Function BP_Weapon_Instant_Base.BP_Weapon_Instant_Base_C.Apply VFX Set
// 0x0010 (0x0010 - 0x0000)
struct BP_Weapon_Instant_Base_C_Apply_VFX_Set final
{
public:
	class UCAWeaponVFXSet*                        VFXSet;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Weapon_Instant_Base_C_Apply_VFX_Set) == 0x000008, "Wrong alignment on BP_Weapon_Instant_Base_C_Apply_VFX_Set");
static_assert(sizeof(BP_Weapon_Instant_Base_C_Apply_VFX_Set) == 0x000010, "Wrong size on BP_Weapon_Instant_Base_C_Apply_VFX_Set");
static_assert(offsetof(BP_Weapon_Instant_Base_C_Apply_VFX_Set, VFXSet) == 0x000000, "Member 'BP_Weapon_Instant_Base_C_Apply_VFX_Set::VFXSet' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_Apply_VFX_Set, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_Weapon_Instant_Base_C_Apply_VFX_Set::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Weapon_Instant_Base_C_Apply_VFX_Set, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'BP_Weapon_Instant_Base_C_Apply_VFX_Set::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

}

