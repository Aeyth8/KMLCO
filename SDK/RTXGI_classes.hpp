#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RTXGI

#include "Basic.hpp"

#include "DeveloperSettings_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "RTXGI_structs.hpp"


namespace SDK
{

// Class RTXGI.DDGIData
// 0x0070 (0x00A8 - 0x0038)
class UDDGIData final : public UDataAsset
{
public:
	class FString                                 M_world_name;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, uint32>                   M_volume_map_mk2;                                  // 0x0048(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DDGIData">();
	}
	static class UDDGIData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDDGIData>();
	}
};
static_assert(alignof(UDDGIData) == 0x000008, "Wrong alignment on UDDGIData");
static_assert(sizeof(UDDGIData) == 0x0000A8, "Wrong size on UDDGIData");
static_assert(offsetof(UDDGIData, M_world_name) == 0x000038, "Member 'UDDGIData::M_world_name' has a wrong offset!");
static_assert(offsetof(UDDGIData, M_volume_map_mk2) == 0x000048, "Member 'UDDGIData::M_volume_map_mk2' has a wrong offset!");

// Class RTXGI.DDGIVolume
// 0x0008 (0x0260 - 0x0258)
class ADDGIVolume final : public AActor
{
public:
	class UDDGIVolumeComponent*                   DDGIVolumeComponent;                               // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DDGIVolume">();
	}
	static class ADDGIVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADDGIVolume>();
	}
};
static_assert(alignof(ADDGIVolume) == 0x000008, "Wrong alignment on ADDGIVolume");
static_assert(sizeof(ADDGIVolume) == 0x000260, "Wrong size on ADDGIVolume");
static_assert(offsetof(ADDGIVolume, DDGIVolumeComponent) == 0x000258, "Member 'ADDGIVolume::DDGIVolumeComponent' has a wrong offset!");

// Class RTXGI.DDGIVolumeComponent
// 0x0210 (0x0460 - 0x0250)
class UDDGIVolumeComponent final : public USceneComponent
{
public:
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableVolume;                                      // 0x0250(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdatePriority;                                    // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LightingPriority;                                  // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendingDistance;                                  // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendingCutoffDistance;                            // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RuntimeStatic;                                     // 0x0264(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Global;                                            // 0x0265(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_266[0x2];                                      // 0x0266(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastOrigin;                                        // 0x0268(0x000C)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDDGIRaysPerProbe                             RaysPerProbe;                                      // 0x0274(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ProbeCounts;                                       // 0x0278(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProbeDensity;                                      // 0x0284(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeMaxRayDistance;                               // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeHistoryWeight;                                // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProbeRelocation                       ProbeRelocation;                                   // 0x0298(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          VisualizeProbes;                                   // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ProbeScrollOffset;                                 // 0x02A4(0x000C)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeDistanceExponent;                             // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeIrradianceEncodingGamma;                      // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeChangeThreshold;                              // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeBrightnessThreshold;                          // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDDGISkyLightType                             SkyLightTypeOnRayMiss;                             // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewBias;                                          // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalBias;                                        // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightMultiplier;                                   // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmissiveMultiplier;                                // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IrradianceScalar;                                  // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D9[0x137];                                    // 0x02D9(0x0137)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 M_irradiance_rendertarget;                         // 0x0410(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 M_distance_rendertarget;                           // 0x0418(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 M_offsets_rendertarget;                            // 0x0420(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      M_irradiance_texture;                              // 0x0428(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      M_distance_texture;                                // 0x0430(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      M_offsets_texture;                                 // 0x0438(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_440[0x20];                                     // 0x0440(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearProbeData();
	void DDGIClearVolumes();
	void SetBlendingCutoffDistance(float NewBlendingCutoffDistance);
	void SetBlendingDistance(float NewBlendingDistance);
	void SetEmissiveMultiplier(float NewEmissiveMultiplier);
	void SetIrradianceScalar(float NewIrradianceScalar);
	void SetLightingPriority(float NewLightingPriority);
	void SetLightMultiplier(float NewLightMultiplier);
	void SetNormalBias(float NewNormalBias);
	void SetProbesVisualization(bool IsProbesVisualized);
	void SetUpdatePriority(float NewUpdatePriority);
	void SetViewBias(float NewViewBias);
	void ToggleVolume(bool IsVolumeEnabled);

	float GetBlendingCutoffDistance() const;
	float GetBlendingDistance() const;
	float GetEmissiveMultiplier() const;
	float GetIrradianceScalar() const;
	float GetLightingPriority() const;
	float GetLightMultiplier() const;
	float GetNormalBias() const;
	float GetUpdatePriority() const;
	float GetViewBias() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DDGIVolumeComponent">();
	}
	static class UDDGIVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDDGIVolumeComponent>();
	}
};
static_assert(alignof(UDDGIVolumeComponent) == 0x000010, "Wrong alignment on UDDGIVolumeComponent");
static_assert(sizeof(UDDGIVolumeComponent) == 0x000460, "Wrong size on UDDGIVolumeComponent");
static_assert(offsetof(UDDGIVolumeComponent, EnableVolume) == 0x000250, "Member 'UDDGIVolumeComponent::EnableVolume' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, UpdatePriority) == 0x000254, "Member 'UDDGIVolumeComponent::UpdatePriority' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, LightingPriority) == 0x000258, "Member 'UDDGIVolumeComponent::LightingPriority' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, BlendingDistance) == 0x00025C, "Member 'UDDGIVolumeComponent::BlendingDistance' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, BlendingCutoffDistance) == 0x000260, "Member 'UDDGIVolumeComponent::BlendingCutoffDistance' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, RuntimeStatic) == 0x000264, "Member 'UDDGIVolumeComponent::RuntimeStatic' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, Global) == 0x000265, "Member 'UDDGIVolumeComponent::Global' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, LastOrigin) == 0x000268, "Member 'UDDGIVolumeComponent::LastOrigin' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, RaysPerProbe) == 0x000274, "Member 'UDDGIVolumeComponent::RaysPerProbe' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeCounts) == 0x000278, "Member 'UDDGIVolumeComponent::ProbeCounts' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeDensity) == 0x000284, "Member 'UDDGIVolumeComponent::ProbeDensity' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeMaxRayDistance) == 0x000290, "Member 'UDDGIVolumeComponent::ProbeMaxRayDistance' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeHistoryWeight) == 0x000294, "Member 'UDDGIVolumeComponent::ProbeHistoryWeight' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeRelocation) == 0x000298, "Member 'UDDGIVolumeComponent::ProbeRelocation' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, VisualizeProbes) == 0x0002A0, "Member 'UDDGIVolumeComponent::VisualizeProbes' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeScrollOffset) == 0x0002A4, "Member 'UDDGIVolumeComponent::ProbeScrollOffset' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeDistanceExponent) == 0x0002B0, "Member 'UDDGIVolumeComponent::ProbeDistanceExponent' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeIrradianceEncodingGamma) == 0x0002B4, "Member 'UDDGIVolumeComponent::ProbeIrradianceEncodingGamma' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeChangeThreshold) == 0x0002B8, "Member 'UDDGIVolumeComponent::ProbeChangeThreshold' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ProbeBrightnessThreshold) == 0x0002BC, "Member 'UDDGIVolumeComponent::ProbeBrightnessThreshold' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, SkyLightTypeOnRayMiss) == 0x0002C0, "Member 'UDDGIVolumeComponent::SkyLightTypeOnRayMiss' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, ViewBias) == 0x0002C4, "Member 'UDDGIVolumeComponent::ViewBias' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, NormalBias) == 0x0002C8, "Member 'UDDGIVolumeComponent::NormalBias' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, LightMultiplier) == 0x0002CC, "Member 'UDDGIVolumeComponent::LightMultiplier' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, EmissiveMultiplier) == 0x0002D0, "Member 'UDDGIVolumeComponent::EmissiveMultiplier' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, IrradianceScalar) == 0x0002D4, "Member 'UDDGIVolumeComponent::IrradianceScalar' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, LightingChannels) == 0x0002D8, "Member 'UDDGIVolumeComponent::LightingChannels' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, M_irradiance_rendertarget) == 0x000410, "Member 'UDDGIVolumeComponent::M_irradiance_rendertarget' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, M_distance_rendertarget) == 0x000418, "Member 'UDDGIVolumeComponent::M_distance_rendertarget' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, M_offsets_rendertarget) == 0x000420, "Member 'UDDGIVolumeComponent::M_offsets_rendertarget' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, M_irradiance_texture) == 0x000428, "Member 'UDDGIVolumeComponent::M_irradiance_texture' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, M_distance_texture) == 0x000430, "Member 'UDDGIVolumeComponent::M_distance_texture' has a wrong offset!");
static_assert(offsetof(UDDGIVolumeComponent, M_offsets_texture) == 0x000438, "Member 'UDDGIVolumeComponent::M_offsets_texture' has a wrong offset!");

// Class RTXGI.RTXGIPluginSettings
// 0x0018 (0x0060 - 0x0048)
class URTXGIPluginSettings final : public UDeveloperSettings
{
public:
	EDDGIIrradianceBits                           IrradianceBits;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDDGIDistanceBits                             DistanceBits;                                      // 0x0049(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugProbeRadius;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProbeUpdateRayBudget;                              // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDDGIProbesVisulizationMode                   ProbesVisualization;                               // 0x0054(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProbesDepthScale;                                  // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SerializeProbes;                                   // 0x005C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RTXGIPluginSettings">();
	}
	static class URTXGIPluginSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<URTXGIPluginSettings>();
	}
};
static_assert(alignof(URTXGIPluginSettings) == 0x000008, "Wrong alignment on URTXGIPluginSettings");
static_assert(sizeof(URTXGIPluginSettings) == 0x000060, "Wrong size on URTXGIPluginSettings");
static_assert(offsetof(URTXGIPluginSettings, IrradianceBits) == 0x000048, "Member 'URTXGIPluginSettings::IrradianceBits' has a wrong offset!");
static_assert(offsetof(URTXGIPluginSettings, DistanceBits) == 0x000049, "Member 'URTXGIPluginSettings::DistanceBits' has a wrong offset!");
static_assert(offsetof(URTXGIPluginSettings, DebugProbeRadius) == 0x00004C, "Member 'URTXGIPluginSettings::DebugProbeRadius' has a wrong offset!");
static_assert(offsetof(URTXGIPluginSettings, ProbeUpdateRayBudget) == 0x000050, "Member 'URTXGIPluginSettings::ProbeUpdateRayBudget' has a wrong offset!");
static_assert(offsetof(URTXGIPluginSettings, ProbesVisualization) == 0x000054, "Member 'URTXGIPluginSettings::ProbesVisualization' has a wrong offset!");
static_assert(offsetof(URTXGIPluginSettings, ProbesDepthScale) == 0x000058, "Member 'URTXGIPluginSettings::ProbesDepthScale' has a wrong offset!");
static_assert(offsetof(URTXGIPluginSettings, SerializeProbes) == 0x00005C, "Member 'URTXGIPluginSettings::SerializeProbes' has a wrong offset!");

}

