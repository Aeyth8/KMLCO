#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Player

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SZeroGScreenEffect_structs.hpp"
#include "CAAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EOutlineColours_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Player.BP_Player_C
// 0x02B0 (0x1D10 - 0x1A60)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Player_C : public ACACharacter_MainPlayer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1A60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      SubCapsuleComponent;                               // 0x1A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ForceFeedback_C*                   BPC_ForceFeedback;                                 // 0x1A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ArcLensInspectable_Player_C*        BP_ArcLensInspectable_Player;                      // 0x1A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      WeaponTraceOverlapComponent;                       // 0x1A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCombatFXComponent_C*          BP_PlayerCombatFXComponent;                        // 0x1A88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerStateMachine_C*               PlayerStateMachine;                                // 0x1A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCACollisionComponent*                  HighValueMarker_Collision;                         // 0x1A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TeamReveal_C*                       BP_TeamReveal;                                     // 0x1AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FoamCharacterComponent_C*           FoamCharacterComponent;                            // 0x1AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  FlashBangPP;                                       // 0x1AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCAGameplayStateComponent*              GravityWarning;                                    // 0x1AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ZeroGComponent_C*                   BP_ZeroGComponent;                                 // 0x1AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCACollisionComponent*                  ReviveCollision;                                   // 0x1AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x1AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MouseSpeedHorizontalCache;                         // 0x1AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseSpeedVerticalCache;                           // 0x1ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GamepadSpeedVerticalCache;                         // 0x1AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GamepadSpeedHorizontalCache;                       // 0x1AE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IronsightSensitivityModifier;                      // 0x1AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disable_Standard_Movement_In_Zero_G;               // 0x1AEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableUpMovementInZeroG;                          // 0x1AED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AEE[0x2];                                     // 0x1AEE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSZeroGScreenEffect                    ZeroGVFXState;                                     // 0x1AF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         ZeroGWeaponStoredKnockback;                        // 0x1B00(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B04[0x4];                                     // 0x1B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCAHUD_Debug_TextLine*                  AreaStateText;                                     // 0x1B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_area_state;                                   // 0x1B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B11[0x7];                                     // 0x1B11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               VFX_postProcess_MID;                               // 0x1B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VFX_foamValue_PostProcessTarget_head;              // 0x1B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VFX_foamValue_PostProcessCurrent_head;             // 0x1B24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VFX_foamValue_PostProcessCurrent_legs;             // 0x1B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VFX_foamValue_PostProcessCurrent_body;             // 0x1B2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VFX_foamValue_PostProcessTarget_legs;              // 0x1B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VFX_foamValue_PostProcessTarget_body;              // 0x1B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZeroG_DirectionSpeed;                              // 0x1B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tagged;                                            // 0x1B3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B3D[0x3];                                     // 0x1B3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PostProcessMaterial;                               // 0x1B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Character;                                         // 0x1B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spotted;                                           // 0x1B50(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBeingExecuted;                                   // 0x1B51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B52[0x6];                                     // 0x1B52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ArmourBreak_C*                      ArmourBreakAttachedEffect;                         // 0x1B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnTeleport;                                        // 0x1B60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, BlueprintAssignable, BlueprintCallable)
	TSet<class ACAEquipmentBase*>                 HitInstigators;                                    // 0x1B70(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         FP_FoamPercentageLastFrame;                        // 0x1BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MatchStartFreezeTime;                              // 0x1BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPUI_HUD_DebugMatchStartCountdown_C*   MatchStartWidget;                                  // 0x1BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UDataTable*                             MatchCountdownDT;                                  // 0x1BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCAInventoryItem*                       InventoryItemLootDrop;                             // 0x1BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Execution_GameplayTag;                             // 0x1BE0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         WeaponTraceHalfSize;                               // 0x1C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponTraceRadius;                                 // 0x1C04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GEHandle_VIP;                                      // 0x1C08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCAAudioPlaybackInstance               ConstantHitAudioInstance;                          // 0x1C10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLocal;                                           // 0x1C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C21[0x3];                                     // 0x1C21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            ZeroGEffectHandle;                                 // 0x1C24(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerKilled;                                      // 0x1C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACACharacter_MainPlayer*                MainPlayerKilled;                                  // 0x1C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnKillSpecialist;                                  // 0x1C38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnKillManySpecialists;                             // 0x1C44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillerTeamID;                                      // 0x1C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DeadPlayerTeamID;                                  // 0x1C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 KillerTeamIDList;                                  // 0x1C58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   RivalCrewTeamWiped;                                // 0x1C68(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnAnyCrewTeamWiped;                                // 0x1C74(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnTeamWipedRivalCrew;                              // 0x1C80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnPlayerWipedRivalCrew;                            // 0x1C8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACAPlayerState*                         As_CAPlayer_State;                                 // 0x1C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnKillNPCTargetWithPerk;                           // 0x1CA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CAC[0x4];                                     // 0x1CAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   DialogueArrayPerkGameplayTags;                     // 0x1CB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   OnKillSpecialistWithPerk;                          // 0x1CC0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerPerkDialogue;                               // 0x1CCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CCD[0x3];                                     // 0x1CCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TeamWipedIDList;                                   // 0x1CD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Teams_Wiped;                                       // 0x1CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CE4[0x4];                                     // 0x1CE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchStartFact;                                    // 0x1CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ACACharacter_MainPlayer*>        PlayersOnTeam;                                     // 0x1CF8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void OnTeleport__DelegateSignature(float TeleportDuration, bool In);
	void ExecuteUbergraph_BP_Player(int32 EntryPoint);
	void RivalTeamWipedByPlayer();
	void RivalTeamWipedByNonPlayer();
	void CheckTeamWiped();
	void OnCheckTick();
	void OnShowAreaStateCheckbox(bool Value);
	void OnSecurityAreaStatechanged(ECASecurityAreaState New_area_state);
	void OnKillEnemy(const class ACACharacter* Character_0);
	void OnDeathTPVOAbort();
	void DialogueCooldown();
	void BndEvt__BP_Player_m_ability_system_component_K2Node_ComponentBoundEvent_7_OnHitReceived__DelegateSignature(const struct FCADamageEffectInfo& Damage_effect_info);
	void GravityStateChanged(bool New_state);
	void OnPlayerControllerReplicated();
	void BndEvt__BP_Player_m_ability_system_component_K2Node_ComponentBoundEvent_10_OnZeroHealth__DelegateSignature(const struct FGameplayEffectSpec& Killing_effect_spec, float Delta_value);
	void Requesst_Heal();
	void OnEndExecutionAsExecutioner();
	void OnBeginExecutionAsExecutioner();
	void BndEvt__BP_Player_CharacterMovement_K2Node_ComponentBoundEvent_9_PlayerMovementModeChangedSignature__DelegateSignature(class ACharacter* Character_0, ECAPlayerMovementMode PrevMovementMode, ECAPlayerMovementMode MovementMode);
	void BndEvt__BP_Player_CharacterMovement_K2Node_ComponentBoundEvent_5_PlayerMovementMetaModeChangedSignature__DelegateSignature(class ACharacter* Character_0, ECAPlayerMovementMetaMode PrevMovementMetaMode, ECAPlayerMovementMetaMode MovementMetaMode);
	void OnPlayerHealthStateChanged(EHealthState Health_state);
	void GravhookStateChangeEvent(ECAGravHookStateChange State_change);
	void EndConstantHitAudio(const class ACAEquipmentBase* Hit_instigator);
	void StartConstantHitAudio(const struct FNetworkedHit& Networked_hit);
	void BndEvt__PlayerStateMachine_K2Node_ComponentBoundEvent_2_EventDowned__DelegateSignature();
	void BndEvt__PlayerStateMachine_K2Node_ComponentBoundEvent_1_EventRevive__DelegateSignature();
	void GravHookRangeFailedEvent();
	void BndEvt__GravityWarning_K2Node_ComponentBoundEvent_15_GameplayTagChanged__DelegateSignature(const struct FGameplayTag& Tag);
	void BndEvt__GravityWarning_K2Node_ComponentBoundEvent_14_GameplayTagChanged__DelegateSignature(const struct FGameplayTag& Tag);
	void OnTeleportOutBegin(float Teleport_duration);
	void OnTeleportInBegin(float Teleport_duration);
	void OnArmourBreak();
	void BndEvt__m_hit_reaction_component_K2Node_ComponentBoundEvent_13_HitRecievedSignature__DelegateSignature(const struct FNetworkedHit& Hit);
	void FoamChanged(float Percentage);
	void OnPlayerStateInitialised();
	void Player_ADS(ECAPlayerAbilityMode Ability, bool Starting);
	void OnDeath(class ACACharacter* Character_0, const struct FGameplayEffectSpec& Death_gameplay_effect_spec, float Damage_magnitude, const struct FNetworkedHit& Networked_hit, const class AActor* Killer);
	void ProcessWeaponMovementPushback(float WeaponTimeBetweenShots);
	void OnPickupItem(const class UClass*& Item);
	void EndEmoteDontShoot();
	void StartEmoteDontShoot();
	void DebugResetHealth();
	void CLTUpdateSecurityAreaHUD(int32 Int, const TArray<class AActor*>& SecurityPlayer);
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	void ReceiveTick(float DeltaSeconds);
	void InpActEvt_DebugResetHealth_K2Node_InputActionEvent_0(const struct FKey& Key);
	void UserConstructionScript();
	void RefreshCharacterWeapon();
	void IsPlayerInZeroG(bool* IsInZeroG_0);
	void SetupInteractorComponent();
	void IsPlayerMoving(bool* IsMoving_0);
	void UpdateTeamOutline();
	void SetRenderOutline(bool Enable, int32 OverrideIndex, EOutlineColours Colour);
	void ProcessHealthHUD();
	void GetHUD(class ABPUI_HUD_InGame_C** AsBPUI_HUD_in_Game);
	void ProcessProximityPlayerSensor(int32 Quantity, TArray<class AActor*>& Array);
	bool CheckActorAlligence(class AActor* Actor);
	void ShowSecurityAreaState(ECASecurityAreaState Area_state);
	void IsPlayerInZeroGFlying(bool* IsInZeroGFlying);
	void IsPlayerGrabbingObjective(bool* Is_grabbing);
	void ProcessOnArmourBreak();
	void Update_Zero_G_Status();
	void ProcessLowHealthAudioEvent();
	void GravityHookPlaceholderVisualHelper();
	void UpdateCampStatus();
	void Gravhook_State_Change(ECAGravHookStateChange GravhookState);
	void ShouldCountdownActivate(bool* ShouldCountdownPlay);
	void SpawnFPFoamVFX();
	void UpdateFPFoamVFX(float TargetFoamValue);

	void CollectDebugInfo(const struct FCADebugTextCollector& InCollector, struct FCADebugTextCollector* OutCollector) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Player_C">();
	}
	static class ABP_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Player_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Player_C) == 0x000010, "Wrong alignment on ABP_Player_C");
static_assert(sizeof(ABP_Player_C) == 0x001D10, "Wrong size on ABP_Player_C");
static_assert(offsetof(ABP_Player_C, UberGraphFrame) == 0x001A60, "Member 'ABP_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, SubCapsuleComponent) == 0x001A68, "Member 'ABP_Player_C::SubCapsuleComponent' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, BPC_ForceFeedback) == 0x001A70, "Member 'ABP_Player_C::BPC_ForceFeedback' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, BP_ArcLensInspectable_Player) == 0x001A78, "Member 'ABP_Player_C::BP_ArcLensInspectable_Player' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, WeaponTraceOverlapComponent) == 0x001A80, "Member 'ABP_Player_C::WeaponTraceOverlapComponent' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, BP_PlayerCombatFXComponent) == 0x001A88, "Member 'ABP_Player_C::BP_PlayerCombatFXComponent' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, PlayerStateMachine) == 0x001A90, "Member 'ABP_Player_C::PlayerStateMachine' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, HighValueMarker_Collision) == 0x001A98, "Member 'ABP_Player_C::HighValueMarker_Collision' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, BP_TeamReveal) == 0x001AA0, "Member 'ABP_Player_C::BP_TeamReveal' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, FoamCharacterComponent) == 0x001AA8, "Member 'ABP_Player_C::FoamCharacterComponent' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, FlashBangPP) == 0x001AB0, "Member 'ABP_Player_C::FlashBangPP' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, GravityWarning) == 0x001AB8, "Member 'ABP_Player_C::GravityWarning' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, BP_ZeroGComponent) == 0x001AC0, "Member 'ABP_Player_C::BP_ZeroGComponent' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ReviveCollision) == 0x001AC8, "Member 'ABP_Player_C::ReviveCollision' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, PhysicalAnimation) == 0x001AD0, "Member 'ABP_Player_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MouseSpeedHorizontalCache) == 0x001AD8, "Member 'ABP_Player_C::MouseSpeedHorizontalCache' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MouseSpeedVerticalCache) == 0x001ADC, "Member 'ABP_Player_C::MouseSpeedVerticalCache' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, GamepadSpeedVerticalCache) == 0x001AE0, "Member 'ABP_Player_C::GamepadSpeedVerticalCache' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, GamepadSpeedHorizontalCache) == 0x001AE4, "Member 'ABP_Player_C::GamepadSpeedHorizontalCache' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, IronsightSensitivityModifier) == 0x001AE8, "Member 'ABP_Player_C::IronsightSensitivityModifier' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Disable_Standard_Movement_In_Zero_G) == 0x001AEC, "Member 'ABP_Player_C::Disable_Standard_Movement_In_Zero_G' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DisableUpMovementInZeroG) == 0x001AED, "Member 'ABP_Player_C::DisableUpMovementInZeroG' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ZeroGVFXState) == 0x001AF0, "Member 'ABP_Player_C::ZeroGVFXState' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ZeroGWeaponStoredKnockback) == 0x001B00, "Member 'ABP_Player_C::ZeroGWeaponStoredKnockback' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, AreaStateText) == 0x001B08, "Member 'ABP_Player_C::AreaStateText' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Show_area_state) == 0x001B10, "Member 'ABP_Player_C::Show_area_state' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, VFX_postProcess_MID) == 0x001B18, "Member 'ABP_Player_C::VFX_postProcess_MID' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, VFX_foamValue_PostProcessTarget_head) == 0x001B20, "Member 'ABP_Player_C::VFX_foamValue_PostProcessTarget_head' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, VFX_foamValue_PostProcessCurrent_head) == 0x001B24, "Member 'ABP_Player_C::VFX_foamValue_PostProcessCurrent_head' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, VFX_foamValue_PostProcessCurrent_legs) == 0x001B28, "Member 'ABP_Player_C::VFX_foamValue_PostProcessCurrent_legs' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, VFX_foamValue_PostProcessCurrent_body) == 0x001B2C, "Member 'ABP_Player_C::VFX_foamValue_PostProcessCurrent_body' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, VFX_foamValue_PostProcessTarget_legs) == 0x001B30, "Member 'ABP_Player_C::VFX_foamValue_PostProcessTarget_legs' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, VFX_foamValue_PostProcessTarget_body) == 0x001B34, "Member 'ABP_Player_C::VFX_foamValue_PostProcessTarget_body' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ZeroG_DirectionSpeed) == 0x001B38, "Member 'ABP_Player_C::ZeroG_DirectionSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Tagged) == 0x001B3C, "Member 'ABP_Player_C::Tagged' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, PostProcessMaterial) == 0x001B40, "Member 'ABP_Player_C::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Character) == 0x001B48, "Member 'ABP_Player_C::Character' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Spotted) == 0x001B50, "Member 'ABP_Player_C::Spotted' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, IsBeingExecuted) == 0x001B51, "Member 'ABP_Player_C::IsBeingExecuted' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ArmourBreakAttachedEffect) == 0x001B58, "Member 'ABP_Player_C::ArmourBreakAttachedEffect' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, OnTeleport) == 0x001B60, "Member 'ABP_Player_C::OnTeleport' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, HitInstigators) == 0x001B70, "Member 'ABP_Player_C::HitInstigators' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, FP_FoamPercentageLastFrame) == 0x001BC0, "Member 'ABP_Player_C::FP_FoamPercentageLastFrame' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MatchStartFreezeTime) == 0x001BC4, "Member 'ABP_Player_C::MatchStartFreezeTime' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MatchStartWidget) == 0x001BC8, "Member 'ABP_Player_C::MatchStartWidget' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MatchCountdownDT) == 0x001BD0, "Member 'ABP_Player_C::MatchCountdownDT' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, InventoryItemLootDrop) == 0x001BD8, "Member 'ABP_Player_C::InventoryItemLootDrop' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Execution_GameplayTag) == 0x001BE0, "Member 'ABP_Player_C::Execution_GameplayTag' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, WeaponTraceHalfSize) == 0x001C00, "Member 'ABP_Player_C::WeaponTraceHalfSize' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, WeaponTraceRadius) == 0x001C04, "Member 'ABP_Player_C::WeaponTraceRadius' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, GEHandle_VIP) == 0x001C08, "Member 'ABP_Player_C::GEHandle_VIP' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ConstantHitAudioInstance) == 0x001C10, "Member 'ABP_Player_C::ConstantHitAudioInstance' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, IsLocal) == 0x001C20, "Member 'ABP_Player_C::IsLocal' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ZeroGEffectHandle) == 0x001C24, "Member 'ABP_Player_C::ZeroGEffectHandle' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, PlayerKilled) == 0x001C2C, "Member 'ABP_Player_C::PlayerKilled' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MainPlayerKilled) == 0x001C30, "Member 'ABP_Player_C::MainPlayerKilled' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, OnKillSpecialist) == 0x001C38, "Member 'ABP_Player_C::OnKillSpecialist' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, OnKillManySpecialists) == 0x001C44, "Member 'ABP_Player_C::OnKillManySpecialists' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, KillerTeamID) == 0x001C50, "Member 'ABP_Player_C::KillerTeamID' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DeadPlayerTeamID) == 0x001C54, "Member 'ABP_Player_C::DeadPlayerTeamID' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, KillerTeamIDList) == 0x001C58, "Member 'ABP_Player_C::KillerTeamIDList' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, RivalCrewTeamWiped) == 0x001C68, "Member 'ABP_Player_C::RivalCrewTeamWiped' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, OnAnyCrewTeamWiped) == 0x001C74, "Member 'ABP_Player_C::OnAnyCrewTeamWiped' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, OnTeamWipedRivalCrew) == 0x001C80, "Member 'ABP_Player_C::OnTeamWipedRivalCrew' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, OnPlayerWipedRivalCrew) == 0x001C8C, "Member 'ABP_Player_C::OnPlayerWipedRivalCrew' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, As_CAPlayer_State) == 0x001C98, "Member 'ABP_Player_C::As_CAPlayer_State' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, OnKillNPCTargetWithPerk) == 0x001CA0, "Member 'ABP_Player_C::OnKillNPCTargetWithPerk' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DialogueArrayPerkGameplayTags) == 0x001CB0, "Member 'ABP_Player_C::DialogueArrayPerkGameplayTags' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, OnKillSpecialistWithPerk) == 0x001CC0, "Member 'ABP_Player_C::OnKillSpecialistWithPerk' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, TriggerPerkDialogue) == 0x001CCC, "Member 'ABP_Player_C::TriggerPerkDialogue' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, TeamWipedIDList) == 0x001CD0, "Member 'ABP_Player_C::TeamWipedIDList' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Teams_Wiped) == 0x001CE0, "Member 'ABP_Player_C::Teams_Wiped' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MatchStartFact) == 0x001CE8, "Member 'ABP_Player_C::MatchStartFact' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, PlayersOnTeam) == 0x001CF8, "Member 'ABP_Player_C::PlayersOnTeam' has a wrong offset!");

}

