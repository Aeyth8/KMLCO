#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPCEscalatorManagerStateMachineComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CARendering_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C
// 0x00C8 (0x0E48 - 0x0D80)
class UBP_NPCEscalatorManagerStateMachineComponent_C final : public UCANPCEscalatorManagerStateMachineComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D80(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           EscalatorTag;                                      // 0x0D88(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D94[0x4];                                      // 0x0D94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EventDispatcherOnNPCEscalatorAcquiresTarget;       // 0x0D98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FCATeamID                              EnemyTeamID;                                       // 0x0DA8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DAC[0x4];                                      // 0x0DAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UActorComponent>            EscalatorWidgetClass;                              // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FHighlightSightRules                   HighlightRules;                                    // 0x0DB8(0x000C)(Edit, BlueprintVisible, NoDestructor)
	class FName                                   NPCEscalatorHighlightName;                         // 0x0DC4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAOutlineColor                               Highlight_Colour;                                  // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD1[0x7];                                      // 0x0DD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACACharacter_MainPlayer*>        PlayersInsideEscalatorManagerArea;                 // 0x0DD8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	class FName                                   DisabledStateName;                                 // 0x0DE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DF4[0x4];                                      // 0x0DF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EscalatorDisablingTags;                            // 0x0DF8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseStatusTagsForHighlighting;                      // 0x0E18(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E19[0x7];                                      // 0x0E19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  StatusTagsToEnableOn;                              // 0x0E20(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                          HighlightingIsAllowedFromStatusTags;               // 0x0E40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void EventDispatcherOnNPCEscalatorAcquiresTarget__DelegateSignature();
	void ExecuteUbergraph_BP_NPCEscalatorManagerStateMachineComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void EventOnEscalatorDeath(class ACACharacter* Character, const struct FGameplayEffectSpec& Death_gameplay_effect_spec, float Damage_magnitude, const struct FNetworkedHit& Networked_hit, class AActor* Killer);
	void OnEscalatorAreaActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnEscalatorAreaActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	bool IsOnEnemyNPCTeam(const class AActor*& SourceActor);
	void UpdateEscalatorHighlightsForViewer(class ACACharacter_MainPlayer* PlayerCharacter, bool AreHighlightsVisible);
	class UCAComponent_NPCTargetManager* Get_Enemy_Target_Manager_Component(class AActor* SourceNPC);
	void RemoveEscalationTagsAndUnregisterEscalators();
	void UnregisterEscalatorHighlights(class AActor* Highlightactor);
	void DrawDebugInfo(const struct FLinearColor& LineColor, float Duration, float Thickness);
	void UnregisterAllEscalatorHighlights();
	void RegisterEscalationActor(const class AActor*& EscalationActor);
	void UnregisterEscalationActor(const class AActor*& EscalationActor);
	void OnDeescalatedStart();
	void UpdateHighlightsForEscalator(bool AreHighlightsVisible, class AActor* Actor_to_highlight);
	void ResetEscalatorManager();
	void OnIdleStart();
	void CheckForEscalatorsLosingEscalatorCondition();
	void OnResetStateMachine();
	void Register_For_NPCSenses_Player_Callback(class AActor* NPCActor);
	void OnNPCAdquiresNewTarget(class AActor* Target);
	void AllowHighlightingFromStatusTag(bool bEnabled);
	void SecurityStateChanged(class UCAFiniteState* State);

	void CollectDebugInfo(const struct FCADebugTextCollector& InCollector, struct FCADebugTextCollector* OutCollector) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPCEscalatorManagerStateMachineComponent_C">();
	}
	static class UBP_NPCEscalatorManagerStateMachineComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_NPCEscalatorManagerStateMachineComponent_C>();
	}
};
static_assert(alignof(UBP_NPCEscalatorManagerStateMachineComponent_C) == 0x000008, "Wrong alignment on UBP_NPCEscalatorManagerStateMachineComponent_C");
static_assert(sizeof(UBP_NPCEscalatorManagerStateMachineComponent_C) == 0x000E48, "Wrong size on UBP_NPCEscalatorManagerStateMachineComponent_C");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, UberGraphFrame) == 0x000D80, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, EscalatorTag) == 0x000D88, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::EscalatorTag' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, EventDispatcherOnNPCEscalatorAcquiresTarget) == 0x000D98, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::EventDispatcherOnNPCEscalatorAcquiresTarget' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, EnemyTeamID) == 0x000DA8, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::EnemyTeamID' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, EscalatorWidgetClass) == 0x000DB0, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::EscalatorWidgetClass' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, HighlightRules) == 0x000DB8, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::HighlightRules' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, NPCEscalatorHighlightName) == 0x000DC4, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::NPCEscalatorHighlightName' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, Highlight_Colour) == 0x000DD0, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::Highlight_Colour' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, PlayersInsideEscalatorManagerArea) == 0x000DD8, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::PlayersInsideEscalatorManagerArea' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, DisabledStateName) == 0x000DE8, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::DisabledStateName' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, EscalatorDisablingTags) == 0x000DF8, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::EscalatorDisablingTags' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, UseStatusTagsForHighlighting) == 0x000E18, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::UseStatusTagsForHighlighting' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, StatusTagsToEnableOn) == 0x000E20, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::StatusTagsToEnableOn' has a wrong offset!");
static_assert(offsetof(UBP_NPCEscalatorManagerStateMachineComponent_C, HighlightingIsAllowedFromStatusTags) == 0x000E40, "Member 'UBP_NPCEscalatorManagerStateMachineComponent_C::HighlightingIsAllowedFromStatusTags' has a wrong offset!");

}

