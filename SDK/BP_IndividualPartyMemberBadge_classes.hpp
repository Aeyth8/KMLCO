#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IndividualPartyMemberBadge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_IndividualPartyMemberBadge.BP_IndividualPartyMemberBadge_C
// 0x0068 (0x02F8 - 0x0290)
class UBP_IndividualPartyMemberBadge_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Is_ready_icon;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LeaderImage;                                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Muted_icon;                                        // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OulineBorder;                                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Player_avatar;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Voip;                                              // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             Placeholder_avatar_image;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Locked_image;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Empty_image;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 User_Guid;                                         // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Is_Matchmaking;                                    // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_muted;                                          // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_IndividualPartyMemberBadge(int32 EntryPoint);
	void OnPrivacyManagerMuteUpdated();
	void Destruct();
	void UpdateVOIPStatus(const TArray<class FString>& Talkers_ids);
	void SetEmptyIcon();
	void MatchmakingStateChanged(bool Is_matchmaking);
	void SetPartyMemberInfo(const struct FCAPartyMemberUIData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IndividualPartyMemberBadge_C">();
	}
	static class UBP_IndividualPartyMemberBadge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_IndividualPartyMemberBadge_C>();
	}
};
static_assert(alignof(UBP_IndividualPartyMemberBadge_C) == 0x000008, "Wrong alignment on UBP_IndividualPartyMemberBadge_C");
static_assert(sizeof(UBP_IndividualPartyMemberBadge_C) == 0x0002F8, "Wrong size on UBP_IndividualPartyMemberBadge_C");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, UberGraphFrame) == 0x000290, "Member 'UBP_IndividualPartyMemberBadge_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Is_ready_icon) == 0x000298, "Member 'UBP_IndividualPartyMemberBadge_C::Is_ready_icon' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, LeaderImage) == 0x0002A0, "Member 'UBP_IndividualPartyMemberBadge_C::LeaderImage' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Muted_icon) == 0x0002A8, "Member 'UBP_IndividualPartyMemberBadge_C::Muted_icon' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, OulineBorder) == 0x0002B0, "Member 'UBP_IndividualPartyMemberBadge_C::OulineBorder' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Player_avatar) == 0x0002B8, "Member 'UBP_IndividualPartyMemberBadge_C::Player_avatar' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Voip) == 0x0002C0, "Member 'UBP_IndividualPartyMemberBadge_C::Voip' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Placeholder_avatar_image) == 0x0002C8, "Member 'UBP_IndividualPartyMemberBadge_C::Placeholder_avatar_image' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Locked_image) == 0x0002D0, "Member 'UBP_IndividualPartyMemberBadge_C::Locked_image' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Empty_image) == 0x0002D8, "Member 'UBP_IndividualPartyMemberBadge_C::Empty_image' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, User_Guid) == 0x0002E0, "Member 'UBP_IndividualPartyMemberBadge_C::User_Guid' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Is_Matchmaking) == 0x0002F0, "Member 'UBP_IndividualPartyMemberBadge_C::Is_Matchmaking' has a wrong offset!");
static_assert(offsetof(UBP_IndividualPartyMemberBadge_C, Is_muted) == 0x0002F1, "Member 'UBP_IndividualPartyMemberBadge_C::Is_muted' has a wrong offset!");

}

