#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CAAudioBink

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CAAudioBink_structs.hpp"
#include "CAAudio_structs.hpp"
#include "MediaAssets_classes.hpp"


namespace SDK
{

// Class CAAudioBink.BinkMediaSource
// 0x0050 (0x00D8 - 0x0088)
class UBinkMediaSource final : public UMediaSource
{
public:
	struct FFilePath                              Url;                                               // 0x0088(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCAAudioEventType                      PlayEvent;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioEventType                      StopEvent;                                         // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FCAAudioBinkTimelineEntry>      Timeline;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFilePath                              SubtitleUrl;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ECAAudioBinkChannelConfig                     ChannelConfig;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECAAudioBinkLocalisedConfig                   LocalisedConfig;                                   // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrenchLocalisedAudio;                              // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItalianLocalisedAudio;                             // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GermanLocalisedAudio;                              // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpanishLocalisedAudio;                             // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BrazilianPortugueseLocalisedAudio;                 // 0x00C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCAAudioBinkSubtitleTimelineEntry> SubtitleTimeline;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BinkMediaSource">();
	}
	static class UBinkMediaSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBinkMediaSource>();
	}
};
static_assert(alignof(UBinkMediaSource) == 0x000008, "Wrong alignment on UBinkMediaSource");
static_assert(sizeof(UBinkMediaSource) == 0x0000D8, "Wrong size on UBinkMediaSource");
static_assert(offsetof(UBinkMediaSource, Url) == 0x000088, "Member 'UBinkMediaSource::Url' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, PlayEvent) == 0x000098, "Member 'UBinkMediaSource::PlayEvent' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, StopEvent) == 0x00009C, "Member 'UBinkMediaSource::StopEvent' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, Timeline) == 0x0000A0, "Member 'UBinkMediaSource::Timeline' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, SubtitleUrl) == 0x0000B0, "Member 'UBinkMediaSource::SubtitleUrl' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, ChannelConfig) == 0x0000C0, "Member 'UBinkMediaSource::ChannelConfig' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, LocalisedConfig) == 0x0000C1, "Member 'UBinkMediaSource::LocalisedConfig' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, FrenchLocalisedAudio) == 0x0000C2, "Member 'UBinkMediaSource::FrenchLocalisedAudio' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, ItalianLocalisedAudio) == 0x0000C3, "Member 'UBinkMediaSource::ItalianLocalisedAudio' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, GermanLocalisedAudio) == 0x0000C4, "Member 'UBinkMediaSource::GermanLocalisedAudio' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, SpanishLocalisedAudio) == 0x0000C5, "Member 'UBinkMediaSource::SpanishLocalisedAudio' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, BrazilianPortugueseLocalisedAudio) == 0x0000C6, "Member 'UBinkMediaSource::BrazilianPortugueseLocalisedAudio' has a wrong offset!");
static_assert(offsetof(UBinkMediaSource, SubtitleTimeline) == 0x0000C8, "Member 'UBinkMediaSource::SubtitleTimeline' has a wrong offset!");

}

