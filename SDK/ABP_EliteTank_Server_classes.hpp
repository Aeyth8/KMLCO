#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_EliteTank_Server

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_EliteTank_Server.ABP_EliteTank_Server_C
// 0x1730 (0x1B40 - 0x0410)
class UABP_EliteTank_Server_C final : public UCAAnimInstance_NPC
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0418(0x00D0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x04E8(0x00E8)()
	struct FAnimNode_RefPose                      AnimGraphNode_IdentityPose;                        // 0x05D0(0x0018)()
	struct FAnimNode_RotateRootBone               AnimGraphNode_RotateRootBone;                      // 0x05E8(0x00E0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x06C8(0x00A0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x0768(0x00E8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0850(0x00E8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x0938(0x0158)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x0A90(0x0018)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_6;                 // 0x0AA8(0x0050)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0AF8(0x00E8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x0BE0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x0C08(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x0C30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0C58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0C80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x0CA8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0CD0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x0CF8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0D20(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0D48(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0D70(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0D98(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0DC0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0DE8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0E10(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0E38(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0E60(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0E88(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0F08(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0FA8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x1028(0x0038)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_5;                 // 0x1060(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_4;                 // 0x10B0(0x0050)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1100(0x00A0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x11A0(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x11D8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x1258(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1290(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x1310(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1348(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x13C8(0x0038)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_3;                 // 0x1400(0x0050)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x1450(0x0038)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_2;                 // 0x1488(0x0050)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x14D8(0x0038)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x1510(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x1540(0x0038)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x1578(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x15A8(0x0038)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x15E0(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1610(0x0038)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1648(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1678(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x16B0(0x00B0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x1760(0x0158)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x18B8(0x0158)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x1A10(0x0050)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1A60(0x0038)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x1A98(0x0050)()
	bool                                          IsAware;                                           // 0x1AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInCombat;                                        // 0x1AE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDead;                                            // 0x1AEA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMoving;                                          // 0x1AEB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AEC[0x4];                                     // 0x1AEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACACharacter_NPC*                       CACharacter_NPC;                                   // 0x1AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInZeroG;                                         // 0x1AF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUsingMagboots;                                   // 0x1AF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AFA[0x2];                                     // 0x1AFA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleHeading;                                    // 0x1AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLaunching;                                       // 0x1B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFloating;                                        // 0x1B01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStunned;                                         // 0x1B02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B03[0x1];                                     // 0x1B03(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentHeading;                                    // 0x1B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadingDelta;                                      // 0x1B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasProjectileOverlap;                              // 0x1B0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B0D[0x3];                                     // 0x1B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACAProjectileBase*>              OverlappingProjectiles;                            // 0x1B10(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         FloatStartTime;                                    // 0x1B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatStartHeading;                                 // 0x1B24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatYawVelocity;                                  // 0x1B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AIHeading;                                         // 0x1B2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsFacingAim;                                    // 0x1B30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasTarget;                                         // 0x1B31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_EliteTank_Server_AnimGraphNode_TransitionResult_CF3F8ED746DCF1AFCD93A5B579FC72B1();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_EliteTank_Server_AnimGraphNode_TransitionResult_BF401AC043E3F6622570BF9D83893DFE();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_EliteTank_Server_AnimGraphNode_TransitionResult_1FAB655147BBED116C99D290207D1651();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_EliteTank_Server_AnimGraphNode_TransitionResult_3A0D19154EE3101AAA0C42ABA6A10DE1();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintInitializeAnimation();
	void OnDeath(class ACACharacter* Character, const struct FGameplayEffectSpec& Death_gameplay_effect_spec, float Damage_magnitude, const struct FNetworkedHit& Networked_hit, const class AActor* Killer);
	void BlueprintBeginPlay();
	void OnPoolStateChanged(bool Is_in_pool);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_EliteTank_Server_AnimGraphNode_TransitionResult_44892742419A8806ABB3B19CC03BCF5F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_EliteTank_Server_AnimGraphNode_TransitionResult_6BB8B2EA4BB700446FB159911AE7500D();
	void BlueprintPostEvaluateAnimation();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_EliteTank_Server_AnimGraphNode_TransitionResult_C483F79348AE2B743A72ED948455A5DF();
	void ExecuteUbergraph_ABP_EliteTank_Server(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_EliteTank_Server_C">();
	}
	static class UABP_EliteTank_Server_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_EliteTank_Server_C>();
	}
};
static_assert(alignof(UABP_EliteTank_Server_C) == 0x000010, "Wrong alignment on UABP_EliteTank_Server_C");
static_assert(sizeof(UABP_EliteTank_Server_C) == 0x001B40, "Wrong size on UABP_EliteTank_Server_C");
static_assert(offsetof(UABP_EliteTank_Server_C, UberGraphFrame) == 0x000410, "Member 'UABP_EliteTank_Server_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_ApplyAdditive) == 0x000418, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_Slot_3) == 0x0004E8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_IdentityPose) == 0x0005D0, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_IdentityPose' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_RotateRootBone) == 0x0005E8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_RotateRootBone' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_BlendListByBool_2) == 0x0006C8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_Slot_2) == 0x000768, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_Slot_1) == 0x000850, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SaveCachedPose_2) == 0x000938, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_LocalRefPose) == 0x000A90, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequenceEvaluator_6) == 0x000AA8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequenceEvaluator_6' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_Slot) == 0x000AF8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_16) == 0x000BE0, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_15) == 0x000C08, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_14) == 0x000C30, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_13) == 0x000C58, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_12) == 0x000C80, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_11) == 0x000CA8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_10) == 0x000CD0, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_9) == 0x000CF8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_8) == 0x000D20, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_7) == 0x000D48, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_6) == 0x000D70, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_5) == 0x000D98, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_4) == 0x000DC0, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_3) == 0x000DE8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_2) == 0x000E10, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult_1) == 0x000E38, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_TransitionResult) == 0x000E60, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequencePlayer_4) == 0x000E88, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_BlendListByBool_1) == 0x000F08, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequencePlayer_3) == 0x000FA8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_10) == 0x001028, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequenceEvaluator_5) == 0x001060, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequenceEvaluator_5' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequenceEvaluator_4) == 0x0010B0, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequenceEvaluator_4' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_BlendListByBool) == 0x001100, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_9) == 0x0011A0, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequencePlayer_2) == 0x0011D8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_8) == 0x001258, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequencePlayer_1) == 0x001290, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_7) == 0x001310, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequencePlayer) == 0x001348, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_6) == 0x0013C8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequenceEvaluator_3) == 0x001400, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequenceEvaluator_3' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_5) == 0x001450, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequenceEvaluator_2) == 0x001488, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequenceEvaluator_2' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_4) == 0x0014D8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_UseCachedPose_3) == 0x001510, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_3) == 0x001540, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_UseCachedPose_2) == 0x001578, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_2) == 0x0015A8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_UseCachedPose_1) == 0x0015E0, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult_1) == 0x001610, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_UseCachedPose) == 0x001648, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateResult) == 0x001678, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_StateMachine) == 0x0016B0, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SaveCachedPose_1) == 0x001760, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SaveCachedPose) == 0x0018B8, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequenceEvaluator_1) == 0x001A10, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_Root) == 0x001A60, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AnimGraphNode_SequenceEvaluator) == 0x001A98, "Member 'UABP_EliteTank_Server_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsAware) == 0x001AE8, "Member 'UABP_EliteTank_Server_C::IsAware' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsInCombat) == 0x001AE9, "Member 'UABP_EliteTank_Server_C::IsInCombat' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsDead) == 0x001AEA, "Member 'UABP_EliteTank_Server_C::IsDead' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsMoving) == 0x001AEB, "Member 'UABP_EliteTank_Server_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, CACharacter_NPC) == 0x001AF0, "Member 'UABP_EliteTank_Server_C::CACharacter_NPC' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsInZeroG) == 0x001AF8, "Member 'UABP_EliteTank_Server_C::IsInZeroG' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsUsingMagboots) == 0x001AF9, "Member 'UABP_EliteTank_Server_C::IsUsingMagboots' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, CapsuleHeading) == 0x001AFC, "Member 'UABP_EliteTank_Server_C::CapsuleHeading' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsLaunching) == 0x001B00, "Member 'UABP_EliteTank_Server_C::IsLaunching' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsFloating) == 0x001B01, "Member 'UABP_EliteTank_Server_C::IsFloating' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, IsStunned) == 0x001B02, "Member 'UABP_EliteTank_Server_C::IsStunned' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, CurrentHeading) == 0x001B04, "Member 'UABP_EliteTank_Server_C::CurrentHeading' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, HeadingDelta) == 0x001B08, "Member 'UABP_EliteTank_Server_C::HeadingDelta' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, HasProjectileOverlap) == 0x001B0C, "Member 'UABP_EliteTank_Server_C::HasProjectileOverlap' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, OverlappingProjectiles) == 0x001B10, "Member 'UABP_EliteTank_Server_C::OverlappingProjectiles' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, FloatStartTime) == 0x001B20, "Member 'UABP_EliteTank_Server_C::FloatStartTime' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, FloatStartHeading) == 0x001B24, "Member 'UABP_EliteTank_Server_C::FloatStartHeading' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, FloatYawVelocity) == 0x001B28, "Member 'UABP_EliteTank_Server_C::FloatYawVelocity' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, AIHeading) == 0x001B2C, "Member 'UABP_EliteTank_Server_C::AIHeading' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, NeedsFacingAim) == 0x001B30, "Member 'UABP_EliteTank_Server_C::NeedsFacingAim' has a wrong offset!");
static_assert(offsetof(UABP_EliteTank_Server_C, HasTarget) == 0x001B31, "Member 'UABP_EliteTank_Server_C::HasTarget' has a wrong offset!");

}

