#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_Player_Traverse

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function AB_Player_Traverse.AB_Player_Traverse_C.K2_CanActivateAbility
// 0x0090 (0x0090 - 0x0000)
struct AB_Player_Traverse_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0050(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0058(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACACharacter_MainPlayer*                K2Node_DynamicCast_AsCACharacter_Main_Player;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanActivateAbilityBluePrint_ReturnValue;  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AB_Player_Traverse_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on AB_Player_Traverse_C_K2_CanActivateAbility");
static_assert(sizeof(AB_Player_Traverse_C_K2_CanActivateAbility) == 0x000090, "Wrong size on AB_Player_Traverse_C_K2_CanActivateAbility");
static_assert(offsetof(AB_Player_Traverse_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'AB_Player_Traverse_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(AB_Player_Traverse_C_K2_CanActivateAbility, Handle) == 0x000050, "Member 'AB_Player_Traverse_C_K2_CanActivateAbility::Handle' has a wrong offset!");
static_assert(offsetof(AB_Player_Traverse_C_K2_CanActivateAbility, RelevantTags) == 0x000058, "Member 'AB_Player_Traverse_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(AB_Player_Traverse_C_K2_CanActivateAbility, ReturnValue) == 0x000078, "Member 'AB_Player_Traverse_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Player_Traverse_C_K2_CanActivateAbility, K2Node_DynamicCast_AsCACharacter_Main_Player) == 0x000080, "Member 'AB_Player_Traverse_C_K2_CanActivateAbility::K2Node_DynamicCast_AsCACharacter_Main_Player' has a wrong offset!");
static_assert(offsetof(AB_Player_Traverse_C_K2_CanActivateAbility, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'AB_Player_Traverse_C_K2_CanActivateAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AB_Player_Traverse_C_K2_CanActivateAbility, CallFunc_CanActivateAbilityBluePrint_ReturnValue) == 0x000089, "Member 'AB_Player_Traverse_C_K2_CanActivateAbility::CallFunc_CanActivateAbilityBluePrint_ReturnValue' has a wrong offset!");

}

