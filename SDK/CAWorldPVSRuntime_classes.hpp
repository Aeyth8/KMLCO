#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CAWorldPVSRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CAWorldPVSRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class CAWorldPVSRuntime.CAWorldPVSDataWrapper
// 0x0008 (0x0038 - 0x0030)
class UCAWorldPVSDataWrapper final : public UAssetUserData
{
public:
	class UCAWorldPVSData*                        M_wrapped;                                         // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CAWorldPVSDataWrapper">();
	}
	static class UCAWorldPVSDataWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCAWorldPVSDataWrapper>();
	}
};
static_assert(alignof(UCAWorldPVSDataWrapper) == 0x000008, "Wrong alignment on UCAWorldPVSDataWrapper");
static_assert(sizeof(UCAWorldPVSDataWrapper) == 0x000038, "Wrong size on UCAWorldPVSDataWrapper");
static_assert(offsetof(UCAWorldPVSDataWrapper, M_wrapped) == 0x000030, "Member 'UCAWorldPVSDataWrapper::M_wrapped' has a wrong offset!");

// Class CAWorldPVSRuntime.CAWorldPVSData
// 0x0098 (0x00C8 - 0x0030)
class UCAWorldPVSData final : public UAssetUserData
{
public:
	ECAWorldPVSQuality                            M_quality;                                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        M_size_x;                                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_size_y;                                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_num_levels;                                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   M_dimensions;                                      // 0x0040(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint64>                                M_PVSData;                                         // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, uint32>                   M_level_index;                                     // 0x0070(0x0050)(NativeAccessSpecifierPublic)
	uint64                                        M_level_static_geometry_hash;                      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CAWorldPVSData">();
	}
	static class UCAWorldPVSData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCAWorldPVSData>();
	}
};
static_assert(alignof(UCAWorldPVSData) == 0x000008, "Wrong alignment on UCAWorldPVSData");
static_assert(sizeof(UCAWorldPVSData) == 0x0000C8, "Wrong size on UCAWorldPVSData");
static_assert(offsetof(UCAWorldPVSData, M_quality) == 0x000030, "Member 'UCAWorldPVSData::M_quality' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSData, M_size_x) == 0x000034, "Member 'UCAWorldPVSData::M_size_x' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSData, M_size_y) == 0x000038, "Member 'UCAWorldPVSData::M_size_y' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSData, M_num_levels) == 0x00003C, "Member 'UCAWorldPVSData::M_num_levels' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSData, M_dimensions) == 0x000040, "Member 'UCAWorldPVSData::M_dimensions' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSData, M_PVSData) == 0x000060, "Member 'UCAWorldPVSData::M_PVSData' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSData, M_level_index) == 0x000070, "Member 'UCAWorldPVSData::M_level_index' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSData, M_level_static_geometry_hash) == 0x0000C0, "Member 'UCAWorldPVSData::M_level_static_geometry_hash' has a wrong offset!");

// Class CAWorldPVSRuntime.CAWorldPVSDataCustom
// 0x0098 (0x00D0 - 0x0038)
class UCAWorldPVSDataCustom final : public UDataAsset
{
public:
	ECAWorldPVSQuality                            M_quality;                                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        M_size_x;                                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_size_y;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_num_levels;                                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   M_dimensions;                                      // 0x0048(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint64>                                M_PVSData;                                         // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, uint32>                   M_level_index;                                     // 0x0078(0x0050)(NativeAccessSpecifierPublic)
	uint64                                        M_level_static_geometry_hash;                      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CAWorldPVSDataCustom">();
	}
	static class UCAWorldPVSDataCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCAWorldPVSDataCustom>();
	}
};
static_assert(alignof(UCAWorldPVSDataCustom) == 0x000008, "Wrong alignment on UCAWorldPVSDataCustom");
static_assert(sizeof(UCAWorldPVSDataCustom) == 0x0000D0, "Wrong size on UCAWorldPVSDataCustom");
static_assert(offsetof(UCAWorldPVSDataCustom, M_quality) == 0x000038, "Member 'UCAWorldPVSDataCustom::M_quality' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSDataCustom, M_size_x) == 0x00003C, "Member 'UCAWorldPVSDataCustom::M_size_x' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSDataCustom, M_size_y) == 0x000040, "Member 'UCAWorldPVSDataCustom::M_size_y' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSDataCustom, M_num_levels) == 0x000044, "Member 'UCAWorldPVSDataCustom::M_num_levels' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSDataCustom, M_dimensions) == 0x000048, "Member 'UCAWorldPVSDataCustom::M_dimensions' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSDataCustom, M_PVSData) == 0x000068, "Member 'UCAWorldPVSDataCustom::M_PVSData' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSDataCustom, M_level_index) == 0x000078, "Member 'UCAWorldPVSDataCustom::M_level_index' has a wrong offset!");
static_assert(offsetof(UCAWorldPVSDataCustom, M_level_static_geometry_hash) == 0x0000C8, "Member 'UCAWorldPVSDataCustom::M_level_static_geometry_hash' has a wrong offset!");

}

