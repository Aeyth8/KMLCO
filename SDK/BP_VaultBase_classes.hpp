#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VaultBase

#include "Basic.hpp"

#include "CALocalisationRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VaultBase.BP_VaultBase_C
// 0x00F8 (0x0508 - 0x0410)
class ABP_VaultBase_C final : public ACAVaultActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCACollisionComponent*                  Vault_Interior_Collision;                          // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticDoor;                                        // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CAAudioSpatialNode2;                               // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CAAudioSpatialNode;                                // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CAAudioSpatialNode1;                               // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PointOfInterestComponent_C*         BP_PointOfInterestComponentLong;                   // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MapEntityComponent_C*               BP_MapEntityComponent;                             // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCACollisionComponent*                  SecuritySensor;                                    // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCAAudioSpatialLinkComponent*           SpatialAudioLink;                                  // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 VaultDoor;                                         // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCANavModifierComponent*                CANavModifier;                                     // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GravityBarrierComponent_C*          GravityBarrierComponent;                           // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_VaultStateComponent_C*              VaultStateComponent;                               // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Breached;                                          // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACASecurityArea*>                SecurityAreas;                                     // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FCAText                                VaultName;                                         // 0x04A0(0x0030)(Edit, BlueprintVisible)
	struct FVector                                VaultIconLocation;                                 // 0x04D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockdown;                                        // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 User;                                              // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DefaultVaultLevel;                                 // 0x04E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CacheCampTypeIDTag;                                // 0x04F4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLooted;                                          // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_VaultBase(int32 EntryPoint);
	void BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_4_SceneComponentEndOverlapSignature__DelegateSignature(class USceneComponent* OverlappedComponent, class AActor* OtherActor, class USceneComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_VaultBase_Vault_Interior_Collision_K2Node_ComponentBoundEvent_1_SceneComponentBeginOverlapSignature__DelegateSignature(class USceneComponent* OverlappedComponent, class AActor* OtherActor, class USceneComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_VaultBase_VaultStateComponent_K2Node_ComponentBoundEvent_5_EventOnLockdown__DelegateSignature(bool IsLockdown_0);
	void VaultLooted();
	void SetCampTypeID(const struct FGameplayTag& Tag);
	void SetVaultCaptureID(const struct FCAVaultActorData& VaultData);
	void SetUserCapturing(class AActor* User_0);
	void ReceiveBeginPlay();
	void BndEvt__VaultStateComponent_K2Node_ComponentBoundEvent_3_EventComplete__DelegateSignature();
	void BndEvt__VaultStateComponent_K2Node_ComponentBoundEvent_2_EventCollapse__DelegateSignature();
	void BndEvt__VaultStateComponent_K2Node_ComponentBoundEvent_0_EventDamaged__DelegateSignature();
	void UserConstructionScript();
	void GetSecurityAreas(TArray<class ACASecurityArea*>* Security_Areas);

	bool IsVaultBreached() const;
	void SetHUDEntityID(ECAUIHUDEntityId Ui_entity_id) const;
	int32 GetMapEntityID() const;
	bool IsVaultInLockdown() const;
	bool IsVaultLooted() const;
	void ShouldVaultHaveMarker(ECAUIHUDEntityId MarkerID, bool* ShouldHaveMarker) const;
	ECAUIHUDEntityId GetHUDEntityID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VaultBase_C">();
	}
	static class ABP_VaultBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VaultBase_C>();
	}
};
static_assert(alignof(ABP_VaultBase_C) == 0x000008, "Wrong alignment on ABP_VaultBase_C");
static_assert(sizeof(ABP_VaultBase_C) == 0x000508, "Wrong size on ABP_VaultBase_C");
static_assert(offsetof(ABP_VaultBase_C, UberGraphFrame) == 0x000410, "Member 'ABP_VaultBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, Vault_Interior_Collision) == 0x000418, "Member 'ABP_VaultBase_C::Vault_Interior_Collision' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, StaticDoor) == 0x000420, "Member 'ABP_VaultBase_C::StaticDoor' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, CAAudioSpatialNode2) == 0x000428, "Member 'ABP_VaultBase_C::CAAudioSpatialNode2' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, CAAudioSpatialNode) == 0x000430, "Member 'ABP_VaultBase_C::CAAudioSpatialNode' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, CAAudioSpatialNode1) == 0x000438, "Member 'ABP_VaultBase_C::CAAudioSpatialNode1' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, BP_PointOfInterestComponentLong) == 0x000440, "Member 'ABP_VaultBase_C::BP_PointOfInterestComponentLong' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, BP_MapEntityComponent) == 0x000448, "Member 'ABP_VaultBase_C::BP_MapEntityComponent' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, SecuritySensor) == 0x000450, "Member 'ABP_VaultBase_C::SecuritySensor' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, SpatialAudioLink) == 0x000458, "Member 'ABP_VaultBase_C::SpatialAudioLink' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, VaultDoor) == 0x000460, "Member 'ABP_VaultBase_C::VaultDoor' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, CANavModifier) == 0x000468, "Member 'ABP_VaultBase_C::CANavModifier' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, GravityBarrierComponent) == 0x000470, "Member 'ABP_VaultBase_C::GravityBarrierComponent' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, VaultStateComponent) == 0x000478, "Member 'ABP_VaultBase_C::VaultStateComponent' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, DefaultSceneRoot) == 0x000480, "Member 'ABP_VaultBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, Breached) == 0x000488, "Member 'ABP_VaultBase_C::Breached' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, SecurityAreas) == 0x000490, "Member 'ABP_VaultBase_C::SecurityAreas' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, VaultName) == 0x0004A0, "Member 'ABP_VaultBase_C::VaultName' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, VaultIconLocation) == 0x0004D0, "Member 'ABP_VaultBase_C::VaultIconLocation' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, IsLockdown) == 0x0004DC, "Member 'ABP_VaultBase_C::IsLockdown' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, User) == 0x0004E0, "Member 'ABP_VaultBase_C::User' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, DefaultVaultLevel) == 0x0004E8, "Member 'ABP_VaultBase_C::DefaultVaultLevel' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, CacheCampTypeIDTag) == 0x0004F4, "Member 'ABP_VaultBase_C::CacheCampTypeIDTag' has a wrong offset!");
static_assert(offsetof(ABP_VaultBase_C, IsLooted) == 0x000500, "Member 'ABP_VaultBase_C::IsLooted' has a wrong offset!");

}

