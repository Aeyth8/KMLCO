#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Heist_Contract_GS

#include "Basic.hpp"

#include "CALocalisationRuntime_structs.hpp"
#include "Keaton_structs.hpp"


namespace SDK::Params
{

// Function BP_Heist_Contract_GS.BP_Heist_Contract_GS_C.ExecuteUbergraph_BP_Heist_Contract_GS
// 0x0070 (0x0070 - 0x0000)
struct BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCATeamID                              K2Node_CustomEvent_team_id;                        // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_threshold_progress;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_previous_progress;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_type;                                 // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAText                                K2Node_Event_vault_name;                           // 0x0020(0x0030)(ConstParm)
	int32                                         K2Node_Event_vault_level;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_did_friendly_activate;                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCATeamID                              K2Node_CustomEvent_Team;                           // 0x0058(0x0004)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FCATeamID& Team_id, float Threshold_progress, float Previous_progress)> K2Node_CreateDelegate_OutputDelegate;              // 0x005C(0x0014)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS) == 0x000008, "Wrong alignment on BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS");
static_assert(sizeof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS) == 0x000070, "Wrong size on BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, EntryPoint) == 0x000000, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_CustomEvent_team_id) == 0x000004, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_CustomEvent_team_id' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_CustomEvent_threshold_progress) == 0x000008, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_CustomEvent_threshold_progress' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_CustomEvent_previous_progress) == 0x00000C, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_CustomEvent_previous_progress' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_Event_type) == 0x000010, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_Event_type' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_Event_vault_name) == 0x000020, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_Event_vault_name' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_Event_vault_level) == 0x000050, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_Event_vault_level' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_Event_did_friendly_activate) == 0x000054, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_Event_did_friendly_activate' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_CustomEvent_Team) == 0x000058, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_CustomEvent_Team' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS, K2Node_CreateDelegate_OutputDelegate) == 0x00005C, "Member 'BP_Heist_Contract_GS_C_ExecuteUbergraph_BP_Heist_Contract_GS::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BP_Heist_Contract_GS.BP_Heist_Contract_GS_C.ThresholdProgress
// 0x000C (0x000C - 0x0000)
struct BP_Heist_Contract_GS_C_ThresholdProgress final
{
public:
	struct FCATeamID                              Team_id;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold_progress;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Previous_progress;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Heist_Contract_GS_C_ThresholdProgress) == 0x000004, "Wrong alignment on BP_Heist_Contract_GS_C_ThresholdProgress");
static_assert(sizeof(BP_Heist_Contract_GS_C_ThresholdProgress) == 0x00000C, "Wrong size on BP_Heist_Contract_GS_C_ThresholdProgress");
static_assert(offsetof(BP_Heist_Contract_GS_C_ThresholdProgress, Team_id) == 0x000000, "Member 'BP_Heist_Contract_GS_C_ThresholdProgress::Team_id' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ThresholdProgress, Threshold_progress) == 0x000004, "Member 'BP_Heist_Contract_GS_C_ThresholdProgress::Threshold_progress' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_ThresholdProgress, Previous_progress) == 0x000008, "Member 'BP_Heist_Contract_GS_C_ThresholdProgress::Previous_progress' has a wrong offset!");

// Function BP_Heist_Contract_GS.BP_Heist_Contract_GS_C.CLT_ScoreThresholdReached
// 0x0004 (0x0004 - 0x0000)
struct BP_Heist_Contract_GS_C_CLT_ScoreThresholdReached final
{
public:
	struct FCATeamID                              Team;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Heist_Contract_GS_C_CLT_ScoreThresholdReached) == 0x000004, "Wrong alignment on BP_Heist_Contract_GS_C_CLT_ScoreThresholdReached");
static_assert(sizeof(BP_Heist_Contract_GS_C_CLT_ScoreThresholdReached) == 0x000004, "Wrong size on BP_Heist_Contract_GS_C_CLT_ScoreThresholdReached");
static_assert(offsetof(BP_Heist_Contract_GS_C_CLT_ScoreThresholdReached, Team) == 0x000000, "Member 'BP_Heist_Contract_GS_C_CLT_ScoreThresholdReached::Team' has a wrong offset!");

// Function BP_Heist_Contract_GS.BP_Heist_Contract_GS_C.OnVaultActivated
// 0x0048 (0x0048 - 0x0000)
struct BP_Heist_Contract_GS_C_OnVaultActivated final
{
public:
	class FName                                   Type;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAText                                Vault_name;                                        // 0x0010(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Vault_level;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Did_friendly_activate;                             // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Heist_Contract_GS_C_OnVaultActivated) == 0x000008, "Wrong alignment on BP_Heist_Contract_GS_C_OnVaultActivated");
static_assert(sizeof(BP_Heist_Contract_GS_C_OnVaultActivated) == 0x000048, "Wrong size on BP_Heist_Contract_GS_C_OnVaultActivated");
static_assert(offsetof(BP_Heist_Contract_GS_C_OnVaultActivated, Type) == 0x000000, "Member 'BP_Heist_Contract_GS_C_OnVaultActivated::Type' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_OnVaultActivated, Vault_name) == 0x000010, "Member 'BP_Heist_Contract_GS_C_OnVaultActivated::Vault_name' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_OnVaultActivated, Vault_level) == 0x000040, "Member 'BP_Heist_Contract_GS_C_OnVaultActivated::Vault_level' has a wrong offset!");
static_assert(offsetof(BP_Heist_Contract_GS_C_OnVaultActivated, Did_friendly_activate) == 0x000044, "Member 'BP_Heist_Contract_GS_C_OnVaultActivated::Did_friendly_activate' has a wrong offset!");

// Function BP_Heist_Contract_GS.BP_Heist_Contract_GS_C.DialogueMatchStarted
// 0x000C (0x000C - 0x0000)
struct BP_Heist_Contract_GS_C_DialogueMatchStarted final
{
public:
	class FName                                   NewLocalVar_0;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Heist_Contract_GS_C_DialogueMatchStarted) == 0x000004, "Wrong alignment on BP_Heist_Contract_GS_C_DialogueMatchStarted");
static_assert(sizeof(BP_Heist_Contract_GS_C_DialogueMatchStarted) == 0x00000C, "Wrong size on BP_Heist_Contract_GS_C_DialogueMatchStarted");
static_assert(offsetof(BP_Heist_Contract_GS_C_DialogueMatchStarted, NewLocalVar_0) == 0x000000, "Member 'BP_Heist_Contract_GS_C_DialogueMatchStarted::NewLocalVar_0' has a wrong offset!");

}

