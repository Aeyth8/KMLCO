#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Human_TP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Human_TP.ABP_Human_TP_C
// 0x58A0 (0x6B80 - 0x12E0)
class UABP_Human_TP_C final : public UCAAnimInstance_Specialist_TP
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x12E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_29;                    // 0x12E8(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_28;                    // 0x1318(0x0030)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_9;                  // 0x1348(0x00C0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_11;                   // 0x1408(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_27;                    // 0x1560(0x0030)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_8;                  // 0x1590(0x00C0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_10;                   // 0x1650(0x0158)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_9;                    // 0x17A8(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_26;                    // 0x1900(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_25;                    // 0x1930(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_24;                    // 0x1960(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_23;                    // 0x1990(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_22;                    // 0x19C0(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_21;                    // 0x19F0(0x0030)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_8;                    // 0x1A20(0x0158)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_7;                  // 0x1B78(0x00C0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_7;                    // 0x1C38(0x0158)()
	struct FAnimNode_RotateRootBone               AnimGraphNode_RotateRootBone_1;                    // 0x1D90(0x00E0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_12;                      // 0x1E70(0x00C8)()
	struct FAnimNode_LinkedAnimGraph              AnimGraphNode_SubInstance_2;                       // 0x1F38(0x00A8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_20;                    // 0x1FE0(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_19;                    // 0x2010(0x0030)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x2040(0x00A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_6;                    // 0x20E0(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_18;                    // 0x2238(0x0030)()
	struct FAnimNode_LinkedAnimGraph              AnimGraphNode_SubInstance_1;                       // 0x2268(0x00A8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_17;                    // 0x2310(0x0030)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_5;                    // 0x2340(0x0158)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x2498(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x24B8(0x0020)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_11;                      // 0x24D8(0x00C8)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x25A0(0x0110)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_16;                    // 0x26B0(0x0030)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x26E0(0x0210)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x28F0(0x0210)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_15;                    // 0x2B00(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_9;                              // 0x2B30(0x00E8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_8;                              // 0x2C18(0x00E8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_8;                 // 0x2D00(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_7;                 // 0x2D50(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_6;                 // 0x2DA0(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_5;                 // 0x2DF0(0x0050)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace_3;          // 0x2E40(0x0198)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace_2;          // 0x2FD8(0x0198)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_4;                    // 0x3170(0x0158)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x32C8(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_14;                    // 0x3420(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_13;                    // 0x3450(0x0030)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x3480(0x00A0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_10;                      // 0x3520(0x00C8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_9;                       // 0x35E8(0x00C8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_8;                       // 0x36B0(0x00C8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_4;                 // 0x3778(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_3;                 // 0x37C8(0x0050)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_12;                    // 0x3818(0x0030)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x3848(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_11;                    // 0x39A0(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_7;                              // 0x39D0(0x00E8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_6;                              // 0x3AB8(0x00E8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_10;                    // 0x3BA0(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_5;                              // 0x3BD0(0x00E8)()
	struct FAnimNode_HandIKRetargeting            AnimGraphNode_HandIKRetargeting;                   // 0x3CB8(0x0138)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_7;                       // 0x3DF0(0x00C8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_2;                 // 0x3EB8(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x3F08(0x0050)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x3F58(0x00D0)()
	struct FAnimNode_RotateRootBone               AnimGraphNode_RotateRootBone;                      // 0x4028(0x00E0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_6;                       // 0x4108(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_9;                     // 0x41D0(0x0030)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_5;                       // 0x4200(0x00C8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_4;                       // 0x42C8(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x4390(0x0030)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x43C0(0x0050)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_6;                  // 0x4410(0x00C0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x44D0(0x00A0)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x4570(0x0018)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x4588(0x00A0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x4628(0x00E8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x4710(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x4740(0x0030)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve_5;                       // 0x4770(0x0058)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x47C8(0x0158)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve_4;                       // 0x4920(0x0058)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve_3;                       // 0x4978(0x0058)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve_2;                       // 0x49D0(0x0058)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_5;                  // 0x4A28(0x00C0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x4AE8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x4B18(0x00E8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_4;                  // 0x4C00(0x00C0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_3;                  // 0x4CC0(0x00C0)()
	struct FAnimNode_PoseBlendNode                AnimGraphNode_PoseBlendNode_1;                     // 0x4D80(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x4E20(0x0030)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_3;                       // 0x4E50(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x4F18(0x00D0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x4FE8(0x0080)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve_1;                       // 0x5068(0x0058)()
	struct FAnimNode_PoseBlendNode                AnimGraphNode_PoseBlendNode;                       // 0x50C0(0x00A0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x5160(0x00E8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_2;                  // 0x5248(0x00C0)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve;                         // 0x5308(0x0058)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x5360(0x00E8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_2;                       // 0x5448(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x5510(0x0030)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace_1;          // 0x5540(0x0198)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x56D8(0x0030)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace;            // 0x5708(0x0198)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_1;                       // 0x58A0(0x00C8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x5968(0x00C8)()
	struct FAnimNode_RigidBody                    AnimGraphNode_RigidBody;                           // 0x5A30(0x0850)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x6280(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x62A0(0x0020)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x62C0(0x0158)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x6418(0x00C0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x64D8(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x6508(0x0030)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x6538(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x65F8(0x00E8)()
	struct FAnimNode_LinkedAnimGraph              AnimGraphNode_SubInstance;                         // 0x66E0(0x00A8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x6788(0x0038)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x67C0(0x00B0)()
	float                                         __CustomProperty_MeshPosition_F349FD8D44FB67FFBFEDDBB05D504599; // 0x6870(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_TakeOffMeshPos_F349FD8D44FB67FFBFEDDBB05D504599; // 0x6874(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_GroundToZeroGBlend_F349FD8D44FB67FFBFEDDBB05D504599; // 0x6878(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_IsPoseBeingUsed_F349FD8D44FB67FFBFEDDBB05D504599; // 0x687C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_687D[0x3];                                     // 0x687D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         __CustomProperty_MeshPosition_238A1EA149F1083F4FAD2F9346F3F3F0; // 0x6880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_TakeOffMeshPos_238A1EA149F1083F4FAD2F9346F3F3F0; // 0x6884(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_GroundToZeroGBlend_238A1EA149F1083F4FAD2F9346F3F3F0; // 0x6888(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_IsPoseBeingUsed_238A1EA149F1083F4FAD2F9346F3F3F0; // 0x688C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          __CustomProperty_IsPoseBeingUsed_480917B6478A2F53B394CAA475738505; // 0x688D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_688E[0x2];                                     // 0x688E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         __CustomProperty_LastHitDirection_480917B6478A2F53B394CAA475738505; // 0x6890(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6894[0x4];                                     // 0x6894(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitReactionDatabase                   HitReactionDB;                                     // 0x6898(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         GroundToZeroGBlend;                                // 0x68A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocomotionNeedsLeftArm;                            // 0x68AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WeaponNeedsPreciseAim;                             // 0x68AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68AE[0x2];                                     // 0x68AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrioritiseWeapon;                                  // 0x68B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponStrength;                                    // 0x68B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookStrength;                                      // 0x68B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtLocation;                                    // 0x68BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GazeTimer;                                         // 0x68C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GazeOffset;                                        // 0x68CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHeadLook;                                       // 0x68D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseEyeLook;                                        // 0x68D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68DA[0x2];                                     // 0x68DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HandFavouring;                                     // 0x68DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLOD;                                        // 0x68E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68E4[0x4];                                     // 0x68E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        DirectionVectorArray;                              // 0x68E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MeshPositionOffset;                                // 0x68F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDedicatedServer;                                 // 0x68FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68FD[0x3];                                     // 0x68FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpaceBase*                        AO_Held;                                           // 0x6900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlendSpaceBase*                        AO_ADS;                                            // 0x6908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastHitDirection;                                  // 0x6910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DebugVector;                                       // 0x6914(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCACharacterAnimationComponent*         CACharAnimComp;                                    // 0x6920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_TPADSAudioActive;                               // 0x6928(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6929[0x7];                                     // 0x6929(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ADSAudioActorReference;                            // 0x6930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Use_ADS_strength;                                  // 0x6938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_693C[0x4];                                     // 0x693C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Mesh;                                              // 0x6940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x6948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACACharacter_MainPlayer*                CACharMainPlayer;                                  // 0x6950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDowned;                                          // 0x6958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6959[0x3];                                     // 0x6959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName_Hip;                                      // 0x695C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName2_Spine;                                   // 0x6968(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnscreenOrAudibleOrEmoting;                      // 0x6974(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6975[0x3];                                     // 0x6975(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TrackedLocationPrev;                               // 0x6978(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MeasuredRootVelocity;                              // 0x6984(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MeasuredRootAcceleration;                          // 0x6990(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699C[0x4];                                     // 0x699C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDebugFloatHistory                     DebugFloatHistory;                                 // 0x69A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TakeOffMeshPos;                                    // 0x69C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingMeshPos;                                    // 0x69C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SmoothedPosition;                                  // 0x69C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SmoothedVelocity;                                  // 0x69D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SmoothingInitialised;                              // 0x69E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69E1[0x3];                                     // 0x69E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothingConvergeTime;                             // 0x69E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Smoothing_P;                                       // 0x69E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Smoothing_I;                                       // 0x69EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Smoothing_D;                                       // 0x69F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRagdoll;                                         // 0x69F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69F5[0x3];                                     // 0x69F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimatedFaceAlpha;                                 // 0x69F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHealthState                                  HealthState;                                       // 0x69FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69FD[0x3];                                     // 0x69FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurveDrivenFaceAnim;                               // 0x6A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InjuredFace;                                       // 0x6A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeadFace;                                          // 0x6A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UseAnimatedFace;                                   // 0x6A0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UseProceduralFace;                                 // 0x6A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponAdjustmentTP_TX;                             // 0x6A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandIK;                                        // 0x6A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A1C[0x4];                                     // 0x6A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSnapshot                          PrevWeaponPoseSnapshot;                            // 0x6A20(0x0040)(Edit, BlueprintVisible)
	float                                         PrevPoseAlpha;                                     // 0x6A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsLegs;                                       // 0x6A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FEATURE_CA_SKILLFUL_KILLS;                         // 0x6A68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DidSkillfulKillsMontagePlayed;                     // 0x6A69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBodyPart                                     BodyPart;                                          // 0x6A6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A6B[0x1];                                     // 0x6A6B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitDirection;                                      // 0x6A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      SelectedDeathAnim;                                 // 0x6A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathDownedBack;                                   // 0x6A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathDownedLeft;                                   // 0x6A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathDownedFwd;                                    // 0x6A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathDownedRight;                                  // 0x6A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathStandBack;                                    // 0x6A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathStandLeft;                                    // 0x6AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathStandFwd;                                     // 0x6AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathStandRight;                                   // 0x6AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathZGFlyBack;                                    // 0x6AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathZGFlyLeft;                                    // 0x6AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathZGFlyRight;                                   // 0x6AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathZGFlyFwd;                                     // 0x6AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathCrouchBack;                                   // 0x6AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathCrouchLeft;                                   // 0x6AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathCrouchFwd;                                    // 0x6AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathCrouchRight;                                  // 0x6AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathStandHeadBack;                                // 0x6AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathStandHeadLeft;                                // 0x6B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathStandHeadRight;                               // 0x6B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathStandHeadFwd;                                 // 0x6B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x6B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B19[0x3];                                     // 0x6B19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RootBoneRotationToCharacterRotationDelta;          // 0x6B1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDownedLocomotion;                                // 0x6B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECAWeaponClass                                Weapon_Class;                                      // 0x6B29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B2A[0x6];                                     // 0x6B2A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      DeathExplosionBack;                                // 0x6B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathExplosionLeft;                                // 0x6B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathExplosionRight;                               // 0x6B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathExplosionFwd;                                 // 0x6B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlayCurseLowHealth;                             // 0x6B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B51[0x7];                                     // 0x6B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      DeathBBQ_Back;                                     // 0x6B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathBBQ_Left;                                     // 0x6B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathBBQ_Right;                                    // 0x6B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DeathBBQ_Fwd;                                      // 0x6B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_Human_TP(int32 EntryPoint);
	void OneShotPainVoxDelayed();
	void OnDeviceChanged();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_RotateRootBone_A8883DF3456FF0B8104E5DBB692F8BB2();
	void BlueprintPostEvaluateAnimation();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_LayeredBoneBlend_AC788308490DA1909BE1C3906C2DBEAE();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_LayeredBoneBlend_4BD9D6DE45B364FFC181C6B498B15DC1();
	void PostMovementModeChanged(ECAPlayerMovementMode PrevMovementMode, ECAPlayerMovementMode MovementMode, float Delta_pos);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_ModifyCurve_A98A3C514FFCF274C267F193DBD48BDD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_ModifyCurve_21E6B1194144635BDF8084BB82FFBE56();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_RotationOffsetBlendSpace_33556B424C932B5ED5FE669E7F076475();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_RotationOffsetBlendSpace_06D2A0724F7C213990F82297AE1305CC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_LayeredBoneBlend_D1F50EB84FACC6FD979A2DB863BDDA32();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_RotationOffsetBlendSpace_9677BE374692B8A7A9467296CD63738D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_RotationOffsetBlendSpace_A3B0877C44371EE2E2D04B88F721A28D();
	void OnDeath(class ACACharacter* Character, const struct FGameplayEffectSpec& Death_gameplay_effect_spec, float Damage_magnitude, const struct FNetworkedHit& Networked_hit, const class AActor* Killer);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_ModifyBone_DFFC64814EE71D4C64974EB08357866F();
	void OnMovementMetaChanged(class ACharacter* Character, ECAPlayerMovementMetaMode PrevMovementMetaMode, ECAPlayerMovementMetaMode MovementMetaMode);
	void OnLocalHitReceived(const struct FNetworkedHit& Hit);
	void OnPushReceivedEvent(const struct FGameplayTagContainer& Tag_name);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_AnimGraphNode_SequenceEvaluator_A141E3C14FC5B814111D84939D5A3104();
	void BlueprintInitializeAnimation();
	void OnHitReceivedEvent(const struct FNetworkedHit& Hit);
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void OnMetaModeChanged(class ACharacter* Character, ECAPlayerMovementMetaMode Prev_Movement_Meta_Mode, ECAPlayerMovementMetaMode New_Movement_Meta_Mode);
	void OnHitReaction(const struct FVector& Location, const struct FRotator& Direction, EBodyPart BodyPart_0, class ACAEquipmentBase* Weapon, const struct FNetworkedHit& Hit);
	void OnPushReceived(const struct FGameplayTagContainer& GameplayTagContainer);
	void GetDeathAnim(const struct FNetworkedHit& Hit, class UAnimSequenceBase** DeathAnim);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Human_TP_C">();
	}
	static class UABP_Human_TP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Human_TP_C>();
	}
};
static_assert(alignof(UABP_Human_TP_C) == 0x000010, "Wrong alignment on UABP_Human_TP_C");
static_assert(sizeof(UABP_Human_TP_C) == 0x006B80, "Wrong size on UABP_Human_TP_C");
static_assert(offsetof(UABP_Human_TP_C, UberGraphFrame) == 0x0012E0, "Member 'UABP_Human_TP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_29) == 0x0012E8, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_29' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_28) == 0x001318, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_28' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_9) == 0x001348, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_9' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_11) == 0x001408, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_11' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_27) == 0x001560, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_27' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_8) == 0x001590, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_8' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_10) == 0x001650, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_10' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_9) == 0x0017A8, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_9' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_26) == 0x001900, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_26' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_25) == 0x001930, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_25' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_24) == 0x001960, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_24' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_23) == 0x001990, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_23' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_22) == 0x0019C0, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_22' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_21) == 0x0019F0, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_21' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_8) == 0x001A20, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_8' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_7) == 0x001B78, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_7' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_7) == 0x001C38, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_7' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_RotateRootBone_1) == 0x001D90, "Member 'UABP_Human_TP_C::AnimGraphNode_RotateRootBone_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_12) == 0x001E70, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_12' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SubInstance_2) == 0x001F38, "Member 'UABP_Human_TP_C::AnimGraphNode_SubInstance_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_20) == 0x001FE0, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_20' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_19) == 0x002010, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_19' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_BlendListByBool_3) == 0x002040, "Member 'UABP_Human_TP_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_6) == 0x0020E0, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_18) == 0x002238, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_18' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SubInstance_1) == 0x002268, "Member 'UABP_Human_TP_C::AnimGraphNode_SubInstance_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_17) == 0x002310, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_17' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_5) == 0x002340, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LocalToComponentSpace_1) == 0x002498, "Member 'UABP_Human_TP_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x0024B8, "Member 'UABP_Human_TP_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_11) == 0x0024D8, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_11' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ModifyBone) == 0x0025A0, "Member 'UABP_Human_TP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_16) == 0x0026B0, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_16' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoBoneIK_1) == 0x0026E0, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoBoneIK) == 0x0028F0, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_15) == 0x002B00, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_15' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_9) == 0x002B30, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_9' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_8) == 0x002C18, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_8' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator_8) == 0x002D00, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator_8' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator_7) == 0x002D50, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator_7' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator_6) == 0x002DA0, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator_6' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator_5) == 0x002DF0, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_RotationOffsetBlendSpace_3) == 0x002E40, "Member 'UABP_Human_TP_C::AnimGraphNode_RotationOffsetBlendSpace_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_RotationOffsetBlendSpace_2) == 0x002FD8, "Member 'UABP_Human_TP_C::AnimGraphNode_RotationOffsetBlendSpace_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_4) == 0x003170, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_3) == 0x0032C8, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_14) == 0x003420, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_14' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_13) == 0x003450, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_13' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_BlendListByBool_2) == 0x003480, "Member 'UABP_Human_TP_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_10) == 0x003520, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_10' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_9) == 0x0035E8, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_9' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_8) == 0x0036B0, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_8' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator_4) == 0x003778, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator_3) == 0x0037C8, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_12) == 0x003818, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_12' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_2) == 0x003848, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_11) == 0x0039A0, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_11' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_7) == 0x0039D0, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_7' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_6) == 0x003AB8, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_6' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_10) == 0x003BA0, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_10' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_5) == 0x003BD0, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_HandIKRetargeting) == 0x003CB8, "Member 'UABP_Human_TP_C::AnimGraphNode_HandIKRetargeting' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_7) == 0x003DF0, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_7' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator_2) == 0x003EB8, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator_1) == 0x003F08, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ApplyAdditive_1) == 0x003F58, "Member 'UABP_Human_TP_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_RotateRootBone) == 0x004028, "Member 'UABP_Human_TP_C::AnimGraphNode_RotateRootBone' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_6) == 0x004108, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_6' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_9) == 0x0041D0, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_9' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_5) == 0x004200, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_4) == 0x0042C8, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_8) == 0x004390, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequenceEvaluator) == 0x0043C0, "Member 'UABP_Human_TP_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_6) == 0x004410, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_6' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_BlendListByBool_1) == 0x0044D0, "Member 'UABP_Human_TP_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LocalRefPose) == 0x004570, "Member 'UABP_Human_TP_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_BlendListByBool) == 0x004588, "Member 'UABP_Human_TP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_4) == 0x004628, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_7) == 0x004710, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_6) == 0x004740, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ModifyCurve_5) == 0x004770, "Member 'UABP_Human_TP_C::AnimGraphNode_ModifyCurve_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose_1) == 0x0047C8, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ModifyCurve_4) == 0x004920, "Member 'UABP_Human_TP_C::AnimGraphNode_ModifyCurve_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ModifyCurve_3) == 0x004978, "Member 'UABP_Human_TP_C::AnimGraphNode_ModifyCurve_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ModifyCurve_2) == 0x0049D0, "Member 'UABP_Human_TP_C::AnimGraphNode_ModifyCurve_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_5) == 0x004A28, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_5) == 0x004AE8, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_3) == 0x004B18, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_4) == 0x004C00, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_3) == 0x004CC0, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_PoseBlendNode_1) == 0x004D80, "Member 'UABP_Human_TP_C::AnimGraphNode_PoseBlendNode_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_4) == 0x004E20, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_3) == 0x004E50, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ApplyAdditive) == 0x004F18, "Member 'UABP_Human_TP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SequencePlayer) == 0x004FE8, "Member 'UABP_Human_TP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ModifyCurve_1) == 0x005068, "Member 'UABP_Human_TP_C::AnimGraphNode_ModifyCurve_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_PoseBlendNode) == 0x0050C0, "Member 'UABP_Human_TP_C::AnimGraphNode_PoseBlendNode' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_2) == 0x005160, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_2) == 0x005248, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ModifyCurve) == 0x005308, "Member 'UABP_Human_TP_C::AnimGraphNode_ModifyCurve' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot_1) == 0x005360, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_2) == 0x005448, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_3) == 0x005510, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_RotationOffsetBlendSpace_1) == 0x005540, "Member 'UABP_Human_TP_C::AnimGraphNode_RotationOffsetBlendSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_2) == 0x0056D8, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_RotationOffsetBlendSpace) == 0x005708, "Member 'UABP_Human_TP_C::AnimGraphNode_RotationOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend_1) == 0x0058A0, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_TwoWayBlend) == 0x005968, "Member 'UABP_Human_TP_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_RigidBody) == 0x005A30, "Member 'UABP_Human_TP_C::AnimGraphNode_RigidBody' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LocalToComponentSpace) == 0x006280, "Member 'UABP_Human_TP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_ComponentToLocalSpace) == 0x0062A0, "Member 'UABP_Human_TP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SaveCachedPose) == 0x0062C0, "Member 'UABP_Human_TP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend_1) == 0x006418, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose_1) == 0x0064D8, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_UseCachedPose) == 0x006508, "Member 'UABP_Human_TP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_LayeredBoneBlend) == 0x006538, "Member 'UABP_Human_TP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Slot) == 0x0065F8, "Member 'UABP_Human_TP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_SubInstance) == 0x0066E0, "Member 'UABP_Human_TP_C::AnimGraphNode_SubInstance' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_Root) == 0x006788, "Member 'UABP_Human_TP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimGraphNode_PoseSnapshot) == 0x0067C0, "Member 'UABP_Human_TP_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_MeshPosition_F349FD8D44FB67FFBFEDDBB05D504599) == 0x006870, "Member 'UABP_Human_TP_C::__CustomProperty_MeshPosition_F349FD8D44FB67FFBFEDDBB05D504599' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_TakeOffMeshPos_F349FD8D44FB67FFBFEDDBB05D504599) == 0x006874, "Member 'UABP_Human_TP_C::__CustomProperty_TakeOffMeshPos_F349FD8D44FB67FFBFEDDBB05D504599' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_GroundToZeroGBlend_F349FD8D44FB67FFBFEDDBB05D504599) == 0x006878, "Member 'UABP_Human_TP_C::__CustomProperty_GroundToZeroGBlend_F349FD8D44FB67FFBFEDDBB05D504599' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_IsPoseBeingUsed_F349FD8D44FB67FFBFEDDBB05D504599) == 0x00687C, "Member 'UABP_Human_TP_C::__CustomProperty_IsPoseBeingUsed_F349FD8D44FB67FFBFEDDBB05D504599' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_MeshPosition_238A1EA149F1083F4FAD2F9346F3F3F0) == 0x006880, "Member 'UABP_Human_TP_C::__CustomProperty_MeshPosition_238A1EA149F1083F4FAD2F9346F3F3F0' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_TakeOffMeshPos_238A1EA149F1083F4FAD2F9346F3F3F0) == 0x006884, "Member 'UABP_Human_TP_C::__CustomProperty_TakeOffMeshPos_238A1EA149F1083F4FAD2F9346F3F3F0' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_GroundToZeroGBlend_238A1EA149F1083F4FAD2F9346F3F3F0) == 0x006888, "Member 'UABP_Human_TP_C::__CustomProperty_GroundToZeroGBlend_238A1EA149F1083F4FAD2F9346F3F3F0' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_IsPoseBeingUsed_238A1EA149F1083F4FAD2F9346F3F3F0) == 0x00688C, "Member 'UABP_Human_TP_C::__CustomProperty_IsPoseBeingUsed_238A1EA149F1083F4FAD2F9346F3F3F0' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_IsPoseBeingUsed_480917B6478A2F53B394CAA475738505) == 0x00688D, "Member 'UABP_Human_TP_C::__CustomProperty_IsPoseBeingUsed_480917B6478A2F53B394CAA475738505' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, __CustomProperty_LastHitDirection_480917B6478A2F53B394CAA475738505) == 0x006890, "Member 'UABP_Human_TP_C::__CustomProperty_LastHitDirection_480917B6478A2F53B394CAA475738505' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, HitReactionDB) == 0x006898, "Member 'UABP_Human_TP_C::HitReactionDB' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, GroundToZeroGBlend) == 0x0068A8, "Member 'UABP_Human_TP_C::GroundToZeroGBlend' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, LocomotionNeedsLeftArm) == 0x0068AC, "Member 'UABP_Human_TP_C::LocomotionNeedsLeftArm' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, WeaponNeedsPreciseAim) == 0x0068AD, "Member 'UABP_Human_TP_C::WeaponNeedsPreciseAim' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, PrioritiseWeapon) == 0x0068B0, "Member 'UABP_Human_TP_C::PrioritiseWeapon' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, WeaponStrength) == 0x0068B4, "Member 'UABP_Human_TP_C::WeaponStrength' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, LookStrength) == 0x0068B8, "Member 'UABP_Human_TP_C::LookStrength' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, LookAtLocation) == 0x0068BC, "Member 'UABP_Human_TP_C::LookAtLocation' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, GazeTimer) == 0x0068C8, "Member 'UABP_Human_TP_C::GazeTimer' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, GazeOffset) == 0x0068CC, "Member 'UABP_Human_TP_C::GazeOffset' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, UseHeadLook) == 0x0068D8, "Member 'UABP_Human_TP_C::UseHeadLook' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, UseEyeLook) == 0x0068D9, "Member 'UABP_Human_TP_C::UseEyeLook' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, HandFavouring) == 0x0068DC, "Member 'UABP_Human_TP_C::HandFavouring' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, CurrentLOD) == 0x0068E0, "Member 'UABP_Human_TP_C::CurrentLOD' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DirectionVectorArray) == 0x0068E8, "Member 'UABP_Human_TP_C::DirectionVectorArray' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, MeshPositionOffset) == 0x0068F8, "Member 'UABP_Human_TP_C::MeshPositionOffset' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, IsDedicatedServer) == 0x0068FC, "Member 'UABP_Human_TP_C::IsDedicatedServer' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AO_Held) == 0x006900, "Member 'UABP_Human_TP_C::AO_Held' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AO_ADS) == 0x006908, "Member 'UABP_Human_TP_C::AO_ADS' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, LastHitDirection) == 0x006910, "Member 'UABP_Human_TP_C::LastHitDirection' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DebugVector) == 0x006914, "Member 'UABP_Human_TP_C::DebugVector' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, CACharAnimComp) == 0x006920, "Member 'UABP_Human_TP_C::CACharAnimComp' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, Is_TPADSAudioActive) == 0x006928, "Member 'UABP_Human_TP_C::Is_TPADSAudioActive' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, ADSAudioActorReference) == 0x006930, "Member 'UABP_Human_TP_C::ADSAudioActorReference' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, Use_ADS_strength) == 0x006938, "Member 'UABP_Human_TP_C::Use_ADS_strength' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, Mesh) == 0x006940, "Member 'UABP_Human_TP_C::Mesh' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, PhysicalAnimation) == 0x006948, "Member 'UABP_Human_TP_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, CACharMainPlayer) == 0x006950, "Member 'UABP_Human_TP_C::CACharMainPlayer' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, IsDowned) == 0x006958, "Member 'UABP_Human_TP_C::IsDowned' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, BoneName_Hip) == 0x00695C, "Member 'UABP_Human_TP_C::BoneName_Hip' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, BoneName2_Spine) == 0x006968, "Member 'UABP_Human_TP_C::BoneName2_Spine' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, IsOnscreenOrAudibleOrEmoting) == 0x006974, "Member 'UABP_Human_TP_C::IsOnscreenOrAudibleOrEmoting' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, TrackedLocationPrev) == 0x006978, "Member 'UABP_Human_TP_C::TrackedLocationPrev' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, MeasuredRootVelocity) == 0x006984, "Member 'UABP_Human_TP_C::MeasuredRootVelocity' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, MeasuredRootAcceleration) == 0x006990, "Member 'UABP_Human_TP_C::MeasuredRootAcceleration' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DebugFloatHistory) == 0x0069A0, "Member 'UABP_Human_TP_C::DebugFloatHistory' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, TakeOffMeshPos) == 0x0069C0, "Member 'UABP_Human_TP_C::TakeOffMeshPos' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, LandingMeshPos) == 0x0069C4, "Member 'UABP_Human_TP_C::LandingMeshPos' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, SmoothedPosition) == 0x0069C8, "Member 'UABP_Human_TP_C::SmoothedPosition' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, SmoothedVelocity) == 0x0069D4, "Member 'UABP_Human_TP_C::SmoothedVelocity' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, SmoothingInitialised) == 0x0069E0, "Member 'UABP_Human_TP_C::SmoothingInitialised' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, SmoothingConvergeTime) == 0x0069E4, "Member 'UABP_Human_TP_C::SmoothingConvergeTime' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, Smoothing_P) == 0x0069E8, "Member 'UABP_Human_TP_C::Smoothing_P' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, Smoothing_I) == 0x0069EC, "Member 'UABP_Human_TP_C::Smoothing_I' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, Smoothing_D) == 0x0069F0, "Member 'UABP_Human_TP_C::Smoothing_D' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, IsRagdoll) == 0x0069F4, "Member 'UABP_Human_TP_C::IsRagdoll' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, AnimatedFaceAlpha) == 0x0069F8, "Member 'UABP_Human_TP_C::AnimatedFaceAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, HealthState) == 0x0069FC, "Member 'UABP_Human_TP_C::HealthState' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, CurveDrivenFaceAnim) == 0x006A00, "Member 'UABP_Human_TP_C::CurveDrivenFaceAnim' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, InjuredFace) == 0x006A04, "Member 'UABP_Human_TP_C::InjuredFace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeadFace) == 0x006A08, "Member 'UABP_Human_TP_C::DeadFace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, UseAnimatedFace) == 0x006A0C, "Member 'UABP_Human_TP_C::UseAnimatedFace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, UseProceduralFace) == 0x006A10, "Member 'UABP_Human_TP_C::UseProceduralFace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, WeaponAdjustmentTP_TX) == 0x006A14, "Member 'UABP_Human_TP_C::WeaponAdjustmentTP_TX' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, LeftHandIK) == 0x006A18, "Member 'UABP_Human_TP_C::LeftHandIK' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, PrevWeaponPoseSnapshot) == 0x006A20, "Member 'UABP_Human_TP_C::PrevWeaponPoseSnapshot' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, PrevPoseAlpha) == 0x006A60, "Member 'UABP_Human_TP_C::PrevPoseAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, PhysicsLegs) == 0x006A64, "Member 'UABP_Human_TP_C::PhysicsLegs' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, FEATURE_CA_SKILLFUL_KILLS) == 0x006A68, "Member 'UABP_Human_TP_C::FEATURE_CA_SKILLFUL_KILLS' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DidSkillfulKillsMontagePlayed) == 0x006A69, "Member 'UABP_Human_TP_C::DidSkillfulKillsMontagePlayed' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, BodyPart) == 0x006A6A, "Member 'UABP_Human_TP_C::BodyPart' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, HitDirection) == 0x006A6C, "Member 'UABP_Human_TP_C::HitDirection' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, SelectedDeathAnim) == 0x006A70, "Member 'UABP_Human_TP_C::SelectedDeathAnim' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathDownedBack) == 0x006A78, "Member 'UABP_Human_TP_C::DeathDownedBack' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathDownedLeft) == 0x006A80, "Member 'UABP_Human_TP_C::DeathDownedLeft' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathDownedFwd) == 0x006A88, "Member 'UABP_Human_TP_C::DeathDownedFwd' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathDownedRight) == 0x006A90, "Member 'UABP_Human_TP_C::DeathDownedRight' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathStandBack) == 0x006A98, "Member 'UABP_Human_TP_C::DeathStandBack' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathStandLeft) == 0x006AA0, "Member 'UABP_Human_TP_C::DeathStandLeft' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathStandFwd) == 0x006AA8, "Member 'UABP_Human_TP_C::DeathStandFwd' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathStandRight) == 0x006AB0, "Member 'UABP_Human_TP_C::DeathStandRight' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathZGFlyBack) == 0x006AB8, "Member 'UABP_Human_TP_C::DeathZGFlyBack' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathZGFlyLeft) == 0x006AC0, "Member 'UABP_Human_TP_C::DeathZGFlyLeft' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathZGFlyRight) == 0x006AC8, "Member 'UABP_Human_TP_C::DeathZGFlyRight' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathZGFlyFwd) == 0x006AD0, "Member 'UABP_Human_TP_C::DeathZGFlyFwd' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathCrouchBack) == 0x006AD8, "Member 'UABP_Human_TP_C::DeathCrouchBack' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathCrouchLeft) == 0x006AE0, "Member 'UABP_Human_TP_C::DeathCrouchLeft' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathCrouchFwd) == 0x006AE8, "Member 'UABP_Human_TP_C::DeathCrouchFwd' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathCrouchRight) == 0x006AF0, "Member 'UABP_Human_TP_C::DeathCrouchRight' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathStandHeadBack) == 0x006AF8, "Member 'UABP_Human_TP_C::DeathStandHeadBack' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathStandHeadLeft) == 0x006B00, "Member 'UABP_Human_TP_C::DeathStandHeadLeft' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathStandHeadRight) == 0x006B08, "Member 'UABP_Human_TP_C::DeathStandHeadRight' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathStandHeadFwd) == 0x006B10, "Member 'UABP_Human_TP_C::DeathStandHeadFwd' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, IsDead) == 0x006B18, "Member 'UABP_Human_TP_C::IsDead' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, RootBoneRotationToCharacterRotationDelta) == 0x006B1C, "Member 'UABP_Human_TP_C::RootBoneRotationToCharacterRotationDelta' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, IsDownedLocomotion) == 0x006B28, "Member 'UABP_Human_TP_C::IsDownedLocomotion' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, Weapon_Class) == 0x006B29, "Member 'UABP_Human_TP_C::Weapon_Class' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathExplosionBack) == 0x006B30, "Member 'UABP_Human_TP_C::DeathExplosionBack' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathExplosionLeft) == 0x006B38, "Member 'UABP_Human_TP_C::DeathExplosionLeft' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathExplosionRight) == 0x006B40, "Member 'UABP_Human_TP_C::DeathExplosionRight' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathExplosionFwd) == 0x006B48, "Member 'UABP_Human_TP_C::DeathExplosionFwd' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, CanPlayCurseLowHealth) == 0x006B50, "Member 'UABP_Human_TP_C::CanPlayCurseLowHealth' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathBBQ_Back) == 0x006B58, "Member 'UABP_Human_TP_C::DeathBBQ_Back' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathBBQ_Left) == 0x006B60, "Member 'UABP_Human_TP_C::DeathBBQ_Left' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathBBQ_Right) == 0x006B68, "Member 'UABP_Human_TP_C::DeathBBQ_Right' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_C, DeathBBQ_Fwd) == 0x006B70, "Member 'UABP_Human_TP_C::DeathBBQ_Fwd' has a wrong offset!");

}

