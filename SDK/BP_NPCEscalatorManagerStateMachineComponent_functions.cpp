#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPCEscalatorManagerStateMachineComponent

#include "Basic.hpp"

#include "BP_NPCEscalatorManagerStateMachineComponent_classes.hpp"
#include "BP_NPCEscalatorManagerStateMachineComponent_parameters.hpp"


namespace SDK
{

// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.EventDispatcherOnNPCEscalatorAcquiresTarget__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::EventDispatcherOnNPCEscalatorAcquiresTarget__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "EventDispatcherOnNPCEscalatorAcquiresTarget__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.ExecuteUbergraph_BP_NPCEscalatorManagerStateMachineComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::ExecuteUbergraph_BP_NPCEscalatorManagerStateMachineComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "ExecuteUbergraph_BP_NPCEscalatorManagerStateMachineComponent");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_ExecuteUbergraph_BP_NPCEscalatorManagerStateMachineComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "ReceiveTick");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.EventOnEscalatorDeath
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACACharacter*                     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectSpec              Death_gameplay_effect_spec                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   Damage_magnitude                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FNetworkedHit                    Networked_hit                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// class AActor*                           Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::EventOnEscalatorDeath(class ACACharacter* Character, const struct FGameplayEffectSpec& Death_gameplay_effect_spec, float Damage_magnitude, const struct FNetworkedHit& Networked_hit, class AActor* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "EventOnEscalatorDeath");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_EventOnEscalatorDeath Parms{};

	Parms.Character = Character;
	Parms.Death_gameplay_effect_spec = std::move(Death_gameplay_effect_spec);
	Parms.Damage_magnitude = Damage_magnitude;
	Parms.Networked_hit = std::move(Networked_hit);
	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.OnEscalatorAreaActorBeginOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::OnEscalatorAreaActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "OnEscalatorAreaActorBeginOverlap");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_OnEscalatorAreaActorBeginOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.OnEscalatorAreaActorEndOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::OnEscalatorAreaActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "OnEscalatorAreaActorEndOverlap");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_OnEscalatorAreaActorEndOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.IsOnEnemyNPCTeam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_NPCEscalatorManagerStateMachineComponent_C::IsOnEnemyNPCTeam(const class AActor*& SourceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "IsOnEnemyNPCTeam");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_IsOnEnemyNPCTeam Parms{};

	Parms.SourceActor = SourceActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.UpdateEscalatorHighlightsForViewer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACACharacter_MainPlayer*          PlayerCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AreHighlightsVisible                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_NPCEscalatorManagerStateMachineComponent_C::UpdateEscalatorHighlightsForViewer(class ACACharacter_MainPlayer* PlayerCharacter, bool AreHighlightsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "UpdateEscalatorHighlightsForViewer");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_UpdateEscalatorHighlightsForViewer Parms{};

	Parms.PlayerCharacter = PlayerCharacter;
	Parms.AreHighlightsVisible = AreHighlightsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.Get Enemy Target Manager Component
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceNPC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UCAComponent_NPCTargetManager*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UCAComponent_NPCTargetManager* UBP_NPCEscalatorManagerStateMachineComponent_C::Get_Enemy_Target_Manager_Component(class AActor* SourceNPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "Get Enemy Target Manager Component");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_Get_Enemy_Target_Manager_Component Parms{};

	Parms.SourceNPC = SourceNPC;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.RemoveEscalationTagsAndUnregisterEscalators
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::RemoveEscalationTagsAndUnregisterEscalators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "RemoveEscalationTagsAndUnregisterEscalators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.UnregisterEscalatorHighlights
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Highlightactor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::UnregisterEscalatorHighlights(class AActor* Highlightactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "UnregisterEscalatorHighlights");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_UnregisterEscalatorHighlights Parms{};

	Parms.Highlightactor = Highlightactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.DrawDebugInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     LineColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Thickness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::DrawDebugInfo(const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "DrawDebugInfo");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_DrawDebugInfo Parms{};

	Parms.LineColor = std::move(LineColor);
	Parms.Duration = Duration;
	Parms.Thickness = Thickness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.UnregisterAllEscalatorHighlights
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::UnregisterAllEscalatorHighlights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "UnregisterAllEscalatorHighlights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.RegisterEscalationActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EscalationActor                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::RegisterEscalationActor(const class AActor*& EscalationActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "RegisterEscalationActor");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_RegisterEscalationActor Parms{};

	Parms.EscalationActor = EscalationActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.UnregisterEscalationActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EscalationActor                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::UnregisterEscalationActor(const class AActor*& EscalationActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "UnregisterEscalationActor");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_UnregisterEscalationActor Parms{};

	Parms.EscalationActor = EscalationActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.OnDeescalatedStart
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::OnDeescalatedStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "OnDeescalatedStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.UpdateHighlightsForEscalator
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AreHighlightsVisible                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           Actor_to_highlight                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::UpdateHighlightsForEscalator(bool AreHighlightsVisible, class AActor* Actor_to_highlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "UpdateHighlightsForEscalator");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_UpdateHighlightsForEscalator Parms{};

	Parms.AreHighlightsVisible = AreHighlightsVisible;
	Parms.Actor_to_highlight = Actor_to_highlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.ResetEscalatorManager
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::ResetEscalatorManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "ResetEscalatorManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.OnIdleStart
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::OnIdleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "OnIdleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.CheckForEscalatorsLosingEscalatorCondition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::CheckForEscalatorsLosingEscalatorCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "CheckForEscalatorsLosingEscalatorCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.OnResetStateMachine
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NPCEscalatorManagerStateMachineComponent_C::OnResetStateMachine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "OnResetStateMachine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.Register For NPCSenses Player Callback
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NPCActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::Register_For_NPCSenses_Player_Callback(class AActor* NPCActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "Register For NPCSenses Player Callback");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_Register_For_NPCSenses_Player_Callback Parms{};

	Parms.NPCActor = NPCActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.OnNPCAdquiresNewTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::OnNPCAdquiresNewTarget(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "OnNPCAdquiresNewTarget");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_OnNPCAdquiresNewTarget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.AllowHighlightingFromStatusTag
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_NPCEscalatorManagerStateMachineComponent_C::AllowHighlightingFromStatusTag(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "AllowHighlightingFromStatusTag");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_AllowHighlightingFromStatusTag Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.SecurityStateChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCAFiniteState*                   State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCEscalatorManagerStateMachineComponent_C::SecurityStateChanged(class UCAFiniteState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "SecurityStateChanged");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_SecurityStateChanged Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCEscalatorManagerStateMachineComponent.BP_NPCEscalatorManagerStateMachineComponent_C.CollectDebugInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FCADebugTextCollector            InCollector                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCADebugTextCollector            OutCollector                                           (Parm, OutParm)

void UBP_NPCEscalatorManagerStateMachineComponent_C::CollectDebugInfo(const struct FCADebugTextCollector& InCollector, struct FCADebugTextCollector* OutCollector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCEscalatorManagerStateMachineComponent_C", "CollectDebugInfo");

	Params::BP_NPCEscalatorManagerStateMachineComponent_C_CollectDebugInfo Parms{};

	Parms.InCollector = std::move(InCollector);

	UObject::ProcessEvent(Func, &Parms);

	if (OutCollector != nullptr)
		*OutCollector = std::move(Parms.OutCollector);
}

}

