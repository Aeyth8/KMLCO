#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FootstepComponent

#include "Basic.hpp"

#include "Keaton_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CAAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_FootstepComponent.BP_FootstepComponent_C.OnPlayFootstep
// 0x0360 (0x0360 - 0x0000)
struct BP_FootstepComponent_C_OnPlayFootstep final
{
public:
	class ACACharacter*                           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAPlayerMovementMode                         Movement_mode;                                     // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioFootstepTriggerDef             Trigger;                                           // 0x0010(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHitResult                             Hit_result;                                        // 0x0030(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Caspr_zone;                                        // 0x00C0(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_first_person;                                   // 0x00C4(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x00C5(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          IsMagbootTP;                                       // 0x00C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EZoneType                                     CallFunc_GetCASPrZoneInfoFromID_type;              // 0x00C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCAAudioStateValueType                 CallFunc_GetCASPrZoneInfoFromID_size;              // 0x00C8(0x0004)(NoDestructor)
	float                                         CallFunc_GetCASPrZoneInfoFromID_volume;            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCASPrZoneInfoFromID_ReturnValue;       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EZoneType                                     CallFunc_GetCASPrZoneInfoFromID_type_1;            // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioStateValueType                 CallFunc_GetCASPrZoneInfoFromID_size_1;            // 0x00D4(0x0004)(NoDestructor)
	float                                         CallFunc_GetCASPrZoneInfoFromID_volume_1;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCASPrZoneInfoFromID_ReturnValue_1;     // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue;               // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue_1;             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACACharacter_MainPlayer*                K2Node_DynamicCast_AsCACharacter_Main_Player;      // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACACharacter_MainPlayer*                K2Node_DynamicCast_AsCACharacter_Main_Player_1;    // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x020B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x020E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x020F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_213[0x1];                                      // 0x0213(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable;                            // 0x0214(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance;              // 0x0228(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success;                   // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CompareHashIsEqual_ReturnValue;           // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23A[0x2];                                      // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_1;                          // 0x023C(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_1;            // 0x0250(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_1;                 // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_2;                          // 0x0264(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_2;            // 0x0278(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_2;                 // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_3;                          // 0x028C(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_3;            // 0x02A0(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_3;                 // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CompareHashIsEqual_ReturnValue_1;         // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_4;                          // 0x02B4(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_4;            // 0x02C8(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_4;                 // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_5;                          // 0x02DC(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_5;            // 0x02F0(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_5;                 // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_6;                          // 0x0304(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_7;                          // 0x0318(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_6;            // 0x0330(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_6;                 // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_7;            // 0x0348(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_7;                 // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FootstepComponent_C_OnPlayFootstep) == 0x000008, "Wrong alignment on BP_FootstepComponent_C_OnPlayFootstep");
static_assert(sizeof(BP_FootstepComponent_C_OnPlayFootstep) == 0x000360, "Wrong size on BP_FootstepComponent_C_OnPlayFootstep");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Character) == 0x000000, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Character' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Movement_mode) == 0x000008, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Movement_mode' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Trigger) == 0x000010, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Trigger' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Hit_result) == 0x000030, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Hit_result' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Caspr_zone) == 0x0000C0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Caspr_zone' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Is_first_person) == 0x0000C4, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Is_first_person' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, ReturnValue) == 0x0000C5, "Member 'BP_FootstepComponent_C_OnPlayFootstep::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, IsMagbootTP) == 0x0000C6, "Member 'BP_FootstepComponent_C_OnPlayFootstep::IsMagbootTP' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetCASPrZoneInfoFromID_type) == 0x0000C7, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetCASPrZoneInfoFromID_type' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetCASPrZoneInfoFromID_size) == 0x0000C8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetCASPrZoneInfoFromID_size' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetCASPrZoneInfoFromID_volume) == 0x0000CC, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetCASPrZoneInfoFromID_volume' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetCASPrZoneInfoFromID_ReturnValue) == 0x0000D0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetCASPrZoneInfoFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetCASPrZoneInfoFromID_type_1) == 0x0000D1, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetCASPrZoneInfoFromID_type_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetCASPrZoneInfoFromID_size_1) == 0x0000D4, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetCASPrZoneInfoFromID_size_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetCASPrZoneInfoFromID_volume_1) == 0x0000D8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetCASPrZoneInfoFromID_volume_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetCASPrZoneInfoFromID_ReturnValue_1) == 0x0000DC, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetCASPrZoneInfoFromID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetSurfaceType_ReturnValue) == 0x0000DD, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_bBlockingHit) == 0x0000DE, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000DF, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_Time) == 0x0000E0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_Distance) == 0x0000E4, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_Location) == 0x0000E8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F4, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_Normal) == 0x000100, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_ImpactNormal) == 0x00010C, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_PhysMat) == 0x000118, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_HitActor) == 0x000120, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_HitComponent) == 0x000128, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_HitBoneName) == 0x000130, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_HitItem) == 0x00013C, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_ElementIndex) == 0x000140, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_FaceIndex) == 0x000144, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_TraceStart) == 0x000148, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_TraceEnd) == 0x000154, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_GetSurfaceType_ReturnValue_1) == 0x000160, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_GetSurfaceType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_IsValid_ReturnValue) == 0x000161, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000162, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000163, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_Time_1) == 0x000164, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_Distance_1) == 0x000168, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_Location_1) == 0x00016C, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000178, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_Normal_1) == 0x000184, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000190, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_PhysMat_1) == 0x0001A0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_HitActor_1) == 0x0001A8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_HitComponent_1) == 0x0001B0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_HitBoneName_1) == 0x0001B8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_HitItem_1) == 0x0001C4, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_ElementIndex_1) == 0x0001C8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_FaceIndex_1) == 0x0001CC, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_TraceStart_1) == 0x0001D0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BreakHitResult_TraceEnd_1) == 0x0001DC, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_IsValid_ReturnValue_1) == 0x0001E8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, K2Node_DynamicCast_AsCACharacter_Main_Player) == 0x0001F0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::K2Node_DynamicCast_AsCACharacter_Main_Player' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, K2Node_DynamicCast_AsCACharacter_Main_Player_1) == 0x000200, "Member 'BP_FootstepComponent_C_OnPlayFootstep::K2Node_DynamicCast_AsCACharacter_Main_Player_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, K2Node_DynamicCast_bSuccess_1) == 0x000208, "Member 'BP_FootstepComponent_C_OnPlayFootstep::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000209, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00020A, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00020B, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BooleanOR_ReturnValue) == 0x00020C, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00020D, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BooleanOR_ReturnValue_1) == 0x00020E, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00020F, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000210, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BooleanOR_ReturnValue_2) == 0x000211, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_BooleanOR_ReturnValue_3) == 0x000212, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Temp_delegate_Variable) == 0x000214, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_playback_instance) == 0x000228, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_playback_instance' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_play_success) == 0x000238, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_play_success' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_CompareHashIsEqual_ReturnValue) == 0x000239, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_CompareHashIsEqual_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Temp_delegate_Variable_1) == 0x00023C, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_playback_instance_1) == 0x000250, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_playback_instance_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_play_success_1) == 0x000260, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_play_success_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Temp_delegate_Variable_2) == 0x000264, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_playback_instance_2) == 0x000278, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_playback_instance_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_play_success_2) == 0x000288, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_play_success_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Temp_delegate_Variable_3) == 0x00028C, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_playback_instance_3) == 0x0002A0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_playback_instance_3' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_play_success_3) == 0x0002B0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_play_success_3' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_CompareHashIsEqual_ReturnValue_1) == 0x0002B1, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_CompareHashIsEqual_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Temp_delegate_Variable_4) == 0x0002B4, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Temp_delegate_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_playback_instance_4) == 0x0002C8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_playback_instance_4' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_play_success_4) == 0x0002D8, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_play_success_4' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Temp_delegate_Variable_5) == 0x0002DC, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Temp_delegate_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_playback_instance_5) == 0x0002F0, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_playback_instance_5' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_play_success_5) == 0x000300, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_play_success_5' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Temp_delegate_Variable_6) == 0x000304, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Temp_delegate_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, Temp_delegate_Variable_7) == 0x000318, "Member 'BP_FootstepComponent_C_OnPlayFootstep::Temp_delegate_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_playback_instance_6) == 0x000330, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_playback_instance_6' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_play_success_6) == 0x000340, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_play_success_6' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_playback_instance_7) == 0x000348, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_playback_instance_7' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnPlayFootstep, CallFunc_PlayEvent_play_success_7) == 0x000358, "Member 'BP_FootstepComponent_C_OnPlayFootstep::CallFunc_PlayEvent_play_success_7' has a wrong offset!");

// Function BP_FootstepComponent.BP_FootstepComponent_C.OnJumpLanding
// 0x0188 (0x0188 - 0x0000)
struct BP_FootstepComponent_C_OnJumpLanding final
{
public:
	class ACACharacter*                           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAPlayerMovementMode                         Movement_mode;                                     // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAPlayerMovementMode                         Previous_movement_mode;                            // 0x0009(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit_result;                                        // 0x000C(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Pre_land_speed;                                    // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_first_person;                                   // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x00A1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPhysicalSurface                              TP_Phys_Surface_Type;                              // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Jump_Landing_Footstep_Event_Max_Distance;          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCAAudioEventType                      FP_Jump_Landing_SFX_Event;                         // 0x00A8(0x0004)(Edit, BlueprintVisible, NoDestructor)
	struct FCAAudioEventType                      TP_Initial_Jump_Landing_SFX_Event;                 // 0x00AC(0x0004)(Edit, BlueprintVisible, NoDestructor)
	struct FCAAudioEventType                      TP_Jump_Landing_SFX_Event;                         // 0x00B0(0x0004)(Edit, BlueprintVisible, NoDestructor)
	EPhysicalSurface                              FP_Phys_Surface_Type;                              // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioSwitchValueType                Temp_struct_Variable;                              // 0x00B8(0x0004)(NoDestructor)
	struct FCAAudioSwitchValueType                CallFunc_ConvertSurfaceToAudio_Switch;             // 0x00BC(0x0004)(NoDestructor)
	struct FCAAudioBankNameType                   CallFunc_ConvertSurfaceToAudio_FootstepBank;       // 0x00C0(0x0004)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue;               // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACACharacter_MainPlayer*                K2Node_DynamicCast_AsCACharacter_Main_Player;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FCAAudioSwitchValueType                CallFunc_ConvertSurfaceToAudio_Switch_1;           // 0x00DC(0x0004)(NoDestructor)
	struct FCAAudioBankNameType                   CallFunc_ConvertSurfaceToAudio_FootstepBank_1;     // 0x00E0(0x0004)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x00E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable;                            // 0x00E8(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance;              // 0x0100(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success;                   // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_1;                          // 0x0114(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_1;            // 0x0128(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_1;                 // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCAAudioEventType& Event_name)> Temp_delegate_Variable_2;                          // 0x013C(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue_1;             // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0157(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioSwitchValueType                Temp_struct_Variable_1;                            // 0x015C(0x0004)(NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioSwitchValueType                Temp_struct_Variable_2;                            // 0x0164(0x0004)(NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioSwitchValueType                K2Node_Select_Default_1;                           // 0x016C(0x0004)(NoDestructor)
	struct FCAAudioPlaybackInstance               CallFunc_PlayEvent_playback_instance_2;            // 0x0170(0x0010)()
	bool                                          CallFunc_PlayEvent_play_success_2;                 // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioSwitchValueType                K2Node_Select_Default_2;                           // 0x0184(0x0004)(NoDestructor)
};
static_assert(alignof(BP_FootstepComponent_C_OnJumpLanding) == 0x000008, "Wrong alignment on BP_FootstepComponent_C_OnJumpLanding");
static_assert(sizeof(BP_FootstepComponent_C_OnJumpLanding) == 0x000188, "Wrong size on BP_FootstepComponent_C_OnJumpLanding");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Character) == 0x000000, "Member 'BP_FootstepComponent_C_OnJumpLanding::Character' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Movement_mode) == 0x000008, "Member 'BP_FootstepComponent_C_OnJumpLanding::Movement_mode' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Previous_movement_mode) == 0x000009, "Member 'BP_FootstepComponent_C_OnJumpLanding::Previous_movement_mode' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Hit_result) == 0x00000C, "Member 'BP_FootstepComponent_C_OnJumpLanding::Hit_result' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Pre_land_speed) == 0x00009C, "Member 'BP_FootstepComponent_C_OnJumpLanding::Pre_land_speed' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Is_first_person) == 0x0000A0, "Member 'BP_FootstepComponent_C_OnJumpLanding::Is_first_person' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, ReturnValue) == 0x0000A1, "Member 'BP_FootstepComponent_C_OnJumpLanding::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, TP_Phys_Surface_Type) == 0x0000A2, "Member 'BP_FootstepComponent_C_OnJumpLanding::TP_Phys_Surface_Type' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Jump_Landing_Footstep_Event_Max_Distance) == 0x0000A4, "Member 'BP_FootstepComponent_C_OnJumpLanding::Jump_Landing_Footstep_Event_Max_Distance' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, FP_Jump_Landing_SFX_Event) == 0x0000A8, "Member 'BP_FootstepComponent_C_OnJumpLanding::FP_Jump_Landing_SFX_Event' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, TP_Initial_Jump_Landing_SFX_Event) == 0x0000AC, "Member 'BP_FootstepComponent_C_OnJumpLanding::TP_Initial_Jump_Landing_SFX_Event' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, TP_Jump_Landing_SFX_Event) == 0x0000B0, "Member 'BP_FootstepComponent_C_OnJumpLanding::TP_Jump_Landing_SFX_Event' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, FP_Phys_Surface_Type) == 0x0000B4, "Member 'BP_FootstepComponent_C_OnJumpLanding::FP_Phys_Surface_Type' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_bool_Variable) == 0x0000B5, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_struct_Variable) == 0x0000B8, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_ConvertSurfaceToAudio_Switch) == 0x0000BC, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_ConvertSurfaceToAudio_Switch' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_ConvertSurfaceToAudio_FootstepBank) == 0x0000C0, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_ConvertSurfaceToAudio_FootstepBank' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C4, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000C5, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000C6, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_BooleanOR_ReturnValue) == 0x0000C7, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000C8, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_BooleanOR_ReturnValue_1) == 0x0000C9, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x0000CA, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_Not_PreBool_ReturnValue) == 0x0000CB, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x0000CC, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_BooleanOR_ReturnValue_2) == 0x0000CD, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_BooleanOR_ReturnValue_3) == 0x0000CE, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_GetSurfaceType_ReturnValue) == 0x0000CF, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_GetSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, K2Node_DynamicCast_AsCACharacter_Main_Player) == 0x0000D0, "Member 'BP_FootstepComponent_C_OnJumpLanding::K2Node_DynamicCast_AsCACharacter_Main_Player' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'BP_FootstepComponent_C_OnJumpLanding::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000D9, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0000DA, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000DB, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_ConvertSurfaceToAudio_Switch_1) == 0x0000DC, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_ConvertSurfaceToAudio_Switch_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_ConvertSurfaceToAudio_FootstepBank_1) == 0x0000E0, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_ConvertSurfaceToAudio_FootstepBank_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x0000E4, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x0000E5, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x0000E6, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_BooleanOR_ReturnValue_4) == 0x0000E7, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_delegate_Variable) == 0x0000E8, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_BooleanOR_ReturnValue_5) == 0x0000FC, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_PlayEvent_playback_instance) == 0x000100, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_PlayEvent_playback_instance' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_PlayEvent_play_success) == 0x000110, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_PlayEvent_play_success' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_Not_PreBool_ReturnValue_1) == 0x000111, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_delegate_Variable_1) == 0x000114, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_PlayEvent_playback_instance_1) == 0x000128, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_PlayEvent_playback_instance_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_PlayEvent_play_success_1) == 0x000138, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_PlayEvent_play_success_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_delegate_Variable_2) == 0x00013C, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x000150, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_GetSurfaceType_ReturnValue_1) == 0x000151, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_GetSurfaceType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x000152, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x000153, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_BooleanOR_ReturnValue_6) == 0x000154, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_BooleanOR_ReturnValue_7) == 0x000155, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_bool_Variable_1) == 0x000156, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_bool_Variable_2) == 0x000157, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_bool_Variable_3) == 0x000158, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_struct_Variable_1) == 0x00015C, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, K2Node_Select_Default) == 0x000160, "Member 'BP_FootstepComponent_C_OnJumpLanding::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_struct_Variable_2) == 0x000164, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, Temp_bool_Variable_4) == 0x000168, "Member 'BP_FootstepComponent_C_OnJumpLanding::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, K2Node_Select_Default_1) == 0x00016C, "Member 'BP_FootstepComponent_C_OnJumpLanding::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_PlayEvent_playback_instance_2) == 0x000170, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_PlayEvent_playback_instance_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, CallFunc_PlayEvent_play_success_2) == 0x000180, "Member 'BP_FootstepComponent_C_OnJumpLanding::CallFunc_PlayEvent_play_success_2' has a wrong offset!");
static_assert(offsetof(BP_FootstepComponent_C_OnJumpLanding, K2Node_Select_Default_2) == 0x000184, "Member 'BP_FootstepComponent_C_OnJumpLanding::K2Node_Select_Default_2' has a wrong offset!");

}

