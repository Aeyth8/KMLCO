#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPUI_HUD_SecondaryMessageDisguisedImage

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPUI_HUD_SecondaryMessageDisguisedImage.BPUI_HUD_SecondaryMessageDisguisedImage_C.ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage
// 0x0020 (0x0020 - 0x0000)
struct BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0014)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage) == 0x000008, "Wrong alignment on BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage");
static_assert(sizeof(BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage) == 0x000020, "Wrong size on BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage, EntryPoint) == 0x000000, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_ExecuteUbergraph_BPUI_HUD_SecondaryMessageDisguisedImage::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BPUI_HUD_SecondaryMessageDisguisedImage.BPUI_HUD_SecondaryMessageDisguisedImage_C.PlayFadeAnimation
// 0x0008 (0x0008 - 0x0000)
struct BPUI_HUD_SecondaryMessageDisguisedImage_C_PlayFadeAnimation final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPUI_HUD_SecondaryMessageDisguisedImage_C_PlayFadeAnimation) == 0x000008, "Wrong alignment on BPUI_HUD_SecondaryMessageDisguisedImage_C_PlayFadeAnimation");
static_assert(sizeof(BPUI_HUD_SecondaryMessageDisguisedImage_C_PlayFadeAnimation) == 0x000008, "Wrong size on BPUI_HUD_SecondaryMessageDisguisedImage_C_PlayFadeAnimation");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_PlayFadeAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_PlayFadeAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BPUI_HUD_SecondaryMessageDisguisedImage.BPUI_HUD_SecondaryMessageDisguisedImage_C.GetFormattedCharacterName
// 0x0098 (0x0098 - 0x0000)
struct BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName final
{
public:
	class FText                                   Result;                                            // 0x0000(0x0018)(Parm, OutParm)
	class FText                                   CallFunc_MakeTextFromCAText_text;                  // 0x0018(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0080(0x0018)()
};
static_assert(alignof(BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName) == 0x000008, "Wrong alignment on BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName");
static_assert(sizeof(BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName) == 0x000098, "Wrong size on BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName, Result) == 0x000000, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName::Result' has a wrong offset!");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName, CallFunc_MakeTextFromCAText_text) == 0x000018, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName::CallFunc_MakeTextFromCAText_text' has a wrong offset!");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName, K2Node_MakeArray_Array) == 0x000070, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName, CallFunc_Format_ReturnValue) == 0x000080, "Member 'BPUI_HUD_SecondaryMessageDisguisedImage_C_GetFormattedCharacterName::CallFunc_Format_ReturnValue' has a wrong offset!");

}

