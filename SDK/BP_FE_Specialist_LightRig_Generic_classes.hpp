#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FE_Specialist_LightRig_Generic

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Keaton_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FE_Specialist_LightRig_Generic.BP_FE_Specialist_LightRig_Generic_C
// 0x0048 (0x02A8 - 0x0260)
class ABP_FE_Specialist_LightRig_Generic_C final : public ACASpecialistFrontEndLighting
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    FillLightLeft;                                     // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLeft;                                           // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimRight;                                          // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    FillLightRight;                                    // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight;                                          // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LightParent;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LightRotationPerSec;                               // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_FE_Specialist_LightRig_Generic(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnIdInLineUpChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FE_Specialist_LightRig_Generic_C">();
	}
	static class ABP_FE_Specialist_LightRig_Generic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FE_Specialist_LightRig_Generic_C>();
	}
};
static_assert(alignof(ABP_FE_Specialist_LightRig_Generic_C) == 0x000008, "Wrong alignment on ABP_FE_Specialist_LightRig_Generic_C");
static_assert(sizeof(ABP_FE_Specialist_LightRig_Generic_C) == 0x0002A8, "Wrong size on ABP_FE_Specialist_LightRig_Generic_C");
static_assert(offsetof(ABP_FE_Specialist_LightRig_Generic_C, UberGraphFrame) == 0x000260, "Member 'ABP_FE_Specialist_LightRig_Generic_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FE_Specialist_LightRig_Generic_C, FillLightLeft) == 0x000268, "Member 'ABP_FE_Specialist_LightRig_Generic_C::FillLightLeft' has a wrong offset!");
static_assert(offsetof(ABP_FE_Specialist_LightRig_Generic_C, RimLeft) == 0x000270, "Member 'ABP_FE_Specialist_LightRig_Generic_C::RimLeft' has a wrong offset!");
static_assert(offsetof(ABP_FE_Specialist_LightRig_Generic_C, RimRight) == 0x000278, "Member 'ABP_FE_Specialist_LightRig_Generic_C::RimRight' has a wrong offset!");
static_assert(offsetof(ABP_FE_Specialist_LightRig_Generic_C, FillLightRight) == 0x000280, "Member 'ABP_FE_Specialist_LightRig_Generic_C::FillLightRight' has a wrong offset!");
static_assert(offsetof(ABP_FE_Specialist_LightRig_Generic_C, KeyLight) == 0x000288, "Member 'ABP_FE_Specialist_LightRig_Generic_C::KeyLight' has a wrong offset!");
static_assert(offsetof(ABP_FE_Specialist_LightRig_Generic_C, LightParent) == 0x000290, "Member 'ABP_FE_Specialist_LightRig_Generic_C::LightParent' has a wrong offset!");
static_assert(offsetof(ABP_FE_Specialist_LightRig_Generic_C, LightRotationPerSec) == 0x000298, "Member 'ABP_FE_Specialist_LightRig_Generic_C::LightRotationPerSec' has a wrong offset!");

}

