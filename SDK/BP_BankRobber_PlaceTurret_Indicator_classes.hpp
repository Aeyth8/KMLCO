#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BankRobber_PlaceTurret_Indicator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C
// 0x01F0 (0x0448 - 0x0258)
class ABP_BankRobber_PlaceTurret_Indicator_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCASkeletalMeshComponent_Equipment*     PreviewGun;                                        // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCASkeletalMeshComponent*               PreviewLegs;                                       // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Half_Height;                                       // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Distance;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_Character_BankRobber_C*             Bank_Robber;                                       // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors_to_Ignore;                                  // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FVector>                        Feet_Offsets;                                      // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Feet_Radii;                                        // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min_Num_Feet_Required_To_Be_In_Contact;            // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Vertical_Offset;                                   // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Profile_Name;                                      // 0x02B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Hit_Normal;                                 // 0x02C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Hit_Normal_Dot_Product_Minimum;             // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Place;                                         // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Use_Wall_Variation;                                // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x02D4(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Has_Hit;                                           // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         RestrictedClasses;                                 // 0x0368(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FVector                                Indicator_Position;                                // 0x0378(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Indicator_Rotation;                                // 0x0384(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisplayPlacementDebug;                             // 0x0390(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastValidPosition;                                 // 0x0394(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastValidRotation;                                 // 0x03A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         StickyDistance;                                    // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastUseWallVariation;                              // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseLastValidSpot;                                  // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2[0x2];                                      // 0x03B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             LastValidHit;                                      // 0x03B4(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BP_BankRobber_PlaceTurret_Indicator(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Calculate_Turret_Position_and_Rotation_from_Hit(const struct FHitResult& Hit_0, bool UseWallTurretVariation, struct FVector* Position, struct FRotator* Rotation);
	void Find_Turret_Placement_From_Pawn_View(bool* UseWallVariation, struct FVector* IndicatorPosition, struct FRotator* IndicatorRoation, struct FHitResult* TraceHit);
	void Validate_Turret_Placement(bool UseWallVariation, const struct FVector& IndicatorLocation, const struct FRotator& IndicatorRotation, const struct FHitResult& TraceHit, bool* CanPlace);
	void GetPlacementTargetData(struct FHitResult* Hit_0, bool* CanPlace, bool* UseWallVariation);
	void IsPlaceable(bool* CanPlace);
	void DebugDrawPlacementFailure(const class FString& Reason);
	void SetBalancingVariables();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BankRobber_PlaceTurret_Indicator_C">();
	}
	static class ABP_BankRobber_PlaceTurret_Indicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BankRobber_PlaceTurret_Indicator_C>();
	}
};
static_assert(alignof(ABP_BankRobber_PlaceTurret_Indicator_C) == 0x000008, "Wrong alignment on ABP_BankRobber_PlaceTurret_Indicator_C");
static_assert(sizeof(ABP_BankRobber_PlaceTurret_Indicator_C) == 0x000448, "Wrong size on ABP_BankRobber_PlaceTurret_Indicator_C");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, UberGraphFrame) == 0x000258, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, PreviewGun) == 0x000260, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::PreviewGun' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, PreviewLegs) == 0x000268, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::PreviewLegs' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Half_Height) == 0x000278, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Half_Height' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Max_Distance) == 0x00027C, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Max_Distance' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Bank_Robber) == 0x000280, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Bank_Robber' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Actors_to_Ignore) == 0x000288, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Actors_to_Ignore' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Feet_Offsets) == 0x000298, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Feet_Offsets' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Feet_Radii) == 0x0002A8, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Feet_Radii' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Min_Num_Feet_Required_To_Be_In_Contact) == 0x0002AC, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Min_Num_Feet_Required_To_Be_In_Contact' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Vertical_Offset) == 0x0002B0, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Vertical_Offset' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Profile_Name) == 0x0002B4, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Profile_Name' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Target_Hit_Normal) == 0x0002C0, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Target_Hit_Normal' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Target_Hit_Normal_Dot_Product_Minimum) == 0x0002CC, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Target_Hit_Normal_Dot_Product_Minimum' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Can_Place) == 0x0002D0, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Can_Place' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Use_Wall_Variation) == 0x0002D1, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Use_Wall_Variation' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Hit) == 0x0002D4, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Hit' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Has_Hit) == 0x000364, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Has_Hit' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, RestrictedClasses) == 0x000368, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::RestrictedClasses' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Indicator_Position) == 0x000378, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Indicator_Position' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, Indicator_Rotation) == 0x000384, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::Indicator_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, DisplayPlacementDebug) == 0x000390, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::DisplayPlacementDebug' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, LastValidPosition) == 0x000394, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::LastValidPosition' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, LastValidRotation) == 0x0003A0, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::LastValidRotation' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, StickyDistance) == 0x0003AC, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::StickyDistance' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, LastUseWallVariation) == 0x0003B0, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::LastUseWallVariation' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, UseLastValidSpot) == 0x0003B1, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::UseLastValidSpot' has a wrong offset!");
static_assert(offsetof(ABP_BankRobber_PlaceTurret_Indicator_C, LastValidHit) == 0x0003B4, "Member 'ABP_BankRobber_PlaceTurret_Indicator_C::LastValidHit' has a wrong offset!");

}

