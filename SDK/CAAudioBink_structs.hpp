#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CAAudioBink

#include "Basic.hpp"

#include "CAAudio_structs.hpp"


namespace SDK
{

// Enum CAAudioBink.ECAAudioBinkLocalisedConfig
// NumValues: 0x0003
enum class ECAAudioBinkLocalisedConfig : uint8
{
	None                                     = 0,
	All                                      = 1,
	ECAAudioBinkLocalisedConfig_MAX          = 2,
};

// Enum CAAudioBink.ECAAudioBinkChannelConfig
// NumValues: 0x0004
enum class ECAAudioBinkChannelConfig : uint8
{
	Mono                                     = 0,
	Stereo                                   = 1,
	SevenDotOne                              = 2,
	ECAAudioBinkChannelConfig_MAX            = 3,
};

// ScriptStruct CAAudioBink.CAAudioBinkSubtitleTimelineEntry
// 0x0020 (0x0020 - 0x0000)
struct FCAAudioBinkSubtitleTimelineEntry final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subtitle;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAudioBinkSubtitleTimelineEntry) == 0x000008, "Wrong alignment on FCAAudioBinkSubtitleTimelineEntry");
static_assert(sizeof(FCAAudioBinkSubtitleTimelineEntry) == 0x000020, "Wrong size on FCAAudioBinkSubtitleTimelineEntry");
static_assert(offsetof(FCAAudioBinkSubtitleTimelineEntry, StartFrame) == 0x000000, "Member 'FCAAudioBinkSubtitleTimelineEntry::StartFrame' has a wrong offset!");
static_assert(offsetof(FCAAudioBinkSubtitleTimelineEntry, EndFrame) == 0x000004, "Member 'FCAAudioBinkSubtitleTimelineEntry::EndFrame' has a wrong offset!");
static_assert(offsetof(FCAAudioBinkSubtitleTimelineEntry, Subtitle) == 0x000008, "Member 'FCAAudioBinkSubtitleTimelineEntry::Subtitle' has a wrong offset!");
static_assert(offsetof(FCAAudioBinkSubtitleTimelineEntry, Duration) == 0x000018, "Member 'FCAAudioBinkSubtitleTimelineEntry::Duration' has a wrong offset!");

// ScriptStruct CAAudioBink.CAAudioBinkTimelineEntry
// 0x0010 (0x0010 - 0x0000)
struct FCAAudioBinkTimelineEntry final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInSeconds;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioEventType                      Event;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseGlobalObject;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAudioBinkTimelineEntry) == 0x000004, "Wrong alignment on FCAAudioBinkTimelineEntry");
static_assert(sizeof(FCAAudioBinkTimelineEntry) == 0x000010, "Wrong size on FCAAudioBinkTimelineEntry");
static_assert(offsetof(FCAAudioBinkTimelineEntry, Frame) == 0x000000, "Member 'FCAAudioBinkTimelineEntry::Frame' has a wrong offset!");
static_assert(offsetof(FCAAudioBinkTimelineEntry, TimeInSeconds) == 0x000004, "Member 'FCAAudioBinkTimelineEntry::TimeInSeconds' has a wrong offset!");
static_assert(offsetof(FCAAudioBinkTimelineEntry, Event) == 0x000008, "Member 'FCAAudioBinkTimelineEntry::Event' has a wrong offset!");
static_assert(offsetof(FCAAudioBinkTimelineEntry, UseGlobalObject) == 0x00000C, "Member 'FCAAudioBinkTimelineEntry::UseGlobalObject' has a wrong offset!");

}

