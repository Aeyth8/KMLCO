#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SecurityArea

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CAAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SecurityArea.BP_SecurityArea_C
// 0x0180 (0x0C38 - 0x0AB8)
class ABP_SecurityArea_C final : public ACASecurityArea
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCACollisionComponent*                  DefaultAreaCollision;                              // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_NPCEscalatorManagerStateMachineComponent_C* BP_NPCEscalatorManagerStateMachineComponent;       // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_VisualCampStateChange_C*            BP_VisualCampStateChange;                          // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_IngredientStateMachine_C*           BP_IngredientStateMachine;                         // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SecurityStateComponent_C*           BP_SecurityStateComponent;                         // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AmbientLightAreaComponent_C*        BP_AmbientLightAreaComponent;                      // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AreaNameTag;                                       // 0x0B00(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B0C[0x4];                                      // 0x0B0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultEmitterName;                                // 0x0B10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 PlayerDetected;                                    // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnDetected;                                        // 0x0B28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnTriggeredSecurityAlert;                          // 0x0B34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCATeamID>                      Team;                                              // 0x0B40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AlreadyPlayingSecurityStateAudio;                  // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B51[0x3];                                      // 0x0B51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResetAllowSecurityAudioTime;                       // 0x0B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCAAudioSwitchValueType>        CurrentPlayingAudioStates;                         // 0x0B58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ACACharacter_NPC*                       Npc;                                               // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnVaultBreachStarted;                              // 0x0B70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OnGlobalAnyTeamVaultHacked;                        // 0x0B7C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Security_Title;                                    // 0x0B88(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   Security_Alert_Message_Type;                       // 0x0BA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Lockdown_Message_Type;                    // 0x0BAC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Pre_Lockdown_Message_Type;                // 0x0BB8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Alert_Resolved_Message_Type;              // 0x0BC4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Recovery_Message_Type;                    // 0x0BD0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Pre_Alerted_Repeat_Message_Type;          // 0x0BDC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Pre_Recovery_Message_Type;                // 0x0BE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Heisted_Message_Type;                     // 0x0BF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Audio_Floodlight_Name;                             // 0x0C00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   Security_Alert_Stopped_Message_Type;               // 0x0C10(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Lockdown_Complete_Message;                // 0x0C1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Security_Recovery_Complete_Message;                // 0x0C28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanShowDetectedMessage;                            // 0x0C34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SecurityArea(int32 EntryPoint);
	void TryShowDetectedMessage();
	void OnDetectedActorReplicated();
	void BndEvt__BP_SecurityArea_m_ship_ai_mission_manager_K2Node_ComponentBoundEvent_8_OnMissionTriggerActivated__DelegateSignature(const struct FGameplayTag& Mission_trigger);
	void BndEvt__BP_SecurityArea_m_ship_ai_mission_manager_K2Node_ComponentBoundEvent_7_OnDetectorDetectedPlayer__DelegateSignature(class AActor* Detector, class AActor* Player);
	void BndEvt__BP_SecurityArea_m_ship_ai_mission_manager_K2Node_ComponentBoundEvent_6_OnNPCSensedPlayer__DelegateSignature(class ACACharacter_NPC* Npc_0, class AActor* Player);
	void BndEvt__m_ability_system_component_K2Node_ComponentBoundEvent_5_OnTrackedTagChange__DelegateSignature(const struct FGameplayTag& Tag, int32 Count);
	void ReceiveBeginPlay();
	void BndEvt__BP_SecurityArea_BP_SecurityStateComponent_K2Node_ComponentBoundEvent_9_EventHeisted__DelegateSignature();
	void BndEvt__BP_SecurityStateComponent_K2Node_ComponentBoundEvent_3_EventRecovery__DelegateSignature();
	void BndEvt__BP_SecurityStateComponent_K2Node_ComponentBoundEvent_4_EventLockdown__DelegateSignature();
	void BndEvt__BP_SecurityStateComponent_K2Node_ComponentBoundEvent_1_EventStandby__DelegateSignature();
	void BndEvt__BP_SecurityStateComponent_K2Node_ComponentBoundEvent_0_EventAlerted__DelegateSignature();
	void BndEvt__BP_SecurityStateComponent_K2Node_ComponentBoundEvent_2_EventAlertTime__DelegateSignature(float AlertTime);
	void UserConstructionScript();
	void Escalate();
	void Alerted();
	void OnTrackedTagChange(const struct FGameplayTag& Tag, int32 Count);
	void DrawSecurityAreaVolume(class ACASecurityArea* SecurityArea, const struct FLinearColor& LineColor);
	void DrawSameGroupAreas();
	void HideSameGroupAresDebugDraw();
	void DrawSameTypeAreas();
	void HideSameTypeAreas();
	void Audio_AutoSetGroupNameIfEmpty();
	void Play_Audio_on_Security_State_Change(const struct FCAAudioSwitchValueType& SecurityState, const TArray<struct FCAAudioEventType>& EventsToPlay, class FName ShipsVoiceTrigger, bool* TriggeredAudio);
	void AllowSecurityStateChangeToPlayAudio();
	void ShowSecurityPrimaryMessage(class FName Message_Type);
	void UpdateZoneState();
	void ActivateMissionTrigger(const struct FGameplayTag& Mission_Trigger);
	void Set_Security_Title(const struct FGameplayTag& GameplayTag);
	void StateActivatedLogToVisLog(class UCAFiniteState* State);
	void TagChangedLogToVisLog(const struct FGameplayTag& Tag, int32 Count);
	void SetAIIntoCombat();
	void UpdateZoneTag(const struct FGameplayTag& Zone_tag, int32 Count);

	void CollectDebugInfo(const struct FCADebugTextCollector& InCollector, struct FCADebugTextCollector* OutCollector) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SecurityArea_C">();
	}
	static class ABP_SecurityArea_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SecurityArea_C>();
	}
};
static_assert(alignof(ABP_SecurityArea_C) == 0x000008, "Wrong alignment on ABP_SecurityArea_C");
static_assert(sizeof(ABP_SecurityArea_C) == 0x000C38, "Wrong size on ABP_SecurityArea_C");
static_assert(offsetof(ABP_SecurityArea_C, UberGraphFrame) == 0x000AB8, "Member 'ABP_SecurityArea_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, DefaultAreaCollision) == 0x000AC0, "Member 'ABP_SecurityArea_C::DefaultAreaCollision' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Billboard) == 0x000AC8, "Member 'ABP_SecurityArea_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, DefaultSceneRoot) == 0x000AD0, "Member 'ABP_SecurityArea_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, BP_NPCEscalatorManagerStateMachineComponent) == 0x000AD8, "Member 'ABP_SecurityArea_C::BP_NPCEscalatorManagerStateMachineComponent' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, BP_VisualCampStateChange) == 0x000AE0, "Member 'ABP_SecurityArea_C::BP_VisualCampStateChange' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, BP_IngredientStateMachine) == 0x000AE8, "Member 'ABP_SecurityArea_C::BP_IngredientStateMachine' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, BP_SecurityStateComponent) == 0x000AF0, "Member 'ABP_SecurityArea_C::BP_SecurityStateComponent' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, BP_AmbientLightAreaComponent) == 0x000AF8, "Member 'ABP_SecurityArea_C::BP_AmbientLightAreaComponent' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, AreaNameTag) == 0x000B00, "Member 'ABP_SecurityArea_C::AreaNameTag' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, DefaultEmitterName) == 0x000B10, "Member 'ABP_SecurityArea_C::DefaultEmitterName' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, PlayerDetected) == 0x000B20, "Member 'ABP_SecurityArea_C::PlayerDetected' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, OnDetected) == 0x000B28, "Member 'ABP_SecurityArea_C::OnDetected' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, OnTriggeredSecurityAlert) == 0x000B34, "Member 'ABP_SecurityArea_C::OnTriggeredSecurityAlert' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Team) == 0x000B40, "Member 'ABP_SecurityArea_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, AlreadyPlayingSecurityStateAudio) == 0x000B50, "Member 'ABP_SecurityArea_C::AlreadyPlayingSecurityStateAudio' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, ResetAllowSecurityAudioTime) == 0x000B54, "Member 'ABP_SecurityArea_C::ResetAllowSecurityAudioTime' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, CurrentPlayingAudioStates) == 0x000B58, "Member 'ABP_SecurityArea_C::CurrentPlayingAudioStates' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Npc) == 0x000B68, "Member 'ABP_SecurityArea_C::Npc' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, OnVaultBreachStarted) == 0x000B70, "Member 'ABP_SecurityArea_C::OnVaultBreachStarted' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, OnGlobalAnyTeamVaultHacked) == 0x000B7C, "Member 'ABP_SecurityArea_C::OnGlobalAnyTeamVaultHacked' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Title) == 0x000B88, "Member 'ABP_SecurityArea_C::Security_Title' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Alert_Message_Type) == 0x000BA0, "Member 'ABP_SecurityArea_C::Security_Alert_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Lockdown_Message_Type) == 0x000BAC, "Member 'ABP_SecurityArea_C::Security_Lockdown_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Pre_Lockdown_Message_Type) == 0x000BB8, "Member 'ABP_SecurityArea_C::Security_Pre_Lockdown_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Alert_Resolved_Message_Type) == 0x000BC4, "Member 'ABP_SecurityArea_C::Security_Alert_Resolved_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Recovery_Message_Type) == 0x000BD0, "Member 'ABP_SecurityArea_C::Security_Recovery_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Pre_Alerted_Repeat_Message_Type) == 0x000BDC, "Member 'ABP_SecurityArea_C::Security_Pre_Alerted_Repeat_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Pre_Recovery_Message_Type) == 0x000BE8, "Member 'ABP_SecurityArea_C::Security_Pre_Recovery_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Heisted_Message_Type) == 0x000BF4, "Member 'ABP_SecurityArea_C::Security_Heisted_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Audio_Floodlight_Name) == 0x000C00, "Member 'ABP_SecurityArea_C::Audio_Floodlight_Name' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Alert_Stopped_Message_Type) == 0x000C10, "Member 'ABP_SecurityArea_C::Security_Alert_Stopped_Message_Type' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Lockdown_Complete_Message) == 0x000C1C, "Member 'ABP_SecurityArea_C::Security_Lockdown_Complete_Message' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, Security_Recovery_Complete_Message) == 0x000C28, "Member 'ABP_SecurityArea_C::Security_Recovery_Complete_Message' has a wrong offset!");
static_assert(offsetof(ABP_SecurityArea_C, CanShowDetectedMessage) == 0x000C34, "Member 'ABP_SecurityArea_C::CanShowDetectedMessage' has a wrong offset!");

}

