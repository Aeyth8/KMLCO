#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CARendering

#include "Basic.hpp"

#include "CARendering_classes.hpp"
#include "CARendering_parameters.hpp"


namespace SDK
{

// Function CARendering.CAMeshBlock.Reset
// (Final, Native, Public, BlueprintCallable)

void UCAMeshBlock::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CAMeshBlock", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CARendering.CAMeshBlock.GetIndexCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCAMeshBlock::GetIndexCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CAMeshBlock", "GetIndexCount");

	Params::CAMeshBlock_GetIndexCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CAMeshBlock.GetVertexCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCAMeshBlock::GetVertexCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CAMeshBlock", "GetVertexCount");

	Params::CAMeshBlock_GetVertexCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.AppendMeshBlock
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UCAMeshBlock*                     Src_mesh_block                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCAMeshBlock*                     Dst_mesh_block                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Translation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCARenderingLibrary::AppendMeshBlock(const class UCAMeshBlock* Src_mesh_block, class UCAMeshBlock* Dst_mesh_block, const struct FVector& Translation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "AppendMeshBlock");

	Params::CARenderingLibrary_AppendMeshBlock Parms{};

	Parms.Src_mesh_block = Src_mesh_block;
	Parms.Dst_mesh_block = Dst_mesh_block;
	Parms.Translation = std::move(Translation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CARendering.CARenderingLibrary.ApplyLightmapType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             Mesh_component                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELightmapType                           Lightmap_type                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCARenderingLibrary::ApplyLightmapType(class UStaticMeshComponent* Mesh_component, ELightmapType Lightmap_type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ApplyLightmapType");

	Params::CARenderingLibrary_ApplyLightmapType Parms{};

	Parms.Mesh_component = Mesh_component;
	Parms.Lightmap_type = Lightmap_type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CARendering.CARenderingLibrary.ApplyOverridenLightmapDensity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             Mesh_component                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lightmap_resolution                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCARenderingLibrary::ApplyOverridenLightmapDensity(class UStaticMeshComponent* Mesh_component, int32 Lightmap_resolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ApplyOverridenLightmapDensity");

	Params::CARenderingLibrary_ApplyOverridenLightmapDensity Parms{};

	Parms.Mesh_component = Mesh_component;
	Parms.Lightmap_resolution = Lightmap_resolution;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CARendering.CARenderingLibrary.CACreateRuntimeTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPixelFormat                            Format                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Use_mips                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UCARenderingLibrary::CACreateRuntimeTexture(int32 Width, int32 Height, EPixelFormat Format, bool Use_mips)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "CACreateRuntimeTexture");

	Params::CARenderingLibrary_CACreateRuntimeTexture Parms{};

	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Format = Format;
	Parms.Use_mips = Use_mips;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.CalculateAreaFromStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCARenderingLibrary::CalculateAreaFromStaticMesh(class UStaticMesh* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "CalculateAreaFromStaticMesh");

	Params::CARenderingLibrary_CalculateAreaFromStaticMesh Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.ClearHighlightingOutline
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Primitive                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCARenderingLibrary::ClearHighlightingOutline(class UPrimitiveComponent* Primitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ClearHighlightingOutline");

	Params::CARenderingLibrary_ClearHighlightingOutline Parms{};

	Parms.Primitive = Primitive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CARendering.CARenderingLibrary.ExportMeshBlockToStaticMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           User_package_name                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Mesh_name                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UCAMeshBlock*>             Mesh_blocks                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       Materials                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UCARenderingLibrary::ExportMeshBlockToStaticMesh(const class FString& User_package_name, class FName Mesh_name, const TArray<class UCAMeshBlock*>& Mesh_blocks, const TArray<class UMaterialInterface*>& Materials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ExportMeshBlockToStaticMesh");

	Params::CARenderingLibrary_ExportMeshBlockToStaticMesh Parms{};

	Parms.User_package_name = std::move(User_package_name);
	Parms.Mesh_name = Mesh_name;
	Parms.Mesh_blocks = std::move(Mesh_blocks);
	Parms.Materials = std::move(Materials);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.ExportProceduralMeshComponentToStaticMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           User_package_name                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Mesh_name                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UProceduralMeshComponent*         Procedural_mesh_component                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       Materials                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UCARenderingLibrary::ExportProceduralMeshComponentToStaticMesh(const class FString& User_package_name, class FName Mesh_name, class UProceduralMeshComponent* Procedural_mesh_component, const TArray<class UMaterialInterface*>& Materials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ExportProceduralMeshComponentToStaticMesh");

	Params::CARenderingLibrary_ExportProceduralMeshComponentToStaticMesh Parms{};

	Parms.User_package_name = std::move(User_package_name);
	Parms.Mesh_name = Mesh_name;
	Parms.Procedural_mesh_component = Procedural_mesh_component;
	Parms.Materials = std::move(Materials);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.ExtractMeshBlockFromStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lod_index                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Section_index                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCAMeshBlock*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCAMeshBlock* UCARenderingLibrary::ExtractMeshBlockFromStaticMesh(class UStaticMesh* Mesh, int32 Lod_index, int32 Section_index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ExtractMeshBlockFromStaticMesh");

	Params::CARenderingLibrary_ExtractMeshBlockFromStaticMesh Parms{};

	Parms.Mesh = Mesh;
	Parms.Lod_index = Lod_index;
	Parms.Section_index = Section_index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.ExtractMeshBlockFromStaticMeshByMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lod_index                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Material_index                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCAMeshBlock*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCAMeshBlock* UCARenderingLibrary::ExtractMeshBlockFromStaticMeshByMaterial(class UStaticMesh* Mesh, int32 Lod_index, int32 Material_index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ExtractMeshBlockFromStaticMeshByMaterial");

	Params::CARenderingLibrary_ExtractMeshBlockFromStaticMeshByMaterial Parms{};

	Parms.Mesh = Mesh;
	Parms.Lod_index = Lod_index;
	Parms.Material_index = Material_index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.ExtractMeshBlockFromStaticMeshByMaterialTransformed
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lod_index                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Material_index                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UCAMeshBlock*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCAMeshBlock* UCARenderingLibrary::ExtractMeshBlockFromStaticMeshByMaterialTransformed(class UStaticMesh* Mesh, int32 Lod_index, int32 Material_index, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ExtractMeshBlockFromStaticMeshByMaterialTransformed");

	Params::CARenderingLibrary_ExtractMeshBlockFromStaticMeshByMaterialTransformed Parms{};

	Parms.Mesh = Mesh;
	Parms.Lod_index = Lod_index;
	Parms.Material_index = Material_index;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.ExtractMeshBlockFromStaticMeshTransformed
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lod_index                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Section_index                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UCAMeshBlock*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCAMeshBlock* UCARenderingLibrary::ExtractMeshBlockFromStaticMeshTransformed(class UStaticMesh* Mesh, int32 Lod_index, int32 Section_index, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "ExtractMeshBlockFromStaticMeshTransformed");

	Params::CARenderingLibrary_ExtractMeshBlockFromStaticMeshTransformed Parms{};

	Parms.Mesh = Mesh;
	Parms.Lod_index = Lod_index;
	Parms.Section_index = Section_index;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CARendering.CARenderingLibrary.SetHighlightingOutlineRenderingEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCARenderingLibrary::SetHighlightingOutlineRenderingEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "SetHighlightingOutlineRenderingEnabled");

	Params::CARenderingLibrary_SetHighlightingOutlineRenderingEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CARendering.CARenderingLibrary.SetRenderHighlightingOutline
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Primitive                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECAOutlineMode                          Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECAOutlineColor                         Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCARenderingLibrary::SetRenderHighlightingOutline(bool Enabled, class UPrimitiveComponent* Primitive, ECAOutlineMode Mode, ECAOutlineColor Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CARenderingLibrary", "SetRenderHighlightingOutline");

	Params::CARenderingLibrary_SetRenderHighlightingOutline Parms{};

	Parms.Enabled = Enabled;
	Parms.Primitive = Primitive;
	Parms.Mode = Mode;
	Parms.Color = Color;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

