#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HeaderButton

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_HeaderButton.BP_HeaderButton_C.ExecuteUbergraph_BP_HeaderButton
// 0x01B0 (0x01B0 - 0x0000)
struct BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_using_mouse_2;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_using_mouse_1;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_using_mouse;                          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeTextFromCAText_text;                  // 0x0008(0x0018)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInIsEnabled;                         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0028(0x0028)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0058(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0080(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x00A8(0x0028)()
	class FText                                   K2Node_Event_label;                                // 0x00D0(0x0018)(ConstParm)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00F0(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Event_hovered_color;                        // 0x0138(0x0028)()
	struct FSlateColor                            K2Node_Event_normal_color;                         // 0x0160(0x0028)()
	struct FSlateColor                            K2Node_Event_selected_color;                       // 0x0188(0x0028)()
};
static_assert(alignof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton) == 0x000008, "Wrong alignment on BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton");
static_assert(sizeof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton) == 0x0001B0, "Wrong size on BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, EntryPoint) == 0x000000, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_using_mouse_2) == 0x000004, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_using_mouse_2' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_using_mouse_1) == 0x000005, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_using_mouse_1' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_using_mouse) == 0x000006, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_using_mouse' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, CallFunc_MakeTextFromCAText_text) == 0x000008, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::CallFunc_MakeTextFromCAText_text' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_bInIsEnabled) == 0x000021, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_bInIsEnabled' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_MakeStruct_SlateColor) == 0x000028, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_MakeStruct_SlateColor_1) == 0x000058, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_MakeStruct_SlateColor_2) == 0x000080, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_MakeStruct_SlateColor_3) == 0x0000A8, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_label) == 0x0000D0, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_label' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0000E8, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_MyGeometry) == 0x0000F0, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_InDeltaTime) == 0x000128, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00012C, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000130, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, CallFunc_FClamp_ReturnValue) == 0x000134, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_hovered_color) == 0x000138, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_hovered_color' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_normal_color) == 0x000160, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_normal_color' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton, K2Node_Event_selected_color) == 0x000188, "Member 'BP_HeaderButton_C_ExecuteUbergraph_BP_HeaderButton::K2Node_Event_selected_color' has a wrong offset!");

// Function BP_HeaderButton.BP_HeaderButton_C.UpdateColors
// 0x0078 (0x0078 - 0x0000)
struct BP_HeaderButton_C_UpdateColors final
{
public:
	struct FSlateColor                            Hovered_color;                                     // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FSlateColor                            Normal_color;                                      // 0x0028(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FSlateColor                            Selected_color;                                    // 0x0050(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_HeaderButton_C_UpdateColors) == 0x000008, "Wrong alignment on BP_HeaderButton_C_UpdateColors");
static_assert(sizeof(BP_HeaderButton_C_UpdateColors) == 0x000078, "Wrong size on BP_HeaderButton_C_UpdateColors");
static_assert(offsetof(BP_HeaderButton_C_UpdateColors, Hovered_color) == 0x000000, "Member 'BP_HeaderButton_C_UpdateColors::Hovered_color' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_UpdateColors, Normal_color) == 0x000028, "Member 'BP_HeaderButton_C_UpdateColors::Normal_color' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_UpdateColors, Selected_color) == 0x000050, "Member 'BP_HeaderButton_C_UpdateColors::Selected_color' has a wrong offset!");

// Function BP_HeaderButton.BP_HeaderButton_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_HeaderButton_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HeaderButton_C_Tick) == 0x000004, "Wrong alignment on BP_HeaderButton_C_Tick");
static_assert(sizeof(BP_HeaderButton_C_Tick) == 0x00003C, "Wrong size on BP_HeaderButton_C_Tick");
static_assert(offsetof(BP_HeaderButton_C_Tick, MyGeometry) == 0x000000, "Member 'BP_HeaderButton_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HeaderButton_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_HeaderButton_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_HeaderButton.BP_HeaderButton_C.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct BP_HeaderButton_C_SetLabel final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_HeaderButton_C_SetLabel) == 0x000008, "Wrong alignment on BP_HeaderButton_C_SetLabel");
static_assert(sizeof(BP_HeaderButton_C_SetLabel) == 0x000018, "Wrong size on BP_HeaderButton_C_SetLabel");
static_assert(offsetof(BP_HeaderButton_C_SetLabel, Label) == 0x000000, "Member 'BP_HeaderButton_C_SetLabel::Label' has a wrong offset!");

// Function BP_HeaderButton.BP_HeaderButton_C.OnIsEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_HeaderButton_C_OnIsEnabledChanged final
{
public:
	bool                                          bInIsEnabled;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HeaderButton_C_OnIsEnabledChanged) == 0x000001, "Wrong alignment on BP_HeaderButton_C_OnIsEnabledChanged");
static_assert(sizeof(BP_HeaderButton_C_OnIsEnabledChanged) == 0x000001, "Wrong size on BP_HeaderButton_C_OnIsEnabledChanged");
static_assert(offsetof(BP_HeaderButton_C_OnIsEnabledChanged, bInIsEnabled) == 0x000000, "Member 'BP_HeaderButton_C_OnIsEnabledChanged::bInIsEnabled' has a wrong offset!");

// Function BP_HeaderButton.BP_HeaderButton_C.OnUserSelected
// 0x0001 (0x0001 - 0x0000)
struct BP_HeaderButton_C_OnUserSelected final
{
public:
	bool                                          Using_mouse;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HeaderButton_C_OnUserSelected) == 0x000001, "Wrong alignment on BP_HeaderButton_C_OnUserSelected");
static_assert(sizeof(BP_HeaderButton_C_OnUserSelected) == 0x000001, "Wrong size on BP_HeaderButton_C_OnUserSelected");
static_assert(offsetof(BP_HeaderButton_C_OnUserSelected, Using_mouse) == 0x000000, "Member 'BP_HeaderButton_C_OnUserSelected::Using_mouse' has a wrong offset!");

// Function BP_HeaderButton.BP_HeaderButton_C.OnUserLostFocus
// 0x0001 (0x0001 - 0x0000)
struct BP_HeaderButton_C_OnUserLostFocus final
{
public:
	bool                                          Using_mouse;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HeaderButton_C_OnUserLostFocus) == 0x000001, "Wrong alignment on BP_HeaderButton_C_OnUserLostFocus");
static_assert(sizeof(BP_HeaderButton_C_OnUserLostFocus) == 0x000001, "Wrong size on BP_HeaderButton_C_OnUserLostFocus");
static_assert(offsetof(BP_HeaderButton_C_OnUserLostFocus, Using_mouse) == 0x000000, "Member 'BP_HeaderButton_C_OnUserLostFocus::Using_mouse' has a wrong offset!");

// Function BP_HeaderButton.BP_HeaderButton_C.OnUserFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_HeaderButton_C_OnUserFocused final
{
public:
	bool                                          Using_mouse;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HeaderButton_C_OnUserFocused) == 0x000001, "Wrong alignment on BP_HeaderButton_C_OnUserFocused");
static_assert(sizeof(BP_HeaderButton_C_OnUserFocused) == 0x000001, "Wrong size on BP_HeaderButton_C_OnUserFocused");
static_assert(offsetof(BP_HeaderButton_C_OnUserFocused, Using_mouse) == 0x000000, "Member 'BP_HeaderButton_C_OnUserFocused::Using_mouse' has a wrong offset!");

}

