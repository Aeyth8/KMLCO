#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FL_Rendering

#include "Basic.hpp"

#include "BP_FL_Rendering_classes.hpp"
#include "BP_FL_Rendering_parameters.hpp"


namespace SDK
{

// Function BP_FL_Rendering.BP_FL_Rendering_C.SetRenderOutlineSingle
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UPrimitiveComponent*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OverrideIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EOutlineColours                         Colour                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FL_Rendering_C::SetRenderOutlineSingle(bool Enable, class UPrimitiveComponent* Target, int32 OverrideIndex, EOutlineColours Colour, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FL_Rendering_C", "SetRenderOutlineSingle");

	Params::BP_FL_Rendering_C_SetRenderOutlineSingle Parms{};

	Parms.Enable = Enable;
	Parms.Target = Target;
	Parms.OverrideIndex = OverrideIndex;
	Parms.Colour = Colour;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_FL_Rendering.BP_FL_Rendering_C.SetRenderOutlineArray
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class UPrimitiveComponent*>      Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   OverrideIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EOutlineColours                         Colour                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FL_Rendering_C::SetRenderOutlineArray(bool Enable, TArray<class UPrimitiveComponent*>& Targets, int32 OverrideIndex, EOutlineColours Colour, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FL_Rendering_C", "SetRenderOutlineArray");

	Params::BP_FL_Rendering_C_SetRenderOutlineArray Parms{};

	Parms.Enable = Enable;
	Parms.Targets = std::move(Targets);
	Parms.OverrideIndex = OverrideIndex;
	Parms.Colour = Colour;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}

}

