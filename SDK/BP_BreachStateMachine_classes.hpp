#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BreachStateMachine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BreachStateMachine.BP_BreachStateMachine_C
// 0x00B0 (0x0E10 - 0x0D60)
class UBP_BreachStateMachine_C final : public UCAStateMachineComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	FMulticastInlineDelegateProperty_             EventDisabled;                                     // 0x0D68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventEnabled;                                      // 0x0D78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventActivating;                                   // 0x0D88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventBreaching;                                    // 0x0D98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventComplete;                                     // 0x0DA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdateActivation;                                  // 0x0DB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCAAbilitySystemComponent*              AbilityComponent;                                  // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EventDestroyed;                                    // 0x0DD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventPlacing;                                      // 0x0DE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsPlacing;                                         // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DF1[0x7];                                      // 0x0DF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EventPlaced;                                       // 0x0DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCAUsableState*                         PlacementAbility;                                  // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EventDisabled__DelegateSignature();
	void EventEnabled__DelegateSignature();
	void EventActivating__DelegateSignature();
	void EventBreaching__DelegateSignature();
	void EventComplete__DelegateSignature();
	void UpdateActivation__DelegateSignature(float Progress);
	void EventPlacing__DelegateSignature();
	void EventDestroyed__DelegateSignature();
	void EventPlaced__DelegateSignature(class AActor* User);
	void ExecuteUbergraph_BP_BreachStateMachine(int32 EntryPoint);
	void Placed(class AActor* User);
	void Destroyed();
	void NotPlacing(class AActor* User, bool WasCancelled);
	void Placing(class AActor* User);
	void Reset(const struct FGameplayEffectSpec& Killing_effect_spec, float Delta_value);
	void WhileActivating();
	void Complete();
	void Breaching();
	void Activating();
	void Enabled();
	void Disabled();
	void BindDelegates();
	void Force_Enable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BreachStateMachine_C">();
	}
	static class UBP_BreachStateMachine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BreachStateMachine_C>();
	}
};
static_assert(alignof(UBP_BreachStateMachine_C) == 0x000008, "Wrong alignment on UBP_BreachStateMachine_C");
static_assert(sizeof(UBP_BreachStateMachine_C) == 0x000E10, "Wrong size on UBP_BreachStateMachine_C");
static_assert(offsetof(UBP_BreachStateMachine_C, UberGraphFrame) == 0x000D60, "Member 'UBP_BreachStateMachine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, EventDisabled) == 0x000D68, "Member 'UBP_BreachStateMachine_C::EventDisabled' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, EventEnabled) == 0x000D78, "Member 'UBP_BreachStateMachine_C::EventEnabled' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, EventActivating) == 0x000D88, "Member 'UBP_BreachStateMachine_C::EventActivating' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, EventBreaching) == 0x000D98, "Member 'UBP_BreachStateMachine_C::EventBreaching' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, EventComplete) == 0x000DA8, "Member 'UBP_BreachStateMachine_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, UpdateActivation) == 0x000DB8, "Member 'UBP_BreachStateMachine_C::UpdateActivation' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, AbilityComponent) == 0x000DC8, "Member 'UBP_BreachStateMachine_C::AbilityComponent' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, EventDestroyed) == 0x000DD0, "Member 'UBP_BreachStateMachine_C::EventDestroyed' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, EventPlacing) == 0x000DE0, "Member 'UBP_BreachStateMachine_C::EventPlacing' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, IsPlacing) == 0x000DF0, "Member 'UBP_BreachStateMachine_C::IsPlacing' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, EventPlaced) == 0x000DF8, "Member 'UBP_BreachStateMachine_C::EventPlaced' has a wrong offset!");
static_assert(offsetof(UBP_BreachStateMachine_C, PlacementAbility) == 0x000E08, "Member 'UBP_BreachStateMachine_C::PlacementAbility' has a wrong offset!");

}

