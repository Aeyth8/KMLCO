#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RTXGI

#include "Basic.hpp"


namespace SDK
{

// Enum RTXGI.EDDGISkyLightType
// NumValues: 0x0004
enum class EDDGISkyLightType : uint32
{
	None                                     = 0,
	Raster                                   = 1,
	RayTracing                               = 2,
	EDDGISkyLightType_MAX                    = 3,
};

// Enum RTXGI.EDDGIRaysPerProbe
// NumValues: 0x0008
enum class EDDGIRaysPerProbe : uint32
{
	N144                                     = 144,
	N288                                     = 288,
	N432                                     = 432,
	N576                                     = 576,
	N720                                     = 720,
	N864                                     = 864,
	N1008                                    = 1008,
	EDDGIRaysPerProbe_MAX                    = 1009,
};

// Enum RTXGI.EDDGIProbesVisulizationMode
// NumValues: 0x0005
enum class EDDGIProbesVisulizationMode : uint8
{
	Off                                      = 0,
	Irrad                                    = 1,
	Distr                                    = 2,
	Distg                                    = 3,
	EDDGIProbesVisulizationMode_MAX          = 4,
};

// Enum RTXGI.EDDGIDistanceBits
// NumValues: 0x0003
enum class EDDGIDistanceBits : uint8
{
	N16                                      = 0,
	N32                                      = 1,
	EDDGIDistanceBits_MAX                    = 2,
};

// Enum RTXGI.EDDGIIrradianceBits
// NumValues: 0x0003
enum class EDDGIIrradianceBits : uint8
{
	N16                                      = 0,
	N32                                      = 1,
	EDDGIIrradianceBits_MAX                  = 2,
};

// ScriptStruct RTXGI.ProbeRelocation
// 0x0008 (0x0008 - 0x0000)
struct FProbeRelocation final
{
public:
	float                                         ProbeMinFrontfaceDistance;                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeBackfaceThreshold;                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProbeRelocation) == 0x000004, "Wrong alignment on FProbeRelocation");
static_assert(sizeof(FProbeRelocation) == 0x000008, "Wrong size on FProbeRelocation");
static_assert(offsetof(FProbeRelocation, ProbeMinFrontfaceDistance) == 0x000000, "Member 'FProbeRelocation::ProbeMinFrontfaceDistance' has a wrong offset!");
static_assert(offsetof(FProbeRelocation, ProbeBackfaceThreshold) == 0x000004, "Member 'FProbeRelocation::ProbeBackfaceThreshold' has a wrong offset!");

}

