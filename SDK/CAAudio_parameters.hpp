#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CAAudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CAAudio_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function CAAudio.CAAudioBank.Load
// 0x0001 (0x0001 - 0x0000)
struct CAAudioBank_Load final
{
public:
	ECAAudioBankScope                             Scope;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBank_Load) == 0x000001, "Wrong alignment on CAAudioBank_Load");
static_assert(sizeof(CAAudioBank_Load) == 0x000001, "Wrong size on CAAudioBank_Load");
static_assert(offsetof(CAAudioBank_Load, Scope) == 0x000000, "Member 'CAAudioBank_Load::Scope' has a wrong offset!");

// Function CAAudio.CAAudioBeamComponent.SetRTPC
// 0x0010 (0x0010 - 0x0000)
struct CAAudioBeamComponent_SetRTPC final
{
public:
	struct FCAAudioRTPCNameType                   Rtpc_name;                                         // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Change_duration;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBeamComponent_SetRTPC) == 0x000004, "Wrong alignment on CAAudioBeamComponent_SetRTPC");
static_assert(sizeof(CAAudioBeamComponent_SetRTPC) == 0x000010, "Wrong size on CAAudioBeamComponent_SetRTPC");
static_assert(offsetof(CAAudioBeamComponent_SetRTPC, Rtpc_name) == 0x000000, "Member 'CAAudioBeamComponent_SetRTPC::Rtpc_name' has a wrong offset!");
static_assert(offsetof(CAAudioBeamComponent_SetRTPC, Value) == 0x000004, "Member 'CAAudioBeamComponent_SetRTPC::Value' has a wrong offset!");
static_assert(offsetof(CAAudioBeamComponent_SetRTPC, Change_duration) == 0x000008, "Member 'CAAudioBeamComponent_SetRTPC::Change_duration' has a wrong offset!");
static_assert(offsetof(CAAudioBeamComponent_SetRTPC, Threshold) == 0x00000C, "Member 'CAAudioBeamComponent_SetRTPC::Threshold' has a wrong offset!");

// Function CAAudio.CAAudioBeamComponent.SetSwitch
// 0x0008 (0x0008 - 0x0000)
struct CAAudioBeamComponent_SetSwitch final
{
public:
	struct FCAAudioSwitchNameType                 Switch_name;                                       // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                Switch_value;                                      // 0x0004(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBeamComponent_SetSwitch) == 0x000004, "Wrong alignment on CAAudioBeamComponent_SetSwitch");
static_assert(sizeof(CAAudioBeamComponent_SetSwitch) == 0x000008, "Wrong size on CAAudioBeamComponent_SetSwitch");
static_assert(offsetof(CAAudioBeamComponent_SetSwitch, Switch_name) == 0x000000, "Member 'CAAudioBeamComponent_SetSwitch::Switch_name' has a wrong offset!");
static_assert(offsetof(CAAudioBeamComponent_SetSwitch, Switch_value) == 0x000004, "Member 'CAAudioBeamComponent_SetSwitch::Switch_value' has a wrong offset!");

// Function CAAudio.CAAudioBeamComponent.Start
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBeamComponent_Start final
{
public:
	struct FVector                                Start_0;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBeamComponent_Start) == 0x000004, "Wrong alignment on CAAudioBeamComponent_Start");
static_assert(sizeof(CAAudioBeamComponent_Start) == 0x000018, "Wrong size on CAAudioBeamComponent_Start");
static_assert(offsetof(CAAudioBeamComponent_Start, Start_0) == 0x000000, "Member 'CAAudioBeamComponent_Start::Start_0' has a wrong offset!");
static_assert(offsetof(CAAudioBeamComponent_Start, End) == 0x00000C, "Member 'CAAudioBeamComponent_Start::End' has a wrong offset!");

// Function CAAudio.CAAudioBeamComponent.Stop
// 0x0004 (0x0004 - 0x0000)
struct CAAudioBeamComponent_Stop final
{
public:
	int32                                         Fade_out_ms;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBeamComponent_Stop) == 0x000004, "Wrong alignment on CAAudioBeamComponent_Stop");
static_assert(sizeof(CAAudioBeamComponent_Stop) == 0x000004, "Wrong size on CAAudioBeamComponent_Stop");
static_assert(offsetof(CAAudioBeamComponent_Stop, Fade_out_ms) == 0x000000, "Member 'CAAudioBeamComponent_Stop::Fade_out_ms' has a wrong offset!");

// Function CAAudio.CAAudioBeamComponent.UpdateBeamPosition
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBeamComponent_UpdateBeamPosition final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBeamComponent_UpdateBeamPosition) == 0x000004, "Wrong alignment on CAAudioBeamComponent_UpdateBeamPosition");
static_assert(sizeof(CAAudioBeamComponent_UpdateBeamPosition) == 0x000018, "Wrong size on CAAudioBeamComponent_UpdateBeamPosition");
static_assert(offsetof(CAAudioBeamComponent_UpdateBeamPosition, Start) == 0x000000, "Member 'CAAudioBeamComponent_UpdateBeamPosition::Start' has a wrong offset!");
static_assert(offsetof(CAAudioBeamComponent_UpdateBeamPosition, End) == 0x00000C, "Member 'CAAudioBeamComponent_UpdateBeamPosition::End' has a wrong offset!");

// Function CAAudio.CAAudioBeamComponent.UpdateSourcePosition
// 0x000C (0x000C - 0x0000)
struct CAAudioBeamComponent_UpdateSourcePosition final
{
public:
	struct FVector                                Source;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBeamComponent_UpdateSourcePosition) == 0x000004, "Wrong alignment on CAAudioBeamComponent_UpdateSourcePosition");
static_assert(sizeof(CAAudioBeamComponent_UpdateSourcePosition) == 0x00000C, "Wrong size on CAAudioBeamComponent_UpdateSourcePosition");
static_assert(offsetof(CAAudioBeamComponent_UpdateSourcePosition, Source) == 0x000000, "Member 'CAAudioBeamComponent_UpdateSourcePosition::Source' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.BeginTrackingRTPC
// 0x0020 (0x0020 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC final
{
public:
	struct FCAAudioRTPCNameType                   Rtpc_name;                                         // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioPlaybackInstance               Instance;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC) == 0x000020, "Wrong size on CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC, Rtpc_name) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC::Rtpc_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC, Instance) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC::Instance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC, ReturnValue) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_BeginTrackingRTPC::ReturnValue' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.CompareHashIsEqual
// 0x000C (0x000C - 0x0000)
struct CAAudioBlueprintFunctionLibrary_CompareHashIsEqual final
{
public:
	struct FCAAudioHashBase                       A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioHashBase                       b;                                                 // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_CompareHashIsEqual) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_CompareHashIsEqual");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_CompareHashIsEqual) == 0x00000C, "Wrong size on CAAudioBlueprintFunctionLibrary_CompareHashIsEqual");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_CompareHashIsEqual, A) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_CompareHashIsEqual::A' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_CompareHashIsEqual, b) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_CompareHashIsEqual::b' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_CompareHashIsEqual, ReturnValue) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_CompareHashIsEqual::ReturnValue' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.EndTrackingRTPC
// 0x0004 (0x0004 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_EndTrackingRTPC final
{
public:
	int32                                         Tracking_id;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_EndTrackingRTPC) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_EndTrackingRTPC");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_EndTrackingRTPC) == 0x000004, "Wrong size on CAAudioBlueprintFunctionLibrary_EndTrackingRTPC");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_EndTrackingRTPC, Tracking_id) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_EndTrackingRTPC::Tracking_id' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.GetEventInfo
// 0x0010 (0x0010 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_GetEventInfo final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Max_attenuation;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_duration;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_3D;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_localised;                                      // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_GetEventInfo) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_GetEventInfo");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_GetEventInfo) == 0x000010, "Wrong size on CAAudioBlueprintFunctionLibrary_GetEventInfo");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetEventInfo, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_GetEventInfo::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetEventInfo, Max_attenuation) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_GetEventInfo::Max_attenuation' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetEventInfo, Max_duration) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_GetEventInfo::Max_duration' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetEventInfo, Is_3D) == 0x00000C, "Member 'CAAudioBlueprintFunctionLibrary_GetEventInfo::Is_3D' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetEventInfo, Is_localised) == 0x00000D, "Member 'CAAudioBlueprintFunctionLibrary_GetEventInfo::Is_localised' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.GetMaterialAudio
// 0x000C (0x000C - 0x0000)
struct CAAudioBlueprintFunctionLibrary_GetMaterialAudio final
{
public:
	EPhysicalSurface                              Surface;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioSwitchValueType                Switch_value;                                      // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioBankNameType                   Footstep_bank_name;                                // 0x0008(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_GetMaterialAudio) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_GetMaterialAudio");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_GetMaterialAudio) == 0x00000C, "Wrong size on CAAudioBlueprintFunctionLibrary_GetMaterialAudio");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetMaterialAudio, Surface) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_GetMaterialAudio::Surface' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetMaterialAudio, Switch_value) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_GetMaterialAudio::Switch_value' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetMaterialAudio, Footstep_bank_name) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_GetMaterialAudio::Footstep_bank_name' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.GetObjectInfo
// 0x0020 (0x0020 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_GetObjectInfo final
{
public:
	const class UCAAudioComponent*                Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_playing;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_audible;                                        // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_3D;                                             // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance_to_listener;                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_GetObjectInfo) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_GetObjectInfo");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_GetObjectInfo) == 0x000020, "Wrong size on CAAudioBlueprintFunctionLibrary_GetObjectInfo");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetObjectInfo, Component) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_GetObjectInfo::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetObjectInfo, Actor) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_GetObjectInfo::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetObjectInfo, Is_playing) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_GetObjectInfo::Is_playing' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetObjectInfo, Is_audible) == 0x000011, "Member 'CAAudioBlueprintFunctionLibrary_GetObjectInfo::Is_audible' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetObjectInfo, Is_3D) == 0x000012, "Member 'CAAudioBlueprintFunctionLibrary_GetObjectInfo::Is_3D' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetObjectInfo, Radius) == 0x000014, "Member 'CAAudioBlueprintFunctionLibrary_GetObjectInfo::Radius' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetObjectInfo, Distance_to_listener) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_GetObjectInfo::Distance_to_listener' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.GetTrackedRTPC
// 0x0008 (0x0008 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_GetTrackedRTPC final
{
public:
	int32                                         Tracking_id;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_GetTrackedRTPC) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_GetTrackedRTPC");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_GetTrackedRTPC) == 0x000008, "Wrong size on CAAudioBlueprintFunctionLibrary_GetTrackedRTPC");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetTrackedRTPC, Tracking_id) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_GetTrackedRTPC::Tracking_id' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_GetTrackedRTPC, ReturnValue) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_GetTrackedRTPC::ReturnValue' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.HandleFootstep
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_HandleFootstep final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                Material_switch;                                   // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioBankNameType                   Material_bank;                                     // 0x000C(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Max_distance;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_HandleFootstep) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_HandleFootstep");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_HandleFootstep) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_HandleFootstep");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_HandleFootstep, Actor) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_HandleFootstep::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_HandleFootstep, Material_switch) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_HandleFootstep::Material_switch' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_HandleFootstep, Material_bank) == 0x00000C, "Member 'CAAudioBlueprintFunctionLibrary_HandleFootstep::Material_bank' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_HandleFootstep, Max_distance) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_HandleFootstep::Max_distance' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.IsBankLoaded
// 0x0008 (0x0008 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_IsBankLoaded final
{
public:
	struct FCAAudioBankNameType                   bank_name;                                         // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Loaded;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loading;                                           // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_IsBankLoaded) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_IsBankLoaded");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_IsBankLoaded) == 0x000008, "Wrong size on CAAudioBlueprintFunctionLibrary_IsBankLoaded");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_IsBankLoaded, bank_name) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_IsBankLoaded::bank_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_IsBankLoaded, Loaded) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_IsBankLoaded::Loaded' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_IsBankLoaded, Loading) == 0x000005, "Member 'CAAudioBlueprintFunctionLibrary_IsBankLoaded::Loading' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.IsInAudibleRange
// 0x0010 (0x0010 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_IsInAudibleRange final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_distance;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_IsInAudibleRange) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_IsInAudibleRange");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_IsInAudibleRange) == 0x000010, "Wrong size on CAAudioBlueprintFunctionLibrary_IsInAudibleRange");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_IsInAudibleRange, Actor) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_IsInAudibleRange::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_IsInAudibleRange, Max_distance) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_IsInAudibleRange::Max_distance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_IsInAudibleRange, ReturnValue) == 0x00000C, "Member 'CAAudioBlueprintFunctionLibrary_IsInAudibleRange::ReturnValue' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.IsPlaybackFinished
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_IsPlaybackFinished final
{
public:
	struct FCAAudioPlaybackInstance               Playback_instance;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_IsPlaybackFinished) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_IsPlaybackFinished");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_IsPlaybackFinished) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_IsPlaybackFinished");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_IsPlaybackFinished, Playback_instance) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_IsPlaybackFinished::Playback_instance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_IsPlaybackFinished, Result) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_IsPlaybackFinished::Result' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.LoadBank
// 0x0008 (0x0008 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_LoadBank final
{
public:
	struct FCAAudioBankNameType                   bank_name;                                         // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ECAAudioMemoryPool                            Memory_pool;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Async_load;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_LoadBank) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_LoadBank");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_LoadBank) == 0x000008, "Wrong size on CAAudioBlueprintFunctionLibrary_LoadBank");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_LoadBank, bank_name) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_LoadBank::bank_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_LoadBank, Memory_pool) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_LoadBank::Memory_pool' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_LoadBank, Async_load) == 0x000005, "Member 'CAAudioBlueprintFunctionLibrary_LoadBank::Async_load' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.PlayAmbientGroup
// 0x0010 (0x0010 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_PlayAmbientGroup final
{
public:
	class FString                                 Group_name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_PlayAmbientGroup) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_PlayAmbientGroup");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_PlayAmbientGroup) == 0x000010, "Wrong size on CAAudioBlueprintFunctionLibrary_PlayAmbientGroup");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayAmbientGroup, Group_name) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_PlayAmbientGroup::Group_name' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.PlayDynamicEvent
// 0x0058 (0x0058 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_PlayDynamicEvent final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Arguments;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCAAudioComponent*                      Component;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FCAAudioEventType& Event_name)> On_finished;                                       // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioPlaybackInstance               Playback_instance;                                 // 0x0040(0x0010)(Parm, OutParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          Play_success;                                      // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop_when_destroyed;                               // 0x0051(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_out_of_range_oneshot;                       // 0x0052(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Manage_loop;                                       // 0x0053(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_errors;                                     // 0x0054(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_PlayDynamicEvent");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent) == 0x000058, "Wrong size on CAAudioBlueprintFunctionLibrary_PlayDynamicEvent");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Arguments) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Arguments' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Component) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Actor) == 0x000020, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, On_finished) == 0x000028, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::On_finished' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Playback_instance) == 0x000040, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Playback_instance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Play_success) == 0x000050, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Play_success' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Stop_when_destroyed) == 0x000051, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Stop_when_destroyed' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Ignore_out_of_range_oneshot) == 0x000052, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Ignore_out_of_range_oneshot' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Manage_loop) == 0x000053, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Manage_loop' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayDynamicEvent, Ignore_errors) == 0x000054, "Member 'CAAudioBlueprintFunctionLibrary_PlayDynamicEvent::Ignore_errors' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.PlayEvent
// 0x0048 (0x0048 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_PlayEvent final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCAAudioComponent*                      Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FCAAudioEventType& Event_name)> On_finished;                                       // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioPlaybackInstance               Playback_instance;                                 // 0x0030(0x0010)(Parm, OutParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          Play_success;                                      // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop_when_destroyed;                               // 0x0041(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_out_of_range_oneshot;                       // 0x0042(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Manage_loop;                                       // 0x0043(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_errors;                                     // 0x0044(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Single_instance;                                   // 0x0045(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_PlayEvent) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_PlayEvent");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_PlayEvent) == 0x000048, "Wrong size on CAAudioBlueprintFunctionLibrary_PlayEvent");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Component) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Actor) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, On_finished) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::On_finished' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Playback_instance) == 0x000030, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Playback_instance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Play_success) == 0x000040, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Play_success' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Stop_when_destroyed) == 0x000041, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Stop_when_destroyed' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Ignore_out_of_range_oneshot) == 0x000042, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Ignore_out_of_range_oneshot' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Manage_loop) == 0x000043, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Manage_loop' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Ignore_errors) == 0x000044, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Ignore_errors' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEvent, Single_instance) == 0x000045, "Member 'CAAudioBlueprintFunctionLibrary_PlayEvent::Single_instance' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.PlayEventInWorld
// 0x0038 (0x0038 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_PlayEventInWorld final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchNameType                 Switch_name;                                       // 0x0010(0x0004)(ConstParm, Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                Switch_value;                                      // 0x0014(0x0004)(ConstParm, Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FCAAudioRTPCNameType                   Rtpc_name;                                         // 0x0018(0x0004)(ConstParm, Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         Rtpc_value;                                        // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioPlaybackInstance               Playback_instance;                                 // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          Play_success;                                      // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_out_of_range_oneshot;                       // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_PlayEventInWorld");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld) == 0x000038, "Wrong size on CAAudioBlueprintFunctionLibrary_PlayEventInWorld");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Location) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Location' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Switch_name) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Switch_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Switch_value) == 0x000014, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Switch_value' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Rtpc_name) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Rtpc_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Rtpc_value) == 0x00001C, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Rtpc_value' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Playback_instance) == 0x000020, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Playback_instance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Play_success) == 0x000030, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Play_success' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayEventInWorld, Ignore_out_of_range_oneshot) == 0x000031, "Member 'CAAudioBlueprintFunctionLibrary_PlayEventInWorld::Ignore_out_of_range_oneshot' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.PlayPortalledEventInWorld
// 0x0038 (0x0038 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchNameType                 Switch_name;                                       // 0x0010(0x0004)(ConstParm, Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                Switch_value;                                      // 0x0014(0x0004)(ConstParm, Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FCAAudioRTPCNameType                   Rtpc_name;                                         // 0x0018(0x0004)(ConstParm, Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         Rtpc_value;                                        // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioPlaybackInstance               Playback_instance;                                 // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          Play_success;                                      // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_out_of_range_oneshot;                       // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_occluded_source;                               // 0x0032(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld) == 0x000038, "Wrong size on CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Location) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Location' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Switch_name) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Switch_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Switch_value) == 0x000014, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Switch_value' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Rtpc_name) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Rtpc_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Rtpc_value) == 0x00001C, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Rtpc_value' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Playback_instance) == 0x000020, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Playback_instance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Play_success) == 0x000030, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Play_success' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Ignore_out_of_range_oneshot) == 0x000031, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Ignore_out_of_range_oneshot' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld, Use_occluded_source) == 0x000032, "Member 'CAAudioBlueprintFunctionLibrary_PlayPortalledEventInWorld::Use_occluded_source' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.PlayWhizzBy
// 0x0028 (0x0028 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_PlayWhizzBy final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Projectile_start;                                  // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Projectile_end;                                    // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_end_distance;                                  // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Trigger_distance;                                  // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ignore_distance;                                   // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_PlayWhizzBy) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_PlayWhizzBy");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_PlayWhizzBy) == 0x000028, "Wrong size on CAAudioBlueprintFunctionLibrary_PlayWhizzBy");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayWhizzBy, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_PlayWhizzBy::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayWhizzBy, Projectile_start) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_PlayWhizzBy::Projectile_start' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayWhizzBy, Projectile_end) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_PlayWhizzBy::Projectile_end' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayWhizzBy, Max_end_distance) == 0x00001C, "Member 'CAAudioBlueprintFunctionLibrary_PlayWhizzBy::Max_end_distance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayWhizzBy, Trigger_distance) == 0x000020, "Member 'CAAudioBlueprintFunctionLibrary_PlayWhizzBy::Trigger_distance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_PlayWhizzBy, Ignore_distance) == 0x000024, "Member 'CAAudioBlueprintFunctionLibrary_PlayWhizzBy::Ignore_distance' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.RequestDynamicDialogue
// 0x0058 (0x0058 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Arguments;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCAAudioComponent*                      Component;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FCAAudioEventType& Event_name)> On_finished;                                       // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          Is_streamed;                                       // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_queue_time;                                    // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECAAudioDialoguePriority                      Priority;                                          // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupt_equal_priority;                          // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue) == 0x000058, "Wrong size on CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Arguments) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Arguments' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Component) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Actor) == 0x000020, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Position) == 0x000028, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Position' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, On_finished) == 0x000034, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::On_finished' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Is_streamed) == 0x000048, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Is_streamed' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Max_queue_time) == 0x00004C, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Max_queue_time' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Priority) == 0x000050, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Priority' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue, Interrupt_equal_priority) == 0x000051, "Member 'CAAudioBlueprintFunctionLibrary_RequestDynamicDialogue::Interrupt_equal_priority' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.RequestExternalDialogue
// 0x0070 (0x0070 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_RequestExternalDialogue final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                Projection;                                        // 0x0018(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCAAudioComponent*                      Component;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FCAAudioEventType& Event_name)> On_finished;                                       // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FString                                 Target;                                            // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_streamed;                                       // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_queue_time;                                    // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECAAudioDialoguePriority                      Priority;                                          // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupt_equal_priority;                          // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_RequestExternalDialogue");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue) == 0x000070, "Wrong size on CAAudioBlueprintFunctionLibrary_RequestExternalDialogue");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Filename) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Filename' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Projection) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Projection' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Component) == 0x000020, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Actor) == 0x000028, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Position) == 0x000030, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Position' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, On_finished) == 0x00003C, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::On_finished' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Target) == 0x000050, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Target' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Is_streamed) == 0x000060, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Is_streamed' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Max_queue_time) == 0x000064, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Max_queue_time' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Priority) == 0x000068, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Priority' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestExternalDialogue, Interrupt_equal_priority) == 0x000069, "Member 'CAAudioBlueprintFunctionLibrary_RequestExternalDialogue::Interrupt_equal_priority' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.RequestSingleDialogue
// 0x0038 (0x0038 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_RequestSingleDialogue final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCAAudioComponent*                      Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FCAAudioEventType& Event_name)> On_finished;                                       // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          Is_streamed;                                       // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_queue_time;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECAAudioDialoguePriority                      Priority;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupt_equal_priority;                          // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_RequestSingleDialogue");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue) == 0x000038, "Wrong size on CAAudioBlueprintFunctionLibrary_RequestSingleDialogue");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_RequestSingleDialogue::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue, Component) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_RequestSingleDialogue::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue, Actor) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_RequestSingleDialogue::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue, On_finished) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_RequestSingleDialogue::On_finished' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue, Is_streamed) == 0x00002C, "Member 'CAAudioBlueprintFunctionLibrary_RequestSingleDialogue::Is_streamed' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue, Max_queue_time) == 0x000030, "Member 'CAAudioBlueprintFunctionLibrary_RequestSingleDialogue::Max_queue_time' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue, Priority) == 0x000034, "Member 'CAAudioBlueprintFunctionLibrary_RequestSingleDialogue::Priority' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_RequestSingleDialogue, Interrupt_equal_priority) == 0x000035, "Member 'CAAudioBlueprintFunctionLibrary_RequestSingleDialogue::Interrupt_equal_priority' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.SetPlaybackWorldPosition
// 0x0020 (0x0020 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition final
{
public:
	struct FCAAudioPlaybackInstance               Playback_instance;                                 // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition) == 0x000020, "Wrong size on CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition, Playback_instance) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition::Playback_instance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition, Position) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_SetPlaybackWorldPosition::Position' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.SetRTPC
// 0x0028 (0x0028 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_SetRTPC final
{
public:
	class UCAAudioComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioRTPCNameType                   Rtpc_name;                                         // 0x0010(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Global;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Change_duration;                                   // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_SetRTPC) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_SetRTPC");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_SetRTPC) == 0x000028, "Wrong size on CAAudioBlueprintFunctionLibrary_SetRTPC");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetRTPC, Component) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_SetRTPC::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetRTPC, Actor) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_SetRTPC::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetRTPC, Rtpc_name) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_SetRTPC::Rtpc_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetRTPC, Value) == 0x000014, "Member 'CAAudioBlueprintFunctionLibrary_SetRTPC::Value' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetRTPC, Global) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_SetRTPC::Global' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetRTPC, Change_duration) == 0x00001C, "Member 'CAAudioBlueprintFunctionLibrary_SetRTPC::Change_duration' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetRTPC, Threshold) == 0x000020, "Member 'CAAudioBlueprintFunctionLibrary_SetRTPC::Threshold' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.SetState
// 0x0008 (0x0008 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_SetState final
{
public:
	struct FCAAudioStateNameType                  State_name;                                        // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioStateValueType                 State_value;                                       // 0x0004(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_SetState) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_SetState");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_SetState) == 0x000008, "Wrong size on CAAudioBlueprintFunctionLibrary_SetState");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetState, State_name) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_SetState::State_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetState, State_value) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_SetState::State_value' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.SetSwitch
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_SetSwitch final
{
public:
	class UCAAudioComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchNameType                 Switch_name;                                       // 0x0010(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                Switch_value;                                      // 0x0014(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_SetSwitch) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_SetSwitch");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_SetSwitch) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_SetSwitch");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetSwitch, Component) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_SetSwitch::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetSwitch, Actor) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_SetSwitch::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetSwitch, Switch_name) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_SetSwitch::Switch_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SetSwitch, Switch_value) == 0x000014, "Member 'CAAudioBlueprintFunctionLibrary_SetSwitch::Switch_value' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.SimplePlayEvent
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_SimplePlayEvent final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop_when_destroyed;                               // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_out_of_range_oneshot;                       // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_SimplePlayEvent) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_SimplePlayEvent");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_SimplePlayEvent) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_SimplePlayEvent");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SimplePlayEvent, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_SimplePlayEvent::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SimplePlayEvent, Actor) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_SimplePlayEvent::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SimplePlayEvent, Stop_when_destroyed) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_SimplePlayEvent::Stop_when_destroyed' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_SimplePlayEvent, Ignore_out_of_range_oneshot) == 0x000011, "Member 'CAAudioBlueprintFunctionLibrary_SimplePlayEvent::Ignore_out_of_range_oneshot' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StopAmbientGroup
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StopAmbientGroup final
{
public:
	class FString                                 Group_name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fade_out_ms;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StopAmbientGroup) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StopAmbientGroup");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StopAmbientGroup) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StopAmbientGroup");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopAmbientGroup, Group_name) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StopAmbientGroup::Group_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopAmbientGroup, Fade_out_ms) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StopAmbientGroup::Fade_out_ms' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StopEventByInstance
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StopEventByInstance final
{
public:
	struct FCAAudioPlaybackInstance               Playback_instance;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Fade_out_ms;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StopEventByInstance) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StopEventByInstance");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StopEventByInstance) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StopEventByInstance");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopEventByInstance, Playback_instance) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StopEventByInstance::Playback_instance' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopEventByInstance, Fade_out_ms) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StopEventByInstance::Fade_out_ms' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StopEventByName
// 0x0020 (0x0020 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StopEventByName final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UCAAudioComponent*                Component;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fade_out_ms;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StopEventByName) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StopEventByName");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StopEventByName) == 0x000020, "Wrong size on CAAudioBlueprintFunctionLibrary_StopEventByName");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopEventByName, Event) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StopEventByName::Event' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopEventByName, Component) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_StopEventByName::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopEventByName, Actor) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StopEventByName::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopEventByName, Fade_out_ms) == 0x000018, "Member 'CAAudioBlueprintFunctionLibrary_StopEventByName::Fade_out_ms' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StopObject
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StopObject final
{
public:
	class UCAAudioComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fade_out_ms;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StopObject) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StopObject");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StopObject) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StopObject");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopObject, Component) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StopObject::Component' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopObject, Actor) == 0x000008, "Member 'CAAudioBlueprintFunctionLibrary_StopObject::Actor' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StopObject, Fade_out_ms) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StopObject::Fade_out_ms' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StringToEvent
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StringToEvent final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioEventType                      Event;                                             // 0x0010(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StringToEvent) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StringToEvent");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StringToEvent) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StringToEvent");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToEvent, String) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StringToEvent::String' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToEvent, Event) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StringToEvent::Event' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StringToRTPCName
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StringToRTPCName final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioRTPCNameType                   Rtpc_name;                                         // 0x0010(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StringToRTPCName) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StringToRTPCName");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StringToRTPCName) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StringToRTPCName");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToRTPCName, String) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StringToRTPCName::String' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToRTPCName, Rtpc_name) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StringToRTPCName::Rtpc_name' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StringToStateName
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StringToStateName final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioStateNameType                  State_name;                                        // 0x0010(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StringToStateName) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StringToStateName");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StringToStateName) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StringToStateName");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToStateName, String) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StringToStateName::String' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToStateName, State_name) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StringToStateName::State_name' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StringToStateValue
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StringToStateValue final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioStateValueType                 State_value;                                       // 0x0010(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StringToStateValue) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StringToStateValue");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StringToStateValue) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StringToStateValue");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToStateValue, String) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StringToStateValue::String' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToStateValue, State_value) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StringToStateValue::State_value' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StringToSwitchName
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StringToSwitchName final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchNameType                 Switch_name;                                       // 0x0010(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StringToSwitchName) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StringToSwitchName");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StringToSwitchName) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StringToSwitchName");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToSwitchName, String) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StringToSwitchName::String' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToSwitchName, Switch_name) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StringToSwitchName::Switch_name' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.StringToSwitchValue
// 0x0018 (0x0018 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_StringToSwitchValue final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                Switch_value;                                      // 0x0010(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_StringToSwitchValue) == 0x000008, "Wrong alignment on CAAudioBlueprintFunctionLibrary_StringToSwitchValue");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_StringToSwitchValue) == 0x000018, "Wrong size on CAAudioBlueprintFunctionLibrary_StringToSwitchValue");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToSwitchValue, String) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_StringToSwitchValue::String' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_StringToSwitchValue, Switch_value) == 0x000010, "Member 'CAAudioBlueprintFunctionLibrary_StringToSwitchValue::Switch_value' has a wrong offset!");

// Function CAAudio.CAAudioBlueprintFunctionLibrary.UnloadBank
// 0x0008 (0x0008 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_UnloadBank final
{
public:
	struct FCAAudioBankNameType                   bank_name;                                         // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Force_unload;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_UnloadBank) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_UnloadBank");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_UnloadBank) == 0x000008, "Wrong size on CAAudioBlueprintFunctionLibrary_UnloadBank");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_UnloadBank, bank_name) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_UnloadBank::bank_name' has a wrong offset!");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_UnloadBank, Force_unload) == 0x000004, "Member 'CAAudioBlueprintFunctionLibrary_UnloadBank::Force_unload' has a wrong offset!");

// DelegateFunction CAAudio.CAAudioBlueprintFunctionLibrary.CompletionDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct CAAudioBlueprintFunctionLibrary_CompletionDelegate__DelegateSignature final
{
public:
	struct FCAAudioEventType                      Event_name;                                        // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioBlueprintFunctionLibrary_CompletionDelegate__DelegateSignature) == 0x000004, "Wrong alignment on CAAudioBlueprintFunctionLibrary_CompletionDelegate__DelegateSignature");
static_assert(sizeof(CAAudioBlueprintFunctionLibrary_CompletionDelegate__DelegateSignature) == 0x000004, "Wrong size on CAAudioBlueprintFunctionLibrary_CompletionDelegate__DelegateSignature");
static_assert(offsetof(CAAudioBlueprintFunctionLibrary_CompletionDelegate__DelegateSignature, Event_name) == 0x000000, "Member 'CAAudioBlueprintFunctionLibrary_CompletionDelegate__DelegateSignature::Event_name' has a wrong offset!");

// Function CAAudio.CAAudioMultiObjectBlueprintFunctionLibrary.AddMultiObjectArea
// 0x0018 (0x0018 - 0x0000)
struct CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea final
{
public:
	class AActor*                                 Area;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Area_name;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea) == 0x000008, "Wrong alignment on CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea");
static_assert(sizeof(CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea) == 0x000018, "Wrong size on CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea, Area) == 0x000000, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea::Area' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea, Area_name) == 0x000008, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_AddMultiObjectArea::Area_name' has a wrong offset!");

// Function CAAudio.CAAudioMultiObjectBlueprintFunctionLibrary.PlayOnMultiObject
// 0x0038 (0x0038 - 0x0000)
struct CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Emitter_name;                                      // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group_name;                                        // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioPlaybackInstance               Playback_instance;                                 // 0x0028(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject) == 0x000008, "Wrong alignment on CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject");
static_assert(sizeof(CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject) == 0x000038, "Wrong size on CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject, Event) == 0x000000, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject::Event' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject, Emitter_name) == 0x000008, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject::Emitter_name' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject, Group_name) == 0x000018, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject::Group_name' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject, Playback_instance) == 0x000028, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_PlayOnMultiObject::Playback_instance' has a wrong offset!");

// Function CAAudio.CAAudioMultiObjectBlueprintFunctionLibrary.SetRTPCOnMultiObject
// 0x0028 (0x0028 - 0x0000)
struct CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject final
{
public:
	struct FCAAudioSwitchNameType                 Rtpc_name;                                         // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Rtpc_value;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Emitter_name;                                      // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group_name;                                        // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject) == 0x000008, "Wrong alignment on CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject");
static_assert(sizeof(CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject) == 0x000028, "Wrong size on CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject, Rtpc_name) == 0x000000, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject::Rtpc_name' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject, Rtpc_value) == 0x000004, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject::Rtpc_value' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject, Emitter_name) == 0x000008, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject::Emitter_name' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject, Group_name) == 0x000018, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_SetRTPCOnMultiObject::Group_name' has a wrong offset!");

// Function CAAudio.CAAudioMultiObjectBlueprintFunctionLibrary.SetSwitchOnMultiObject
// 0x0028 (0x0028 - 0x0000)
struct CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject final
{
public:
	struct FCAAudioSwitchNameType                 Switch_name;                                       // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                Switch_value;                                      // 0x0004(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Emitter_name;                                      // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group_name;                                        // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject) == 0x000008, "Wrong alignment on CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject");
static_assert(sizeof(CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject) == 0x000028, "Wrong size on CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject, Switch_name) == 0x000000, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject::Switch_name' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject, Switch_value) == 0x000004, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject::Switch_value' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject, Emitter_name) == 0x000008, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject::Emitter_name' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject, Group_name) == 0x000018, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_SetSwitchOnMultiObject::Group_name' has a wrong offset!");

// Function CAAudio.CAAudioMultiObjectBlueprintFunctionLibrary.StopMultiObject
// 0x0020 (0x0020 - 0x0000)
struct CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject final
{
public:
	class FString                                 Emitter_name;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group_name;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject) == 0x000008, "Wrong alignment on CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject");
static_assert(sizeof(CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject) == 0x000020, "Wrong size on CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject, Emitter_name) == 0x000000, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject::Emitter_name' has a wrong offset!");
static_assert(offsetof(CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject, Group_name) == 0x000010, "Member 'CAAudioMultiObjectBlueprintFunctionLibrary_StopMultiObject::Group_name' has a wrong offset!");

// Function CAAudio.CAAudioSpatialLinkComponent.GetOpenAmount
// 0x0004 (0x0004 - 0x0000)
struct CAAudioSpatialLinkComponent_GetOpenAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioSpatialLinkComponent_GetOpenAmount) == 0x000004, "Wrong alignment on CAAudioSpatialLinkComponent_GetOpenAmount");
static_assert(sizeof(CAAudioSpatialLinkComponent_GetOpenAmount) == 0x000004, "Wrong size on CAAudioSpatialLinkComponent_GetOpenAmount");
static_assert(offsetof(CAAudioSpatialLinkComponent_GetOpenAmount, ReturnValue) == 0x000000, "Member 'CAAudioSpatialLinkComponent_GetOpenAmount::ReturnValue' has a wrong offset!");

// Function CAAudio.CAAudioSpatialLinkComponent.SetOpenAmount
// 0x000C (0x000C - 0x0000)
struct CAAudioSpatialLinkComponent_SetOpenAmount final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CAAudioSpatialLinkComponent_SetOpenAmount) == 0x000004, "Wrong alignment on CAAudioSpatialLinkComponent_SetOpenAmount");
static_assert(sizeof(CAAudioSpatialLinkComponent_SetOpenAmount) == 0x00000C, "Wrong size on CAAudioSpatialLinkComponent_SetOpenAmount");
static_assert(offsetof(CAAudioSpatialLinkComponent_SetOpenAmount, Amount) == 0x000000, "Member 'CAAudioSpatialLinkComponent_SetOpenAmount::Amount' has a wrong offset!");
static_assert(offsetof(CAAudioSpatialLinkComponent_SetOpenAmount, Min) == 0x000004, "Member 'CAAudioSpatialLinkComponent_SetOpenAmount::Min' has a wrong offset!");
static_assert(offsetof(CAAudioSpatialLinkComponent_SetOpenAmount, Max) == 0x000008, "Member 'CAAudioSpatialLinkComponent_SetOpenAmount::Max' has a wrong offset!");

// Function CAAudio.CASPrPointDataInterface.GetNext
// 0x0018 (0x0018 - 0x0000)
struct CASPrPointDataInterface_GetNext final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone_id;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CASPrPointDataInterface_GetNext) == 0x000004, "Wrong alignment on CASPrPointDataInterface_GetNext");
static_assert(sizeof(CASPrPointDataInterface_GetNext) == 0x000018, "Wrong size on CASPrPointDataInterface_GetNext");
static_assert(offsetof(CASPrPointDataInterface_GetNext, Point) == 0x000000, "Member 'CASPrPointDataInterface_GetNext::Point' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_GetNext, Weight) == 0x00000C, "Member 'CASPrPointDataInterface_GetNext::Weight' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_GetNext, Zone_id) == 0x000010, "Member 'CASPrPointDataInterface_GetNext::Zone_id' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_GetNext, ReturnValue) == 0x000014, "Member 'CASPrPointDataInterface_GetNext::ReturnValue' has a wrong offset!");

// Function CAAudio.CASPrPointDataInterface.GetZoneInfo
// 0x0028 (0x0028 - 0x0000)
struct CASPrPointDataInterface_GetZoneInfo final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone_id;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Connected_zones;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CASPrPointDataInterface_GetZoneInfo) == 0x000008, "Wrong alignment on CASPrPointDataInterface_GetZoneInfo");
static_assert(sizeof(CASPrPointDataInterface_GetZoneInfo) == 0x000028, "Wrong size on CASPrPointDataInterface_GetZoneInfo");
static_assert(offsetof(CASPrPointDataInterface_GetZoneInfo, Position) == 0x000000, "Member 'CASPrPointDataInterface_GetZoneInfo::Position' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_GetZoneInfo, Zone_id) == 0x00000C, "Member 'CASPrPointDataInterface_GetZoneInfo::Zone_id' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_GetZoneInfo, Connected_zones) == 0x000010, "Member 'CASPrPointDataInterface_GetZoneInfo::Connected_zones' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_GetZoneInfo, ReturnValue) == 0x000020, "Member 'CASPrPointDataInterface_GetZoneInfo::ReturnValue' has a wrong offset!");

// Function CAAudio.CASPrPointDataInterface.PrepareIterator
// 0x0018 (0x0018 - 0x0000)
struct CASPrPointDataInterface_PrepareIterator final
{
public:
	ECASPrPointType                               Position_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Voxel_step;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sample_step;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CASPrPointDataInterface_PrepareIterator) == 0x000008, "Wrong alignment on CASPrPointDataInterface_PrepareIterator");
static_assert(sizeof(CASPrPointDataInterface_PrepareIterator) == 0x000018, "Wrong size on CASPrPointDataInterface_PrepareIterator");
static_assert(offsetof(CASPrPointDataInterface_PrepareIterator, Position_type) == 0x000000, "Member 'CASPrPointDataInterface_PrepareIterator::Position_type' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_PrepareIterator, Voxel_step) == 0x000004, "Member 'CASPrPointDataInterface_PrepareIterator::Voxel_step' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_PrepareIterator, Sample_step) == 0x000008, "Member 'CASPrPointDataInterface_PrepareIterator::Sample_step' has a wrong offset!");
static_assert(offsetof(CASPrPointDataInterface_PrepareIterator, ReturnValue) == 0x000010, "Member 'CASPrPointDataInterface_PrepareIterator::ReturnValue' has a wrong offset!");

// Function CAAudio.CASPrBlueprintFunctionLibrary.AreInSameCASPrZone
// 0x001C (0x001C - 0x0000)
struct CASPrBlueprintFunctionLibrary_AreInSameCASPrZone final
{
public:
	struct FVector                                First;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Second;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CASPrBlueprintFunctionLibrary_AreInSameCASPrZone) == 0x000004, "Wrong alignment on CASPrBlueprintFunctionLibrary_AreInSameCASPrZone");
static_assert(sizeof(CASPrBlueprintFunctionLibrary_AreInSameCASPrZone) == 0x00001C, "Wrong size on CASPrBlueprintFunctionLibrary_AreInSameCASPrZone");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_AreInSameCASPrZone, First) == 0x000000, "Member 'CASPrBlueprintFunctionLibrary_AreInSameCASPrZone::First' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_AreInSameCASPrZone, Second) == 0x00000C, "Member 'CASPrBlueprintFunctionLibrary_AreInSameCASPrZone::Second' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_AreInSameCASPrZone, ReturnValue) == 0x000018, "Member 'CASPrBlueprintFunctionLibrary_AreInSameCASPrZone::ReturnValue' has a wrong offset!");

// Function CAAudio.CASPrBlueprintFunctionLibrary.GetCASPrZoneInfo
// 0x0020 (0x0020 - 0x0000)
struct CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo final
{
public:
	const class AActor*                           Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Id;                                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EZoneType                                     Type;                                              // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioStateValueType                 Size;                                              // 0x0010(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo) == 0x000008, "Wrong alignment on CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo");
static_assert(sizeof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo) == 0x000020, "Wrong size on CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo, Object) == 0x000000, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo::Object' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo, Id) == 0x000008, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo::Id' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo, Type) == 0x00000C, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo::Type' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo, Size) == 0x000010, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo::Size' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo, Volume) == 0x000014, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo::Volume' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo, ReturnValue) == 0x000018, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfo::ReturnValue' has a wrong offset!");

// Function CAAudio.CASPrBlueprintFunctionLibrary.GetCASPrZoneInfoFromID
// 0x0014 (0x0014 - 0x0000)
struct CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID final
{
public:
	int32                                         Id;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EZoneType                                     Type;                                              // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioStateValueType                 Size;                                              // 0x0008(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID) == 0x000004, "Wrong alignment on CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID");
static_assert(sizeof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID) == 0x000014, "Wrong size on CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID, Id) == 0x000000, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID::Id' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID, Type) == 0x000004, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID::Type' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID, Size) == 0x000008, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID::Size' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID, Volume) == 0x00000C, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID::Volume' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID, ReturnValue) == 0x000010, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromID::ReturnValue' has a wrong offset!");

// Function CAAudio.CASPrBlueprintFunctionLibrary.GetCASPrZoneInfoFromLocation
// 0x0020 (0x0020 - 0x0000)
struct CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Id;                                                // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EZoneType                                     Type;                                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAAudioStateValueType                 Size;                                              // 0x0014(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation) == 0x000004, "Wrong alignment on CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation");
static_assert(sizeof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation) == 0x000020, "Wrong size on CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation, Pos) == 0x000000, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation::Pos' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation, Id) == 0x00000C, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation::Id' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation, Type) == 0x000010, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation::Type' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation, Size) == 0x000014, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation::Size' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation, Volume) == 0x000018, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation::Volume' has a wrong offset!");
static_assert(offsetof(CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation, ReturnValue) == 0x00001C, "Member 'CASPrBlueprintFunctionLibrary_GetCASPrZoneInfoFromLocation::ReturnValue' has a wrong offset!");

}

