#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VaultGateComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CALocalisationRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Keaton_structs.hpp"


namespace SDK::Params
{

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.ExecuteUbergraph_BP_VaultGateComponent
// 0x0160 (0x0160 - 0x0000)
struct BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAUIHUDEntityId                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAUIHUDEntityId                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAUIHUDEntityId                              Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAUIHUDEntityId                              Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_User_1;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_User;                                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WasCancelled;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Tag_1;                                // 0x0024(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Tag;                                  // 0x0034(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACAGameMode*                            K2Node_DynamicCast_AsCAGame_Mode;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECAUIHUDEntityId                              Temp_byte_Variable_4;                              // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECAUIHUDEntityId                              Temp_byte_Variable_5;                              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0070(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAUIHUDEntityId                              K2Node_Select_Default;                             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0090(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_TransformToString_ReturnValue;       // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0110(0x0014)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0138(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCATeamID                              CallFunc_GetTeamID_ReturnValue;                    // 0x0150(0x0004)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent) == 0x000010, "Wrong alignment on BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent");
static_assert(sizeof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent) == 0x000160, "Wrong size on BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, EntryPoint) == 0x000000, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_byte_Variable) == 0x000004, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_byte_Variable_1) == 0x000005, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_byte_Variable_2) == 0x000006, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_byte_Variable_3) == 0x000007, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_bool_IsClosed_Variable) == 0x000008, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_Event_User_1) == 0x000010, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_Event_User_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_Event_User) == 0x000018, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_Event_User' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_Event_WasCancelled) == 0x000020, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_Event_WasCancelled' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_Event_Tag_1) == 0x000024, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_Event_Tag_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000030, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_Event_Tag) == 0x000034, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_Event_Tag' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1) == 0x000040, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000041, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_GetGameMode_ReturnValue) == 0x000048, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_DynamicCast_AsCAGame_Mode) == 0x000050, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_DynamicCast_AsCAGame_Mode' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_Greater_IntInt_ReturnValue) == 0x000068, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_IsDedicatedServer_ReturnValue) == 0x000069, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_byte_Variable_4) == 0x00006A, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x00006B, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x00006C, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_byte_Variable_5) == 0x00006D, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x00006E, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000070, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, Temp_int_Variable) == 0x00007C, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_GetOwner_ReturnValue_1) == 0x000080, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_Select_Default) == 0x000088, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_GetTransform_ReturnValue) == 0x000090, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_Conv_TransformToString_ReturnValue) == 0x0000C0, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_Conv_TransformToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_GetDisplayName_ReturnValue) == 0x0000D0, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_Concat_StrStr_ReturnValue) == 0x0000E0, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_Conv_VectorToString_ReturnValue) == 0x0000F0, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000100, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000110, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000128, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000138, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000140, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, CallFunc_GetTeamID_ReturnValue) == 0x000150, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent, K2Node_SwitchEnum_CmpSuccess) == 0x000154, "Member 'BP_VaultGateComponent_C_ExecuteUbergraph_BP_VaultGateComponent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.NotifyTagRemoved
// 0x000C (0x000C - 0x0000)
struct BP_VaultGateComponent_C_NotifyTagRemoved final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_NotifyTagRemoved) == 0x000004, "Wrong alignment on BP_VaultGateComponent_C_NotifyTagRemoved");
static_assert(sizeof(BP_VaultGateComponent_C_NotifyTagRemoved) == 0x00000C, "Wrong size on BP_VaultGateComponent_C_NotifyTagRemoved");
static_assert(offsetof(BP_VaultGateComponent_C_NotifyTagRemoved, Tag) == 0x000000, "Member 'BP_VaultGateComponent_C_NotifyTagRemoved::Tag' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.NotifyTagAdded
// 0x000C (0x000C - 0x0000)
struct BP_VaultGateComponent_C_NotifyTagAdded final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_NotifyTagAdded) == 0x000004, "Wrong alignment on BP_VaultGateComponent_C_NotifyTagAdded");
static_assert(sizeof(BP_VaultGateComponent_C_NotifyTagAdded) == 0x00000C, "Wrong size on BP_VaultGateComponent_C_NotifyTagAdded");
static_assert(offsetof(BP_VaultGateComponent_C_NotifyTagAdded, Tag) == 0x000000, "Member 'BP_VaultGateComponent_C_NotifyTagAdded::Tag' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.NotifyAbilityEnded
// 0x0010 (0x0010 - 0x0000)
struct BP_VaultGateComponent_C_NotifyAbilityEnded final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasCancelled;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultGateComponent_C_NotifyAbilityEnded) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_NotifyAbilityEnded");
static_assert(sizeof(BP_VaultGateComponent_C_NotifyAbilityEnded) == 0x000010, "Wrong size on BP_VaultGateComponent_C_NotifyAbilityEnded");
static_assert(offsetof(BP_VaultGateComponent_C_NotifyAbilityEnded, User) == 0x000000, "Member 'BP_VaultGateComponent_C_NotifyAbilityEnded::User' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_NotifyAbilityEnded, WasCancelled) == 0x000008, "Member 'BP_VaultGateComponent_C_NotifyAbilityEnded::WasCancelled' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.NotifyAbilityActivated
// 0x0008 (0x0008 - 0x0000)
struct BP_VaultGateComponent_C_NotifyAbilityActivated final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_NotifyAbilityActivated) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_NotifyAbilityActivated");
static_assert(sizeof(BP_VaultGateComponent_C_NotifyAbilityActivated) == 0x000008, "Wrong size on BP_VaultGateComponent_C_NotifyAbilityActivated");
static_assert(offsetof(BP_VaultGateComponent_C_NotifyAbilityActivated, User) == 0x000000, "Member 'BP_VaultGateComponent_C_NotifyAbilityActivated::User' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.UpdateMapMarker
// 0x0158 (0x0158 - 0x0000)
struct BP_VaultGateComponent_C_UpdateMapMarker final
{
public:
	ECAUIHUDEntityId                              Entity_id;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCAMapEntityPayload                    Payload;                                           // 0x0008(0x0070)(Edit, BlueprintVisible)
	float                                         Temp_float_Variable;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable_1;                             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnabled_ReturnValue;                    // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    K2Node_MakeStruct_Vector_NetQuantize;              // 0x00D0(0x000C)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCAMapEntityPayload                    K2Node_MakeStruct_CAMapEntityPayload;              // 0x00E0(0x0070)()
	int32                                         CallFunc_RegisterMapEntity_ReturnValue;            // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_UpdateMapMarker) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_UpdateMapMarker");
static_assert(sizeof(BP_VaultGateComponent_C_UpdateMapMarker) == 0x000158, "Wrong size on BP_VaultGateComponent_C_UpdateMapMarker");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, Entity_id) == 0x000000, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::Entity_id' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, Payload) == 0x000008, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::Payload' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, Temp_float_Variable) == 0x000078, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000088, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000094, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, Temp_float_Variable_1) == 0x0000A0, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000A4, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B0, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, Temp_bool_Variable) == 0x0000BC, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_BreakVector_X) == 0x0000C0, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_BreakVector_Y) == 0x0000C4, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_BreakVector_Z) == 0x0000C8, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_IsEnabled_ReturnValue) == 0x0000CC, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_IsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, K2Node_MakeStruct_Vector_NetQuantize) == 0x0000D0, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::K2Node_MakeStruct_Vector_NetQuantize' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, K2Node_Select_Default) == 0x0000DC, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, K2Node_MakeStruct_CAMapEntityPayload) == 0x0000E0, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::K2Node_MakeStruct_CAMapEntityPayload' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_UpdateMapMarker, CallFunc_RegisterMapEntity_ReturnValue) == 0x000150, "Member 'BP_VaultGateComponent_C_UpdateMapMarker::CallFunc_RegisterMapEntity_ReturnValue' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.SetVaultLevel
// 0x0004 (0x0004 - 0x0000)
struct BP_VaultGateComponent_C_SetVaultLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_SetVaultLevel) == 0x000004, "Wrong alignment on BP_VaultGateComponent_C_SetVaultLevel");
static_assert(sizeof(BP_VaultGateComponent_C_SetVaultLevel) == 0x000004, "Wrong size on BP_VaultGateComponent_C_SetVaultLevel");
static_assert(offsetof(BP_VaultGateComponent_C_SetVaultLevel, Level) == 0x000000, "Member 'BP_VaultGateComponent_C_SetVaultLevel::Level' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.OnReleaseProgressUpdate
// 0x0014 (0x0014 - 0x0000)
struct BP_VaultGateComponent_C_OnReleaseProgressUpdate final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGameplayPhase_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultGateComponent_C_OnReleaseProgressUpdate) == 0x000004, "Wrong alignment on BP_VaultGateComponent_C_OnReleaseProgressUpdate");
static_assert(sizeof(BP_VaultGateComponent_C_OnReleaseProgressUpdate) == 0x000014, "Wrong size on BP_VaultGateComponent_C_OnReleaseProgressUpdate");
static_assert(offsetof(BP_VaultGateComponent_C_OnReleaseProgressUpdate, Progress) == 0x000000, "Member 'BP_VaultGateComponent_C_OnReleaseProgressUpdate::Progress' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_OnReleaseProgressUpdate, CallFunc_GetGameplayPhase_ReturnValue) == 0x000004, "Member 'BP_VaultGateComponent_C_OnReleaseProgressUpdate::CallFunc_GetGameplayPhase_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_OnReleaseProgressUpdate, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_VaultGateComponent_C_OnReleaseProgressUpdate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_OnReleaseProgressUpdate, CallFunc_Array_Get_Item) == 0x00000C, "Member 'BP_VaultGateComponent_C_OnReleaseProgressUpdate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_OnReleaseProgressUpdate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_VaultGateComponent_C_OnReleaseProgressUpdate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.OnVaultRelease
// 0x0020 (0x0020 - 0x0000)
struct BP_VaultGateComponent_C_OnVaultRelease final
{
public:
	struct FCATeamID                              Team;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0004(0x000C)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplyGameplayEffect_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultGateComponent_C_OnVaultRelease) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_OnVaultRelease");
static_assert(sizeof(BP_VaultGateComponent_C_OnVaultRelease) == 0x000020, "Wrong size on BP_VaultGateComponent_C_OnVaultRelease");
static_assert(offsetof(BP_VaultGateComponent_C_OnVaultRelease, Team) == 0x000000, "Member 'BP_VaultGateComponent_C_OnVaultRelease::Team' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_OnVaultRelease, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000004, "Member 'BP_VaultGateComponent_C_OnVaultRelease::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_OnVaultRelease, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_VaultGateComponent_C_OnVaultRelease::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_OnVaultRelease, CallFunc_ApplyGameplayEffect_ReturnValue) == 0x000018, "Member 'BP_VaultGateComponent_C_OnVaultRelease::CallFunc_ApplyGameplayEffect_ReturnValue' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.Set Icon Location
// 0x000C (0x000C - 0x0000)
struct BP_VaultGateComponent_C_Set_Icon_Location final
{
public:
	struct FVector                                RelativeOffsetLocation;                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_Set_Icon_Location) == 0x000004, "Wrong alignment on BP_VaultGateComponent_C_Set_Icon_Location");
static_assert(sizeof(BP_VaultGateComponent_C_Set_Icon_Location) == 0x00000C, "Wrong size on BP_VaultGateComponent_C_Set_Icon_Location");
static_assert(offsetof(BP_VaultGateComponent_C_Set_Icon_Location, RelativeOffsetLocation) == 0x000000, "Member 'BP_VaultGateComponent_C_Set_Icon_Location::RelativeOffsetLocation' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.RemoveVaultFromSecurity
// 0x0050 (0x0050 - 0x0000)
struct BP_VaultGateComponent_C_RemoveVaultFromSecurity final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetSecurityAreas_Areas;                   // 0x0010(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICASecurityModuleInterface> K2Node_DynamicCast_AsCASecurity_Module_Interface;  // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultGateComponent_C_RemoveVaultFromSecurity) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_RemoveVaultFromSecurity");
static_assert(sizeof(BP_VaultGateComponent_C_RemoveVaultFromSecurity) == 0x000050, "Wrong size on BP_VaultGateComponent_C_RemoveVaultFromSecurity");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, CallFunc_GetSecurityAreas_Areas) == 0x000010, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::CallFunc_GetSecurityAreas_Areas' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, K2Node_DynamicCast_AsCASecurity_Module_Interface) == 0x000038, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::K2Node_DynamicCast_AsCASecurity_Module_Interface' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_RemoveVaultFromSecurity, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'BP_VaultGateComponent_C_RemoveVaultFromSecurity::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.GetSecurityAreas
// 0x0038 (0x0038 - 0x0000)
struct BP_VaultGateComponent_C_GetSecurityAreas final
{
public:
	TArray<class AActor*>                         Areas;                                             // 0x0000(0x0010)(Parm, OutParm)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetSecurityModulesAndAreas_Areas;         // 0x0028(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_VaultGateComponent_C_GetSecurityAreas) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_GetSecurityAreas");
static_assert(sizeof(BP_VaultGateComponent_C_GetSecurityAreas) == 0x000038, "Wrong size on BP_VaultGateComponent_C_GetSecurityAreas");
static_assert(offsetof(BP_VaultGateComponent_C_GetSecurityAreas, Areas) == 0x000000, "Member 'BP_VaultGateComponent_C_GetSecurityAreas::Areas' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetSecurityAreas, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_VaultGateComponent_C_GetSecurityAreas::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetSecurityAreas, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_VaultGateComponent_C_GetSecurityAreas::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetSecurityAreas, CallFunc_GetSecurityModulesAndAreas_Areas) == 0x000028, "Member 'BP_VaultGateComponent_C_GetSecurityAreas::CallFunc_GetSecurityModulesAndAreas_Areas' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.AddVaultToSecurityArea
// 0x0098 (0x0098 - 0x0000)
struct BP_VaultGateComponent_C_AddVaultToSecurityArea final
{
public:
	float                                         AgentDuration;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SecurityMissionTrigger;                            // 0x0004(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0014)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetSecurityAreas_Areas;                   // 0x0050(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICASecurityModuleInterface> K2Node_DynamicCast_AsCASecurity_Module_Interface;  // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCAShipAIMissionManager*                CallFunc_GetShipAIMissionManager_ReturnValue;      // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_AddVaultToSecurityArea) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_AddVaultToSecurityArea");
static_assert(sizeof(BP_VaultGateComponent_C_AddVaultToSecurityArea) == 0x000098, "Wrong size on BP_VaultGateComponent_C_AddVaultToSecurityArea");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, AgentDuration) == 0x000000, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::AgentDuration' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, SecurityMissionTrigger) == 0x000004, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::SecurityMissionTrigger' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000048, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_GetSecurityAreas_Areas) == 0x000050, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_GetSecurityAreas_Areas' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_GetOwner_ReturnValue_1) == 0x000060, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, K2Node_DynamicCast_AsCASecurity_Module_Interface) == 0x000078, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::K2Node_DynamicCast_AsCASecurity_Module_Interface' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_Less_IntInt_ReturnValue) == 0x000089, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_AddVaultToSecurityArea, CallFunc_GetShipAIMissionManager_ReturnValue) == 0x000090, "Member 'BP_VaultGateComponent_C_AddVaultToSecurityArea::CallFunc_GetShipAIMissionManager_ReturnValue' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.BindToReleaseEvents
// 0x0048 (0x0048 - 0x0000)
struct BP_VaultGateComponent_C_BindToReleaseEvents final
{
public:
	TDelegate<void(const struct FCATeamID& Team_id)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0014)(ZeroConstructor, NoDestructor)
	TDelegate<void(float Percentage)>             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0014)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCAAbilitySystemComponent*              K2Node_DynamicCast_AsCAAbility_System_Component;   // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultGateComponent_C_BindToReleaseEvents) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_BindToReleaseEvents");
static_assert(sizeof(BP_VaultGateComponent_C_BindToReleaseEvents) == 0x000048, "Wrong size on BP_VaultGateComponent_C_BindToReleaseEvents");
static_assert(offsetof(BP_VaultGateComponent_C_BindToReleaseEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_VaultGateComponent_C_BindToReleaseEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_BindToReleaseEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_VaultGateComponent_C_BindToReleaseEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_BindToReleaseEvents, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_VaultGateComponent_C_BindToReleaseEvents::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_BindToReleaseEvents, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000030, "Member 'BP_VaultGateComponent_C_BindToReleaseEvents::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_BindToReleaseEvents, K2Node_DynamicCast_AsCAAbility_System_Component) == 0x000038, "Member 'BP_VaultGateComponent_C_BindToReleaseEvents::K2Node_DynamicCast_AsCAAbility_System_Component' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_BindToReleaseEvents, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_VaultGateComponent_C_BindToReleaseEvents::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.ApplySecurityTrigger
// 0x0060 (0x0060 - 0x0000)
struct BP_VaultGateComponent_C_ApplySecurityTrigger final
{
public:
	struct FGameplayTag                           Mission_trigger;                                   // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetSecurityAreas_Areas;                   // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICASecurityModuleInterface> K2Node_DynamicCast_AsCASecurity_Module_Interface;  // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCAShipAIMissionManager*                CallFunc_GetShipAIMissionManager_ReturnValue;      // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_ApplySecurityTrigger) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_ApplySecurityTrigger");
static_assert(sizeof(BP_VaultGateComponent_C_ApplySecurityTrigger) == 0x000060, "Wrong size on BP_VaultGateComponent_C_ApplySecurityTrigger");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, Mission_trigger) == 0x000000, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::Mission_trigger' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, CallFunc_GetSecurityAreas_Areas) == 0x000018, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::CallFunc_GetSecurityAreas_Areas' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, K2Node_DynamicCast_AsCASecurity_Module_Interface) == 0x000040, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::K2Node_DynamicCast_AsCASecurity_Module_Interface' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_ApplySecurityTrigger, CallFunc_GetShipAIMissionManager_ReturnValue) == 0x000058, "Member 'BP_VaultGateComponent_C_ApplySecurityTrigger::CallFunc_GetShipAIMissionManager_ReturnValue' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.SetVaultName
// 0x0030 (0x0030 - 0x0000)
struct BP_VaultGateComponent_C_SetVaultName final
{
public:
	struct FCAText                                Name_0;                                            // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_VaultGateComponent_C_SetVaultName) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_SetVaultName");
static_assert(sizeof(BP_VaultGateComponent_C_SetVaultName) == 0x000030, "Wrong size on BP_VaultGateComponent_C_SetVaultName");
static_assert(offsetof(BP_VaultGateComponent_C_SetVaultName, Name_0) == 0x000000, "Member 'BP_VaultGateComponent_C_SetVaultName::Name_0' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.CanGiveAbility
// 0x0020 (0x0020 - 0x0000)
struct BP_VaultGateComponent_C_CanGiveAbility final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultGateComponent_C_CanGiveAbility) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_CanGiveAbility");
static_assert(sizeof(BP_VaultGateComponent_C_CanGiveAbility) == 0x000020, "Wrong size on BP_VaultGateComponent_C_CanGiveAbility");
static_assert(offsetof(BP_VaultGateComponent_C_CanGiveAbility, User) == 0x000000, "Member 'BP_VaultGateComponent_C_CanGiveAbility::User' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanGiveAbility, ReturnValue) == 0x000008, "Member 'BP_VaultGateComponent_C_CanGiveAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanGiveAbility, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'BP_VaultGateComponent_C_CanGiveAbility::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanGiveAbility, CallFunc_ClassIsChildOf_ReturnValue) == 0x000018, "Member 'BP_VaultGateComponent_C_CanGiveAbility::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanGiveAbility, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'BP_VaultGateComponent_C_CanGiveAbility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.CanUseAbility
// 0x0020 (0x0020 - 0x0000)
struct BP_VaultGateComponent_C_CanUseAbility final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseAbility_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasGameplayTag_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnabled_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VaultGateComponent_C_CanUseAbility) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_CanUseAbility");
static_assert(sizeof(BP_VaultGateComponent_C_CanUseAbility) == 0x000020, "Wrong size on BP_VaultGateComponent_C_CanUseAbility");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, User) == 0x000000, "Member 'BP_VaultGateComponent_C_CanUseAbility::User' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, ReturnValue) == 0x000008, "Member 'BP_VaultGateComponent_C_CanUseAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_VaultGateComponent_C_CanUseAbility::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, CallFunc_CanUseAbility_ReturnValue) == 0x000018, "Member 'BP_VaultGateComponent_C_CanUseAbility::CallFunc_CanUseAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, CallFunc_HasGameplayTag_ReturnValue) == 0x000019, "Member 'BP_VaultGateComponent_C_CanUseAbility::CallFunc_HasGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, CallFunc_IsEnabled_ReturnValue) == 0x00001A, "Member 'BP_VaultGateComponent_C_CanUseAbility::CallFunc_IsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, CallFunc_Not_PreBool_ReturnValue) == 0x00001B, "Member 'BP_VaultGateComponent_C_CanUseAbility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_VaultGateComponent_C_CanUseAbility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_CanUseAbility, CallFunc_BooleanAND_ReturnValue_1) == 0x00001D, "Member 'BP_VaultGateComponent_C_CanUseAbility::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.GetAbilityUseProgress
// 0x0018 (0x0018 - 0x0000)
struct BP_VaultGateComponent_C_GetAbilityUseProgress final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_GetAbilityUseProgress) == 0x000008, "Wrong alignment on BP_VaultGateComponent_C_GetAbilityUseProgress");
static_assert(sizeof(BP_VaultGateComponent_C_GetAbilityUseProgress) == 0x000018, "Wrong size on BP_VaultGateComponent_C_GetAbilityUseProgress");
static_assert(offsetof(BP_VaultGateComponent_C_GetAbilityUseProgress, User) == 0x000000, "Member 'BP_VaultGateComponent_C_GetAbilityUseProgress::User' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetAbilityUseProgress, ReturnValue) == 0x000008, "Member 'BP_VaultGateComponent_C_GetAbilityUseProgress::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetAbilityUseProgress, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue) == 0x00000C, "Member 'BP_VaultGateComponent_C_GetAbilityUseProgress::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetAbilityUseProgress, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_VaultGateComponent_C_GetAbilityUseProgress::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_VaultGateComponent.BP_VaultGateComponent_C.GetPrimaryMessageType
// 0x0064 (0x0064 - 0x0000)
struct BP_VaultGateComponent_C_GetPrimaryMessageType final
{
public:
	class FName                                   Event_type;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VaultGateComponent_C_GetPrimaryMessageType) == 0x000004, "Wrong alignment on BP_VaultGateComponent_C_GetPrimaryMessageType");
static_assert(sizeof(BP_VaultGateComponent_C_GetPrimaryMessageType) == 0x000064, "Wrong size on BP_VaultGateComponent_C_GetPrimaryMessageType");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, Event_type) == 0x000000, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::Event_type' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, Temp_int_Variable) == 0x00000C, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, Temp_name_Variable) == 0x000010, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, Temp_name_Variable_1) == 0x00001C, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, Temp_name_Variable_2) == 0x000028, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, Temp_name_Variable_3) == 0x000034, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, Temp_name_Variable_4) == 0x000040, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, Temp_name_Variable_5) == 0x00004C, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_VaultGateComponent_C_GetPrimaryMessageType, K2Node_Select_Default) == 0x000058, "Member 'BP_VaultGateComponent_C_GetPrimaryMessageType::K2Node_Select_Default' has a wrong offset!");

}

