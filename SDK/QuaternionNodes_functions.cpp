#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuaternionNodes

#include "Basic.hpp"

#include "QuaternionNodes_classes.hpp"
#include "QuaternionNodes_parameters.hpp"


namespace SDK
{

// Function QuaternionNodes.QuaternionNodes_C.ToQuaternion (Rotator)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         InRot                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FQuat                            Return_Value                                           (Parm, OutParm, IsPlainOldData, NoDestructor)

void UQuaternionNodes_C::ToQuaternion__Rotator_(const struct FRotator& InRot, class UObject* __WorldContext, struct FQuat* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuaternionNodes_C", "ToQuaternion (Rotator)");

	Params::QuaternionNodes_C_ToQuaternion__Rotator_ Parms{};

	Parms.InRot = std::move(InRot);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}


// Function QuaternionNodes.QuaternionNodes_C.GetBaseAimRotation (Quat)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FQuat                            Return_Value                                           (Parm, OutParm, IsPlainOldData, NoDestructor)

void UQuaternionNodes_C::GetBaseAimRotation__Quat_(class APawn* Target, class UObject* __WorldContext, struct FQuat* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuaternionNodes_C", "GetBaseAimRotation (Quat)");

	Params::QuaternionNodes_C_GetBaseAimRotation__Quat_ Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}


// Function QuaternionNodes.QuaternionNodes_C.GetActorRotation (Quat)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FQuat                            Return_Value                                           (Parm, OutParm, IsPlainOldData, NoDestructor)

void UQuaternionNodes_C::GetActorRotation__Quat_(class AActor* Target, class UObject* __WorldContext, struct FQuat* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuaternionNodes_C", "GetActorRotation (Quat)");

	Params::QuaternionNodes_C_GetActorRotation__Quat_ Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}

}

