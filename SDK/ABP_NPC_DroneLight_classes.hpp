#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_NPC_DroneLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Keaton_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_NPC_DroneLight.ABP_NPC_DroneLight_C
// 0x04F0 (0x0900 - 0x0410)
class UABP_NPC_DroneLight_C final : public UCAAnimInstance_NPC
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0418(0x00E8)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0500(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0520(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0540(0x0038)()
	struct FAnimNode_RandomPlayer                 AnimGraphNode_RandomPlayer;                        // 0x0578(0x0078)()
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt;                              // 0x05F0(0x01D0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x07C0(0x0110)()
	struct FRotator                               OrientationDeltaDueToMovement;                     // 0x08D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DistanceAheadForWeaponOrientation;                 // 0x08DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocationForWeaponOrientation;                // 0x08E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorldOrientation;                                  // 0x08EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Delta_Time_X;                                      // 0x08F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedTriggerThreshold;                             // 0x08FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_NPC_DroneLight(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_NPC_DroneLight_C">();
	}
	static class UABP_NPC_DroneLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_NPC_DroneLight_C>();
	}
};
static_assert(alignof(UABP_NPC_DroneLight_C) == 0x000010, "Wrong alignment on UABP_NPC_DroneLight_C");
static_assert(sizeof(UABP_NPC_DroneLight_C) == 0x000900, "Wrong size on UABP_NPC_DroneLight_C");
static_assert(offsetof(UABP_NPC_DroneLight_C, UberGraphFrame) == 0x000410, "Member 'UABP_NPC_DroneLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, AnimGraphNode_Slot) == 0x000418, "Member 'UABP_NPC_DroneLight_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, AnimGraphNode_LocalToComponentSpace) == 0x000500, "Member 'UABP_NPC_DroneLight_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, AnimGraphNode_ComponentToLocalSpace) == 0x000520, "Member 'UABP_NPC_DroneLight_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, AnimGraphNode_Root) == 0x000540, "Member 'UABP_NPC_DroneLight_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, AnimGraphNode_RandomPlayer) == 0x000578, "Member 'UABP_NPC_DroneLight_C::AnimGraphNode_RandomPlayer' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, AnimGraphNode_LookAt) == 0x0005F0, "Member 'UABP_NPC_DroneLight_C::AnimGraphNode_LookAt' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, AnimGraphNode_ModifyBone) == 0x0007C0, "Member 'UABP_NPC_DroneLight_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, OrientationDeltaDueToMovement) == 0x0008D0, "Member 'UABP_NPC_DroneLight_C::OrientationDeltaDueToMovement' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, DistanceAheadForWeaponOrientation) == 0x0008DC, "Member 'UABP_NPC_DroneLight_C::DistanceAheadForWeaponOrientation' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, TargetLocationForWeaponOrientation) == 0x0008E0, "Member 'UABP_NPC_DroneLight_C::TargetLocationForWeaponOrientation' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, WorldOrientation) == 0x0008EC, "Member 'UABP_NPC_DroneLight_C::WorldOrientation' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, Delta_Time_X) == 0x0008F8, "Member 'UABP_NPC_DroneLight_C::Delta_Time_X' has a wrong offset!");
static_assert(offsetof(UABP_NPC_DroneLight_C, SpeedTriggerThreshold) == 0x0008FC, "Member 'UABP_NPC_DroneLight_C::SpeedTriggerThreshold' has a wrong offset!");

}

