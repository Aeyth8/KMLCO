#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BankRobber_PlaceTurret_Indicator

#include "Basic.hpp"

#include "BP_BankRobber_PlaceTurret_Indicator_classes.hpp"
#include "BP_BankRobber_PlaceTurret_Indicator_parameters.hpp"


namespace SDK
{

// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.ExecuteUbergraph_BP_BankRobber_PlaceTurret_Indicator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BankRobber_PlaceTurret_Indicator_C::ExecuteUbergraph_BP_BankRobber_PlaceTurret_Indicator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "ExecuteUbergraph_BP_BankRobber_PlaceTurret_Indicator");

	Params::BP_BankRobber_PlaceTurret_Indicator_C_ExecuteUbergraph_BP_BankRobber_PlaceTurret_Indicator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BankRobber_PlaceTurret_Indicator_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "ReceiveTick");

	Params::BP_BankRobber_PlaceTurret_Indicator_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BankRobber_PlaceTurret_Indicator_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.Calculate Turret Position and Rotation from Hit
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit_0                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    UseWallTurretVariation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BankRobber_PlaceTurret_Indicator_C::Calculate_Turret_Position_and_Rotation_from_Hit(const struct FHitResult& Hit_0, bool UseWallTurretVariation, struct FVector* Position, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "Calculate Turret Position and Rotation from Hit");

	Params::BP_BankRobber_PlaceTurret_Indicator_C_Calculate_Turret_Position_and_Rotation_from_Hit Parms{};

	Parms.Hit_0 = std::move(Hit_0);
	Parms.UseWallTurretVariation = UseWallTurretVariation;

	UObject::ProcessEvent(Func, &Parms);

	if (Position != nullptr)
		*Position = std::move(Parms.Position);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.Find Turret Placement From Pawn View
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseWallVariation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          IndicatorPosition                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         IndicatorRoation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       TraceHit                                               (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BankRobber_PlaceTurret_Indicator_C::Find_Turret_Placement_From_Pawn_View(bool* UseWallVariation, struct FVector* IndicatorPosition, struct FRotator* IndicatorRoation, struct FHitResult* TraceHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "Find Turret Placement From Pawn View");

	Params::BP_BankRobber_PlaceTurret_Indicator_C_Find_Turret_Placement_From_Pawn_View Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UseWallVariation != nullptr)
		*UseWallVariation = Parms.UseWallVariation;

	if (IndicatorPosition != nullptr)
		*IndicatorPosition = std::move(Parms.IndicatorPosition);

	if (IndicatorRoation != nullptr)
		*IndicatorRoation = std::move(Parms.IndicatorRoation);

	if (TraceHit != nullptr)
		*TraceHit = std::move(Parms.TraceHit);
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.Validate Turret Placement
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseWallVariation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          IndicatorLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         IndicatorRotation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       TraceHit                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    CanPlace                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BankRobber_PlaceTurret_Indicator_C::Validate_Turret_Placement(bool UseWallVariation, const struct FVector& IndicatorLocation, const struct FRotator& IndicatorRotation, const struct FHitResult& TraceHit, bool* CanPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "Validate Turret Placement");

	Params::BP_BankRobber_PlaceTurret_Indicator_C_Validate_Turret_Placement Parms{};

	Parms.UseWallVariation = UseWallVariation;
	Parms.IndicatorLocation = std::move(IndicatorLocation);
	Parms.IndicatorRotation = std::move(IndicatorRotation);
	Parms.TraceHit = std::move(TraceHit);

	UObject::ProcessEvent(Func, &Parms);

	if (CanPlace != nullptr)
		*CanPlace = Parms.CanPlace;
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.GetPlacementTargetData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       Hit_0                                                  (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    CanPlace                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UseWallVariation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BankRobber_PlaceTurret_Indicator_C::GetPlacementTargetData(struct FHitResult* Hit_0, bool* CanPlace, bool* UseWallVariation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "GetPlacementTargetData");

	Params::BP_BankRobber_PlaceTurret_Indicator_C_GetPlacementTargetData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hit_0 != nullptr)
		*Hit_0 = std::move(Parms.Hit_0);

	if (CanPlace != nullptr)
		*CanPlace = Parms.CanPlace;

	if (UseWallVariation != nullptr)
		*UseWallVariation = Parms.UseWallVariation;
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.IsPlaceable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanPlace                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BankRobber_PlaceTurret_Indicator_C::IsPlaceable(bool* CanPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "IsPlaceable");

	Params::BP_BankRobber_PlaceTurret_Indicator_C_IsPlaceable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanPlace != nullptr)
		*CanPlace = Parms.CanPlace;
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.DebugDrawPlacementFailure
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_BankRobber_PlaceTurret_Indicator_C::DebugDrawPlacementFailure(const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "DebugDrawPlacementFailure");

	Params::BP_BankRobber_PlaceTurret_Indicator_C_DebugDrawPlacementFailure Parms{};

	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BankRobber_PlaceTurret_Indicator.BP_BankRobber_PlaceTurret_Indicator_C.SetBalancingVariables
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BankRobber_PlaceTurret_Indicator_C::SetBalancingVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BankRobber_PlaceTurret_Indicator_C", "SetBalancingVariables");

	UObject::ProcessEvent(Func, nullptr);
}

}

