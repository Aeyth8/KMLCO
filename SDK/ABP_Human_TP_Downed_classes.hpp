#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Human_TP_Downed

#include "Basic.hpp"

#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Human_TP_Downed.ABP_Human_TP_Downed_C
// 0x1CD0 (0x1FB0 - 0x02E0)
class UABP_Human_TP_Downed_C final : public UCAAnimInstance_PlayerDownedState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_LegIK                        AnimGraphNode_LegIK_1;                             // 0x02E8(0x0100)()
	uint8                                         Pad_3E8[0x8];                                      // 0x03E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x03F0(0x0210)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0600(0x00E8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x06E8(0x00A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x0788(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x08E0(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0910(0x0030)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0940(0x0158)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x0A98(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0B38(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0B68(0x0030)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0B98(0x0020)()
	struct FAnimNode_LegIK                        AnimGraphNode_LegIK;                               // 0x0BB8(0x0100)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0CB8(0x0020)()
	struct FAnimNode_RotateRootBone               AnimGraphNode_RotateRootBone;                      // 0x0CD8(0x00E0)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0DB8(0x00D0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0E88(0x0110)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0F98(0x0110)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x10A8(0x0158)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x1200(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x1228(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x1250(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x1278(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x12A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x12C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x12F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x1318(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x1340(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x1368(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x1390(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x13B8(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x13E8(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x1420(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x14A0(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x14D8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1558(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x1590(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x1610(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x16B0(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x1730(0x00A0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x17D0(0x00C8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x1898(0x00E8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x1980(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1A68(0x0038)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1AA0(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1B40(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1BC0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1C40(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1C78(0x00B0)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1D28(0x0038)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x1D60(0x0120)()
	float                                         TimeDelta;                                         // 0x1E80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetHeading;                                     // 0x1E84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentHeading;                                    // 0x1E88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimingPitch;                                       // 0x1E8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnToMoveRatio;                                   // 0x1E90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTurnRate;                                   // 0x1E94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadingDelta;                                      // 0x1E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalVelocity;                                     // 0x1E9C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastHitDirection;                                  // 0x1EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EAC[0x4];                                     // 0x1EAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Anim_To_Downed;                                    // 0x1EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPoseBeingUsed;                                   // 0x1EB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDowned_;                                         // 0x1EB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMoving;                                          // 0x1EBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsReviving;                                        // 0x1EBB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDownedGround_;                                   // 0x1EBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasDowned;                                         // 0x1EBD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Was_in_ZeroG;                                      // 0x1EBE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInZeroG;                                         // 0x1EBF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Was_DownedFalling_;                                // 0x1EC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDownedFalling_;                                  // 0x1EC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Was_in_ZeroGFloating_;                             // 0x1EC2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInZeroGFloating_;                                // 0x1EC3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HaveGround;                                        // 0x1EC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EC5[0x3];                                     // 0x1EC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GroundNormal;                                      // 0x1EC8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundPoint;                                       // 0x1ED4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SlopeRotator;                                      // 0x1EE0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EEC[0x4];                                     // 0x1EEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACACharacter_MainPlayer*                CAChar_MainPlayer;                                 // 0x1EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasUsedRecently;                                   // 0x1EF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EF9[0x3];                                     // 0x1EF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BodyOffsetForFootPlanting;                         // 0x1EFC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SlopeSampleVector;                                 // 0x1F08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundSampleOffset;                                // 0x1F14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECAPlayerMovementMode                         Player_Movement_Mode;                              // 0x1F20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F21[0x7];                                     // 0x1F21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimSequenceBase*>              AnimToDownedBack;                                  // 0x1F28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>              AnimToDownedLeft;                                  // 0x1F38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>              AnimToDownedFwd;                                   // 0x1F48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>              AnimToDownedRight;                                 // 0x1F58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimSequence*                          AnimToDownedRecovery;                              // 0x1F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FEATURE_CA_SKILLFUL_KILLS;                         // 0x1F70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F71[0x3];                                     // 0x1F71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Z__Yaw_;                                           // 0x1F74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimingYaw;                                         // 0x1F78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDownedLocomotionStarted;                         // 0x1F7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F7D[0x3];                                     // 0x1F7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Ground_Point;                                      // 0x1F80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundHandPoint;                                   // 0x1F8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HandRotator;                                       // 0x1F98(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ABP_Human_TP_Downed(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_ModifyBone_870676E14D09036E78F259A756813DDC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_CDAF89EE4D77F0707B1593B4D76FB3FE();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_ApplyAdditive_E3907F064A9C08EF37FCCAA2738B5C76();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_703F40C44B9A5D8BDB8D9B90A7B94479();
	void AnimNotify_DownedLocoEntered();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_FF06F9064E712FFA517D7794FCD33B74();
	void AnimNotify_TransitionToDowned();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_BlendListByBool_1F38363349B744ABAD5F0391E69EC0DB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_BlendListByBool_4EFA39F0463E0484685B738423EFFF1C();
	void AnimNotify_Recovery_FaceUp();
	void AnimNotify_Recovery_FaceDown();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_C05DBC2548E036CB3527E693456ECCC2();
	void BlueprintInitializeAnimation();
	void AnimNotify_SND_DownedLocoHandplacement();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_8742B6894A6A264822B7B9B48AEBD8CC();
	void AnimNotify_Start_To_Downed();
	void AnimNotify_SND_Foot_Down();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_F2E359D045B781169C8A448D6F4D8ACC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_4C06B5BF4C71ECEB946B00A844F34609();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_94EC263B439F55C19224F3A5C0B02D22();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Human_TP_Downed_AnimGraphNode_TransitionResult_4D0ADEF447F41AA9EE7367AF381D98B9();
	void CopyValuesFromSpecialist();
	void GetSkillfullKillsAnims(int32 Index_0);
	void AnimGraph(const struct FPoseLink& ABP_Human_TP_Pose, struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Human_TP_Downed_C">();
	}
	static class UABP_Human_TP_Downed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Human_TP_Downed_C>();
	}
};
static_assert(alignof(UABP_Human_TP_Downed_C) == 0x000010, "Wrong alignment on UABP_Human_TP_Downed_C");
static_assert(sizeof(UABP_Human_TP_Downed_C) == 0x001FB0, "Wrong size on UABP_Human_TP_Downed_C");
static_assert(offsetof(UABP_Human_TP_Downed_C, UberGraphFrame) == 0x0002E0, "Member 'UABP_Human_TP_Downed_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_LegIK_1) == 0x0002E8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_LegIK_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TwoBoneIK) == 0x0003F0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000600, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_BlendListByBool_4) == 0x0006E8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SaveCachedPose_2) == 0x000788, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_UseCachedPose_4) == 0x0008E0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_UseCachedPose_3) == 0x000910, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SaveCachedPose_1) == 0x000940, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_BlendListByBool_3) == 0x000A98, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_UseCachedPose_2) == 0x000B38, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_UseCachedPose_1) == 0x000B68, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_LocalToComponentSpace) == 0x000B98, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_LegIK) == 0x000BB8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_LegIK' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_ComponentToLocalSpace) == 0x000CB8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_RotateRootBone) == 0x000CD8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_RotateRootBone' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_ApplyAdditive) == 0x000DB8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_ModifyBone_1) == 0x000E88, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_ModifyBone) == 0x000F98, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SaveCachedPose) == 0x0010A8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_10) == 0x001200, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_9) == 0x001228, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_8) == 0x001250, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_7) == 0x001278, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_6) == 0x0012A0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_5) == 0x0012C8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_4) == 0x0012F0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_3) == 0x001318, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_2) == 0x001340, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult_1) == 0x001368, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TransitionResult) == 0x001390, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_UseCachedPose) == 0x0013B8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_StateResult_4) == 0x0013E8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SequencePlayer_5) == 0x001420, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_StateResult_3) == 0x0014A0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SequencePlayer_4) == 0x0014D8, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_StateResult_2) == 0x001558, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SequencePlayer_3) == 0x001590, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_BlendListByBool_2) == 0x001610, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SequencePlayer_2) == 0x0016B0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_BlendListByBool_1) == 0x001730, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_TwoWayBlend) == 0x0017D0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_BlendSpacePlayer_1) == 0x001898, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_BlendSpacePlayer) == 0x001980, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_StateResult_1) == 0x001A68, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_BlendListByBool) == 0x001AA0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SequencePlayer_1) == 0x001B40, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_SequencePlayer) == 0x001BC0, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_StateResult) == 0x001C40, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_StateMachine) == 0x001C78, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_Root) == 0x001D28, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimGraphNode_LinkedInputPose) == 0x001D60, "Member 'UABP_Human_TP_Downed_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, TimeDelta) == 0x001E80, "Member 'UABP_Human_TP_Downed_C::TimeDelta' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, TargetHeading) == 0x001E84, "Member 'UABP_Human_TP_Downed_C::TargetHeading' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, CurrentHeading) == 0x001E88, "Member 'UABP_Human_TP_Downed_C::CurrentHeading' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AimingPitch) == 0x001E8C, "Member 'UABP_Human_TP_Downed_C::AimingPitch' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, TurnToMoveRatio) == 0x001E90, "Member 'UABP_Human_TP_Downed_C::TurnToMoveRatio' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, CurrentTurnRate) == 0x001E94, "Member 'UABP_Human_TP_Downed_C::CurrentTurnRate' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, HeadingDelta) == 0x001E98, "Member 'UABP_Human_TP_Downed_C::HeadingDelta' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, LocalVelocity) == 0x001E9C, "Member 'UABP_Human_TP_Downed_C::LocalVelocity' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, LastHitDirection) == 0x001EA8, "Member 'UABP_Human_TP_Downed_C::LastHitDirection' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, Anim_To_Downed) == 0x001EB0, "Member 'UABP_Human_TP_Downed_C::Anim_To_Downed' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsPoseBeingUsed) == 0x001EB8, "Member 'UABP_Human_TP_Downed_C::IsPoseBeingUsed' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsDowned_) == 0x001EB9, "Member 'UABP_Human_TP_Downed_C::IsDowned_' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsMoving) == 0x001EBA, "Member 'UABP_Human_TP_Downed_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsReviving) == 0x001EBB, "Member 'UABP_Human_TP_Downed_C::IsReviving' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsDownedGround_) == 0x001EBC, "Member 'UABP_Human_TP_Downed_C::IsDownedGround_' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, WasDowned) == 0x001EBD, "Member 'UABP_Human_TP_Downed_C::WasDowned' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, Was_in_ZeroG) == 0x001EBE, "Member 'UABP_Human_TP_Downed_C::Was_in_ZeroG' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsInZeroG) == 0x001EBF, "Member 'UABP_Human_TP_Downed_C::IsInZeroG' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, Was_DownedFalling_) == 0x001EC0, "Member 'UABP_Human_TP_Downed_C::Was_DownedFalling_' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsDownedFalling_) == 0x001EC1, "Member 'UABP_Human_TP_Downed_C::IsDownedFalling_' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, Was_in_ZeroGFloating_) == 0x001EC2, "Member 'UABP_Human_TP_Downed_C::Was_in_ZeroGFloating_' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsInZeroGFloating_) == 0x001EC3, "Member 'UABP_Human_TP_Downed_C::IsInZeroGFloating_' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, HaveGround) == 0x001EC4, "Member 'UABP_Human_TP_Downed_C::HaveGround' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, GroundNormal) == 0x001EC8, "Member 'UABP_Human_TP_Downed_C::GroundNormal' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, GroundPoint) == 0x001ED4, "Member 'UABP_Human_TP_Downed_C::GroundPoint' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, SlopeRotator) == 0x001EE0, "Member 'UABP_Human_TP_Downed_C::SlopeRotator' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, CAChar_MainPlayer) == 0x001EF0, "Member 'UABP_Human_TP_Downed_C::CAChar_MainPlayer' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, WasUsedRecently) == 0x001EF8, "Member 'UABP_Human_TP_Downed_C::WasUsedRecently' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, BodyOffsetForFootPlanting) == 0x001EFC, "Member 'UABP_Human_TP_Downed_C::BodyOffsetForFootPlanting' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, SlopeSampleVector) == 0x001F08, "Member 'UABP_Human_TP_Downed_C::SlopeSampleVector' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, GroundSampleOffset) == 0x001F14, "Member 'UABP_Human_TP_Downed_C::GroundSampleOffset' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, Player_Movement_Mode) == 0x001F20, "Member 'UABP_Human_TP_Downed_C::Player_Movement_Mode' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimToDownedBack) == 0x001F28, "Member 'UABP_Human_TP_Downed_C::AnimToDownedBack' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimToDownedLeft) == 0x001F38, "Member 'UABP_Human_TP_Downed_C::AnimToDownedLeft' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimToDownedFwd) == 0x001F48, "Member 'UABP_Human_TP_Downed_C::AnimToDownedFwd' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimToDownedRight) == 0x001F58, "Member 'UABP_Human_TP_Downed_C::AnimToDownedRight' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AnimToDownedRecovery) == 0x001F68, "Member 'UABP_Human_TP_Downed_C::AnimToDownedRecovery' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, FEATURE_CA_SKILLFUL_KILLS) == 0x001F70, "Member 'UABP_Human_TP_Downed_C::FEATURE_CA_SKILLFUL_KILLS' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, Z__Yaw_) == 0x001F74, "Member 'UABP_Human_TP_Downed_C::Z__Yaw_' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, AimingYaw) == 0x001F78, "Member 'UABP_Human_TP_Downed_C::AimingYaw' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, IsDownedLocomotionStarted) == 0x001F7C, "Member 'UABP_Human_TP_Downed_C::IsDownedLocomotionStarted' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, Ground_Point) == 0x001F80, "Member 'UABP_Human_TP_Downed_C::Ground_Point' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, GroundHandPoint) == 0x001F8C, "Member 'UABP_Human_TP_Downed_C::GroundHandPoint' has a wrong offset!");
static_assert(offsetof(UABP_Human_TP_Downed_C, HandRotator) == 0x001F98, "Member 'UABP_Human_TP_Downed_C::HandRotator' has a wrong offset!");

}

