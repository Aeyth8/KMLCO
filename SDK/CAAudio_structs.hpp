#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CAAudio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// Enum CAAudio.ECAAudioMemoryPool
// NumValues: 0x0002
enum class ECAAudioMemoryPool : uint8
{
	General                                  = 0,
	ECAAudioMemoryPool_MAX                   = 1,
};

// Enum CAAudio.ECAAudioDialoguePriority
// NumValues: 0x0007
enum class ECAAudioDialoguePriority : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	Critical                                 = 4,
	MAX_PRIORITIES                           = 5,
	ECAAudioDialoguePriority_MAX             = 6,
};

// Enum CAAudio.ECAAudioAnimNotify_Perspective
// NumValues: 0x0004
enum class ECAAudioAnimNotify_Perspective : uint8
{
	Any                                      = 0,
	First                                    = 1,
	Third                                    = 2,
	ECAAudioAnimNotify_MAX                   = 3,
};

// Enum CAAudio.ECAAudioBankScope
// NumValues: 0x0003
enum class ECAAudioBankScope : uint8
{
	ABS_Persistent                           = 0,
	ABS_Level                                = 1,
	ABS_MAX                                  = 2,
};

// Enum CAAudio.ECAAudioTriggerType
// NumValues: 0x0003
enum class ECAAudioTriggerType : uint8
{
	StandardPlayback                         = 0,
	MontageOnly                              = 1,
	ECAAudioTriggerType_MAX                  = 2,
};

// Enum CAAudio.ECAMusicPlaylistPlaybackMethod
// NumValues: 0x0004
enum class ECAMusicPlaylistPlaybackMethod : uint8
{
	Normal                                   = 0,
	Random                                   = 1,
	Shuffle                                  = 2,
	ECAMusicPlaylistPlaybackMethod_MAX       = 3,
};

// Enum CAAudio.ECAAudioVOIPType
// NumValues: 0x0004
enum class ECAAudioVOIPType : uint8
{
	Native                                   = 0,
	Wwise                                    = 1,
	Both                                     = 2,
	ECAAudioVOIPType_MAX                     = 3,
};

// Enum CAAudio.ELinkType
// NumValues: 0x0007
enum class ELinkType : uint8
{
	ELT_Door                                 = 0,
	ELT_Opening                              = 1,
	ELT_Window                               = 2,
	ELT_Wall                                 = 3,
	ELT_Permutation                          = 4,
	ELT_AutoFill                             = 5,
	ELT_MAX                                  = 6,
};

// Enum CAAudio.ECASPrPointType
// NumValues: 0x0004
enum class ECASPrPointType : uint8
{
	EPT_OpenVoxelsOnly                       = 0,
	ELT_SamplesOnly                          = 1,
	ELT_OpenVoxelsAndClosedSamples           = 2,
	ECASPrPointType_MAX                      = 3,
};

// Enum CAAudio.EZonePatchFidelity
// NumValues: 0x0004
enum class EZonePatchFidelity : uint8
{
	EZPF_Standard                            = 0,
	EZPF_AdjacentSearch                      = 1,
	EZPF_AllDirectionSearch                  = 2,
	EZPF_MAX                                 = 3,
};

// Enum CAAudio.EZonePatchType
// NumValues: 0x0003
enum class EZonePatchType : uint8
{
	EZPT_Patch                               = 0,
	EZPT_Sample                              = 1,
	EZPT_MAX                                 = 2,
};

// Enum CAAudio.EZoneType
// NumValues: 0x0004
enum class EZoneType : uint8
{
	EZT_Standard                             = 0,
	EZT_Camp                                 = 1,
	EZT_Phantom                              = 2,
	EZT_MAX                                  = 3,
};

// ScriptStruct CAAudio.CAAudioHashBase
// 0x0004 (0x0004 - 0x0000)
struct FCAAudioHashBase
{
public:
	int32                                         M_audio_hash;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAAudioHashBase) == 0x000004, "Wrong alignment on FCAAudioHashBase");
static_assert(sizeof(FCAAudioHashBase) == 0x000004, "Wrong size on FCAAudioHashBase");
static_assert(offsetof(FCAAudioHashBase, M_audio_hash) == 0x000000, "Member 'FCAAudioHashBase::M_audio_hash' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioEventType
// 0x0000 (0x0004 - 0x0004)
struct FCAAudioEventType final : public FCAAudioHashBase
{
};
static_assert(alignof(FCAAudioEventType) == 0x000004, "Wrong alignment on FCAAudioEventType");
static_assert(sizeof(FCAAudioEventType) == 0x000004, "Wrong size on FCAAudioEventType");

// ScriptStruct CAAudio.EventSoundbankLink
// 0x0038 (0x0038 - 0x0000)
struct FEventSoundbankLink final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCAAudioBank>            AssociatedSoundbank;                               // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventSoundbankLink) == 0x000008, "Wrong alignment on FEventSoundbankLink");
static_assert(sizeof(FEventSoundbankLink) == 0x000038, "Wrong size on FEventSoundbankLink");
static_assert(offsetof(FEventSoundbankLink, Event) == 0x000000, "Member 'FEventSoundbankLink::Event' has a wrong offset!");
static_assert(offsetof(FEventSoundbankLink, AssociatedSoundbank) == 0x000008, "Member 'FEventSoundbankLink::AssociatedSoundbank' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioSwitchNameType
// 0x0000 (0x0004 - 0x0004)
struct FCAAudioSwitchNameType final : public FCAAudioHashBase
{
};
static_assert(alignof(FCAAudioSwitchNameType) == 0x000004, "Wrong alignment on FCAAudioSwitchNameType");
static_assert(sizeof(FCAAudioSwitchNameType) == 0x000004, "Wrong size on FCAAudioSwitchNameType");

// ScriptStruct CAAudio.CAAudioPlaybackInstance
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FCAAudioPlaybackInstance final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAudioPlaybackInstance) == 0x000008, "Wrong alignment on FCAAudioPlaybackInstance");
static_assert(sizeof(FCAAudioPlaybackInstance) == 0x000010, "Wrong size on FCAAudioPlaybackInstance");

// ScriptStruct CAAudio.CAAudioBankNameType
// 0x0000 (0x0004 - 0x0004)
struct FCAAudioBankNameType final : public FCAAudioHashBase
{
};
static_assert(alignof(FCAAudioBankNameType) == 0x000004, "Wrong alignment on FCAAudioBankNameType");
static_assert(sizeof(FCAAudioBankNameType) == 0x000004, "Wrong size on FCAAudioBankNameType");

// ScriptStruct CAAudio.CAAudioPersistentBanksTableRow
// 0x0010 (0x0018 - 0x0008)
struct FCAAudioPersistentBanksTableRow final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class UCAAudioBank>>    PersistentBanks;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAAudioPersistentBanksTableRow) == 0x000008, "Wrong alignment on FCAAudioPersistentBanksTableRow");
static_assert(sizeof(FCAAudioPersistentBanksTableRow) == 0x000018, "Wrong size on FCAAudioPersistentBanksTableRow");
static_assert(offsetof(FCAAudioPersistentBanksTableRow, PersistentBanks) == 0x000008, "Member 'FCAAudioPersistentBanksTableRow::PersistentBanks' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioStateValueType
// 0x0000 (0x0004 - 0x0004)
struct FCAAudioStateValueType final : public FCAAudioHashBase
{
};
static_assert(alignof(FCAAudioStateValueType) == 0x000004, "Wrong alignment on FCAAudioStateValueType");
static_assert(sizeof(FCAAudioStateValueType) == 0x000004, "Wrong size on FCAAudioStateValueType");

// ScriptStruct CAAudio.CAAudioSwitchValueType
// 0x0000 (0x0004 - 0x0004)
struct FCAAudioSwitchValueType final : public FCAAudioHashBase
{
};
static_assert(alignof(FCAAudioSwitchValueType) == 0x000004, "Wrong alignment on FCAAudioSwitchValueType");
static_assert(sizeof(FCAAudioSwitchValueType) == 0x000004, "Wrong size on FCAAudioSwitchValueType");

// ScriptStruct CAAudio.CAAudioMusicSpeakerRangeTableRow
// 0x0008 (0x0010 - 0x0008)
struct FCAAudioMusicSpeakerRangeTableRow final : public FTableRowBase
{
public:
	struct FCAAudioStateValueType                 SpeakerSize;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAAudioMusicSpeakerRangeTableRow) == 0x000008, "Wrong alignment on FCAAudioMusicSpeakerRangeTableRow");
static_assert(sizeof(FCAAudioMusicSpeakerRangeTableRow) == 0x000010, "Wrong size on FCAAudioMusicSpeakerRangeTableRow");
static_assert(offsetof(FCAAudioMusicSpeakerRangeTableRow, SpeakerSize) == 0x000008, "Member 'FCAAudioMusicSpeakerRangeTableRow::SpeakerSize' has a wrong offset!");
static_assert(offsetof(FCAAudioMusicSpeakerRangeTableRow, Range) == 0x00000C, "Member 'FCAAudioMusicSpeakerRangeTableRow::Range' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioRTPCNameType
// 0x0000 (0x0004 - 0x0004)
struct FCAAudioRTPCNameType final : public FCAAudioHashBase
{
};
static_assert(alignof(FCAAudioRTPCNameType) == 0x000004, "Wrong alignment on FCAAudioRTPCNameType");
static_assert(sizeof(FCAAudioRTPCNameType) == 0x000004, "Wrong size on FCAAudioRTPCNameType");

// ScriptStruct CAAudio.CAAudioStateNameType
// 0x0000 (0x0004 - 0x0004)
struct FCAAudioStateNameType final : public FCAAudioHashBase
{
};
static_assert(alignof(FCAAudioStateNameType) == 0x000004, "Wrong alignment on FCAAudioStateNameType");
static_assert(sizeof(FCAAudioStateNameType) == 0x000004, "Wrong size on FCAAudioStateNameType");

// ScriptStruct CAAudio.CAAudioBannedStreamedFilesTableRow
// 0x0008 (0x0010 - 0x0008)
struct FCAAudioBannedStreamedFilesTableRow final : public FTableRowBase
{
public:
	int32                                         FileID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAudioBannedStreamedFilesTableRow) == 0x000008, "Wrong alignment on FCAAudioBannedStreamedFilesTableRow");
static_assert(sizeof(FCAAudioBannedStreamedFilesTableRow) == 0x000010, "Wrong size on FCAAudioBannedStreamedFilesTableRow");
static_assert(offsetof(FCAAudioBannedStreamedFilesTableRow, FileID) == 0x000008, "Member 'FCAAudioBannedStreamedFilesTableRow::FileID' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioBannedEventsTableRow
// 0x0008 (0x0010 - 0x0008)
struct FCAAudioBannedEventsTableRow final : public FTableRowBase
{
public:
	struct FCAAudioEventType                      BannedEvent;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAudioBannedEventsTableRow) == 0x000008, "Wrong alignment on FCAAudioBannedEventsTableRow");
static_assert(sizeof(FCAAudioBannedEventsTableRow) == 0x000010, "Wrong size on FCAAudioBannedEventsTableRow");
static_assert(offsetof(FCAAudioBannedEventsTableRow, BannedEvent) == 0x000008, "Member 'FCAAudioBannedEventsTableRow::BannedEvent' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioAuxBusType
// 0x0000 (0x0004 - 0x0004)
struct FCAAudioAuxBusType final : public FCAAudioHashBase
{
};
static_assert(alignof(FCAAudioAuxBusType) == 0x000004, "Wrong alignment on FCAAudioAuxBusType");
static_assert(sizeof(FCAAudioAuxBusType) == 0x000004, "Wrong size on FCAAudioAuxBusType");

// ScriptStruct CAAudio.CADialogueGenderMap
// 0x0008 (0x0008 - 0x0000)
struct FCADialogueGenderMap final
{
public:
	struct FCAAudioHashBase                       MappingID;                                         // 0x0000(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioHashBase                       WwiseID;                                           // 0x0004(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCADialogueGenderMap) == 0x000004, "Wrong alignment on FCADialogueGenderMap");
static_assert(sizeof(FCADialogueGenderMap) == 0x000008, "Wrong size on FCADialogueGenderMap");
static_assert(offsetof(FCADialogueGenderMap, MappingID) == 0x000000, "Member 'FCADialogueGenderMap::MappingID' has a wrong offset!");
static_assert(offsetof(FCADialogueGenderMap, WwiseID) == 0x000004, "Member 'FCADialogueGenderMap::WwiseID' has a wrong offset!");

// ScriptStruct CAAudio.CADialogueLanguageMappingData
// 0x0010 (0x0018 - 0x0008)
struct FCADialogueLanguageMappingData final : public FTableRowBase
{
public:
	TArray<struct FCADialogueGenderMap>           GenderMap;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCADialogueLanguageMappingData) == 0x000008, "Wrong alignment on FCADialogueLanguageMappingData");
static_assert(sizeof(FCADialogueLanguageMappingData) == 0x000018, "Wrong size on FCADialogueLanguageMappingData");
static_assert(offsetof(FCADialogueLanguageMappingData, GenderMap) == 0x000008, "Member 'FCADialogueLanguageMappingData::GenderMap' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioDialogueSettingsTableRow
// 0x0038 (0x0040 - 0x0008)
struct FCAAudioDialogueSettingsTableRow final : public FTableRowBase
{
public:
	float                                         ObjectSpacerInterruptTime;                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectSpacerQueueMinTime;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectSpacerQueueMaxTime;                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalSpacerQueueMinTime;                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalSpacerQueueMaxTime;                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNonCriticalStreams;                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDisplayTime;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCFollowUpRadius;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemySpecialistsFollowUpRadius;                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShoutedProjectionRTPCThreshold;                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HushedLineMaxDistance;                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TPCommsSpacerQueueMaxTime;                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TPCommsSpacerQueueMinTime;                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAudioDialogueSettingsTableRow) == 0x000008, "Wrong alignment on FCAAudioDialogueSettingsTableRow");
static_assert(sizeof(FCAAudioDialogueSettingsTableRow) == 0x000040, "Wrong size on FCAAudioDialogueSettingsTableRow");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, ObjectSpacerInterruptTime) == 0x000008, "Member 'FCAAudioDialogueSettingsTableRow::ObjectSpacerInterruptTime' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, ObjectSpacerQueueMinTime) == 0x00000C, "Member 'FCAAudioDialogueSettingsTableRow::ObjectSpacerQueueMinTime' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, ObjectSpacerQueueMaxTime) == 0x000010, "Member 'FCAAudioDialogueSettingsTableRow::ObjectSpacerQueueMaxTime' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, GlobalSpacerQueueMinTime) == 0x000014, "Member 'FCAAudioDialogueSettingsTableRow::GlobalSpacerQueueMinTime' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, GlobalSpacerQueueMaxTime) == 0x000018, "Member 'FCAAudioDialogueSettingsTableRow::GlobalSpacerQueueMaxTime' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, MaxNonCriticalStreams) == 0x00001C, "Member 'FCAAudioDialogueSettingsTableRow::MaxNonCriticalStreams' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, DebugDisplayTime) == 0x000020, "Member 'FCAAudioDialogueSettingsTableRow::DebugDisplayTime' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, NPCFollowUpRadius) == 0x000024, "Member 'FCAAudioDialogueSettingsTableRow::NPCFollowUpRadius' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, EnemySpecialistsFollowUpRadius) == 0x000028, "Member 'FCAAudioDialogueSettingsTableRow::EnemySpecialistsFollowUpRadius' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, ShoutedProjectionRTPCThreshold) == 0x00002C, "Member 'FCAAudioDialogueSettingsTableRow::ShoutedProjectionRTPCThreshold' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, HushedLineMaxDistance) == 0x000030, "Member 'FCAAudioDialogueSettingsTableRow::HushedLineMaxDistance' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, TPCommsSpacerQueueMaxTime) == 0x000034, "Member 'FCAAudioDialogueSettingsTableRow::TPCommsSpacerQueueMaxTime' has a wrong offset!");
static_assert(offsetof(FCAAudioDialogueSettingsTableRow, TPCommsSpacerQueueMinTime) == 0x000038, "Member 'FCAAudioDialogueSettingsTableRow::TPCommsSpacerQueueMinTime' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioMaterialTable
// 0x0030 (0x0038 - 0x0008)
struct FCAAudioMaterialTable final : public FTableRowBase
{
public:
	EPhysicalSurface                              PhysicalSurface;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaterialName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCAAudioSwitchValueType                SwitchValue;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EarlyReflectionTexture;                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAAudioMaterialTable) == 0x000008, "Wrong alignment on FCAAudioMaterialTable");
static_assert(sizeof(FCAAudioMaterialTable) == 0x000038, "Wrong size on FCAAudioMaterialTable");
static_assert(offsetof(FCAAudioMaterialTable, PhysicalSurface) == 0x000008, "Member 'FCAAudioMaterialTable::PhysicalSurface' has a wrong offset!");
static_assert(offsetof(FCAAudioMaterialTable, MaterialName) == 0x000010, "Member 'FCAAudioMaterialTable::MaterialName' has a wrong offset!");
static_assert(offsetof(FCAAudioMaterialTable, SwitchValue) == 0x000020, "Member 'FCAAudioMaterialTable::SwitchValue' has a wrong offset!");
static_assert(offsetof(FCAAudioMaterialTable, EarlyReflectionTexture) == 0x000028, "Member 'FCAAudioMaterialTable::EarlyReflectionTexture' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioMixSettingsTableRow
// 0x0028 (0x0030 - 0x0008)
struct FCAAudioMixSettingsTableRow final : public FTableRowBase
{
public:
	int32                                         MinEnemyCount;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEnemyCount;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScalarValue;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombatEnemyThreshold;                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StealthEnemyThreshold;                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatStateCooldown;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxUnitsInCombatCount;                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TPConeMaxDistance;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterTPConeMaxAngle;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerTPConeMaxAngle;                               // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAAudioMixSettingsTableRow) == 0x000008, "Wrong alignment on FCAAudioMixSettingsTableRow");
static_assert(sizeof(FCAAudioMixSettingsTableRow) == 0x000030, "Wrong size on FCAAudioMixSettingsTableRow");
static_assert(offsetof(FCAAudioMixSettingsTableRow, MinEnemyCount) == 0x000008, "Member 'FCAAudioMixSettingsTableRow::MinEnemyCount' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, MaxEnemyCount) == 0x00000C, "Member 'FCAAudioMixSettingsTableRow::MaxEnemyCount' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, MinScalarValue) == 0x000010, "Member 'FCAAudioMixSettingsTableRow::MinScalarValue' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, CombatEnemyThreshold) == 0x000014, "Member 'FCAAudioMixSettingsTableRow::CombatEnemyThreshold' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, StealthEnemyThreshold) == 0x000018, "Member 'FCAAudioMixSettingsTableRow::StealthEnemyThreshold' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, CombatStateCooldown) == 0x00001C, "Member 'FCAAudioMixSettingsTableRow::CombatStateCooldown' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, MaxUnitsInCombatCount) == 0x000020, "Member 'FCAAudioMixSettingsTableRow::MaxUnitsInCombatCount' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, TPConeMaxDistance) == 0x000024, "Member 'FCAAudioMixSettingsTableRow::TPConeMaxDistance' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, OuterTPConeMaxAngle) == 0x000028, "Member 'FCAAudioMixSettingsTableRow::OuterTPConeMaxAngle' has a wrong offset!");
static_assert(offsetof(FCAAudioMixSettingsTableRow, InnerTPConeMaxAngle) == 0x00002C, "Member 'FCAAudioMixSettingsTableRow::InnerTPConeMaxAngle' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioMusicPlaylistTableRow
// 0x0028 (0x0030 - 0x0008)
struct FCAAudioMusicPlaylistTableRow final : public FTableRowBase
{
public:
	class FString                                 PlaylistName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEventSoundbankLink>            EventPlaylist;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ECAMusicPlaylistPlaybackMethod                PlaybackMethod;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAudioMusicPlaylistTableRow) == 0x000008, "Wrong alignment on FCAAudioMusicPlaylistTableRow");
static_assert(sizeof(FCAAudioMusicPlaylistTableRow) == 0x000030, "Wrong size on FCAAudioMusicPlaylistTableRow");
static_assert(offsetof(FCAAudioMusicPlaylistTableRow, PlaylistName) == 0x000008, "Member 'FCAAudioMusicPlaylistTableRow::PlaylistName' has a wrong offset!");
static_assert(offsetof(FCAAudioMusicPlaylistTableRow, EventPlaylist) == 0x000018, "Member 'FCAAudioMusicPlaylistTableRow::EventPlaylist' has a wrong offset!");
static_assert(offsetof(FCAAudioMusicPlaylistTableRow, PlaybackMethod) == 0x000028, "Member 'FCAAudioMusicPlaylistTableRow::PlaybackMethod' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioSettingsTableRow
// 0x0040 (0x0048 - 0x0008)
struct FCAAudioSettingsTableRow final : public FTableRowBase
{
public:
	float                                         MinImpactSpeed;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDisplayTime;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWhizzBys;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectPoolSize;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PortalledObjectPoolSize;                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCharacterUpdatesPerFrame;                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRTPCSpeed;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECAAudioVOIPType                              DefaultVOIPType;                                   // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VOIPStereoConversionFactor;                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VOIPNumBuffers;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VOIPBufferMS;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VOIPVADHangover;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VOIPVADSensitivity;                                // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VOIPVADNoiseFloor;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VOIPVADAuto;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAAudioSettingsTableRow) == 0x000008, "Wrong alignment on FCAAudioSettingsTableRow");
static_assert(sizeof(FCAAudioSettingsTableRow) == 0x000048, "Wrong size on FCAAudioSettingsTableRow");
static_assert(offsetof(FCAAudioSettingsTableRow, MinImpactSpeed) == 0x000008, "Member 'FCAAudioSettingsTableRow::MinImpactSpeed' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, DebugDisplayTime) == 0x00000C, "Member 'FCAAudioSettingsTableRow::DebugDisplayTime' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, MaxWhizzBys) == 0x000010, "Member 'FCAAudioSettingsTableRow::MaxWhizzBys' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, ObjectPoolSize) == 0x000014, "Member 'FCAAudioSettingsTableRow::ObjectPoolSize' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, PortalledObjectPoolSize) == 0x000018, "Member 'FCAAudioSettingsTableRow::PortalledObjectPoolSize' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, NumCharacterUpdatesPerFrame) == 0x00001C, "Member 'FCAAudioSettingsTableRow::NumCharacterUpdatesPerFrame' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, MaxRTPCSpeed) == 0x000020, "Member 'FCAAudioSettingsTableRow::MaxRTPCSpeed' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, DefaultVOIPType) == 0x000024, "Member 'FCAAudioSettingsTableRow::DefaultVOIPType' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, VOIPStereoConversionFactor) == 0x000028, "Member 'FCAAudioSettingsTableRow::VOIPStereoConversionFactor' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, VOIPNumBuffers) == 0x00002C, "Member 'FCAAudioSettingsTableRow::VOIPNumBuffers' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, VOIPBufferMS) == 0x000030, "Member 'FCAAudioSettingsTableRow::VOIPBufferMS' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, VOIPVADHangover) == 0x000034, "Member 'FCAAudioSettingsTableRow::VOIPVADHangover' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, VOIPVADSensitivity) == 0x000038, "Member 'FCAAudioSettingsTableRow::VOIPVADSensitivity' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, VOIPVADNoiseFloor) == 0x00003C, "Member 'FCAAudioSettingsTableRow::VOIPVADNoiseFloor' has a wrong offset!");
static_assert(offsetof(FCAAudioSettingsTableRow, VOIPVADAuto) == 0x000040, "Member 'FCAAudioSettingsTableRow::VOIPVADAuto' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioOccludedSourceMap
// 0x0008 (0x0008 - 0x0000)
struct FCAAudioOccludedSourceMap final
{
public:
	struct FCAAudioEventType                      Event;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCAAudioEventType                      OccludedEvent;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAAudioOccludedSourceMap) == 0x000004, "Wrong alignment on FCAAudioOccludedSourceMap");
static_assert(sizeof(FCAAudioOccludedSourceMap) == 0x000008, "Wrong size on FCAAudioOccludedSourceMap");
static_assert(offsetof(FCAAudioOccludedSourceMap, Event) == 0x000000, "Member 'FCAAudioOccludedSourceMap::Event' has a wrong offset!");
static_assert(offsetof(FCAAudioOccludedSourceMap, OccludedEvent) == 0x000004, "Member 'FCAAudioOccludedSourceMap::OccludedEvent' has a wrong offset!");

// ScriptStruct CAAudio.CAAudioWwiseLanguageMappingTableRow
// 0x0020 (0x0028 - 0x0008)
struct FCAAudioWwiseLanguageMappingTableRow final : public FTableRowBase
{
public:
	class FString                                 WwiseLanguage;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IETFLocale;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAAudioWwiseLanguageMappingTableRow) == 0x000008, "Wrong alignment on FCAAudioWwiseLanguageMappingTableRow");
static_assert(sizeof(FCAAudioWwiseLanguageMappingTableRow) == 0x000028, "Wrong size on FCAAudioWwiseLanguageMappingTableRow");
static_assert(offsetof(FCAAudioWwiseLanguageMappingTableRow, WwiseLanguage) == 0x000008, "Member 'FCAAudioWwiseLanguageMappingTableRow::WwiseLanguage' has a wrong offset!");
static_assert(offsetof(FCAAudioWwiseLanguageMappingTableRow, IETFLocale) == 0x000018, "Member 'FCAAudioWwiseLanguageMappingTableRow::IETFLocale' has a wrong offset!");

// ScriptStruct CAAudio.CASpatialAudioEarlyReflectionData
// 0x0030 (0x0030 - 0x0000)
struct FCASpatialAudioEarlyReflectionData final
{
public:
	class FString                                 WwiseBus;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FixToHorizontalPlane;                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FixedDirections;                                   // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DiagonalPriorityScalar;                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontRearLevel;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanDistance;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScalingFactor;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionInnerAngle;                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionOuterAngle;                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCASpatialAudioEarlyReflectionData) == 0x000008, "Wrong alignment on FCASpatialAudioEarlyReflectionData");
static_assert(sizeof(FCASpatialAudioEarlyReflectionData) == 0x000030, "Wrong size on FCASpatialAudioEarlyReflectionData");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, WwiseBus) == 0x000000, "Member 'FCASpatialAudioEarlyReflectionData::WwiseBus' has a wrong offset!");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, FixToHorizontalPlane) == 0x000010, "Member 'FCASpatialAudioEarlyReflectionData::FixToHorizontalPlane' has a wrong offset!");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, FixedDirections) == 0x000011, "Member 'FCASpatialAudioEarlyReflectionData::FixedDirections' has a wrong offset!");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, DiagonalPriorityScalar) == 0x000014, "Member 'FCASpatialAudioEarlyReflectionData::DiagonalPriorityScalar' has a wrong offset!");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, FrontRearLevel) == 0x000018, "Member 'FCASpatialAudioEarlyReflectionData::FrontRearLevel' has a wrong offset!");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, ScanDistance) == 0x00001C, "Member 'FCASpatialAudioEarlyReflectionData::ScanDistance' has a wrong offset!");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, ScalingFactor) == 0x000020, "Member 'FCASpatialAudioEarlyReflectionData::ScalingFactor' has a wrong offset!");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, ReflectionInnerAngle) == 0x000024, "Member 'FCASpatialAudioEarlyReflectionData::ReflectionInnerAngle' has a wrong offset!");
static_assert(offsetof(FCASpatialAudioEarlyReflectionData, ReflectionOuterAngle) == 0x000028, "Member 'FCASpatialAudioEarlyReflectionData::ReflectionOuterAngle' has a wrong offset!");

// ScriptStruct CAAudio.CASPrSettingsTableRow
// 0x0020 (0x0028 - 0x0008)
struct FCASPrSettingsTableRow final : public FTableRowBase
{
public:
	TArray<class UStaticMesh*>                    IgnoreMeshes;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LinkOverlapPercent;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoneOverlapPercent;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinkPatchingOffset;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinkPatchingSpacing;                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCASPrSettingsTableRow) == 0x000008, "Wrong alignment on FCASPrSettingsTableRow");
static_assert(sizeof(FCASPrSettingsTableRow) == 0x000028, "Wrong size on FCASPrSettingsTableRow");
static_assert(offsetof(FCASPrSettingsTableRow, IgnoreMeshes) == 0x000008, "Member 'FCASPrSettingsTableRow::IgnoreMeshes' has a wrong offset!");
static_assert(offsetof(FCASPrSettingsTableRow, LinkOverlapPercent) == 0x000018, "Member 'FCASPrSettingsTableRow::LinkOverlapPercent' has a wrong offset!");
static_assert(offsetof(FCASPrSettingsTableRow, ZoneOverlapPercent) == 0x00001C, "Member 'FCASPrSettingsTableRow::ZoneOverlapPercent' has a wrong offset!");
static_assert(offsetof(FCASPrSettingsTableRow, LinkPatchingOffset) == 0x000020, "Member 'FCASPrSettingsTableRow::LinkPatchingOffset' has a wrong offset!");
static_assert(offsetof(FCASPrSettingsTableRow, LinkPatchingSpacing) == 0x000024, "Member 'FCASPrSettingsTableRow::LinkPatchingSpacing' has a wrong offset!");

}

