#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tactical_EffectSphere_EMP

#include "Basic.hpp"

#include "BP_Tactical_EffectSphere_EMP_classes.hpp"
#include "BP_Tactical_EffectSphere_EMP_parameters.hpp"


namespace SDK
{

// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.ExecuteUbergraph_BP_Tactical_EffectSphere_EMP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::ExecuteUbergraph_BP_Tactical_EffectSphere_EMP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "ExecuteUbergraph_BP_Tactical_EffectSphere_EMP");

	Params::BP_Tactical_EffectSphere_EMP_C_ExecuteUbergraph_BP_Tactical_EffectSphere_EMP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "ReceiveEndPlay");

	Params::BP_Tactical_EffectSphere_EMP_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "ReceiveTick");

	Params::BP_Tactical_EffectSphere_EMP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Tactical_EffectSphere_EMP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.TryApplyingOverlappingEffect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::TryApplyingOverlappingEffect(class AActor* OverlappingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "TryApplyingOverlappingEffect");

	Params::BP_Tactical_EffectSphere_EMP_C_TryApplyingOverlappingEffect Parms{};

	Parms.OverlappingActor = OverlappingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_1_SceneComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class USceneComponent*                  OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_1_SceneComponentEndOverlapSignature__DelegateSignature(class USceneComponent* OverlappedComponent, class AActor* OtherActor, class USceneComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_1_SceneComponentEndOverlapSignature__DelegateSignature");

	Params::BP_Tactical_EffectSphere_EMP_C_BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_1_SceneComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_0_SceneComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class USceneComponent*                  OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Tactical_EffectSphere_EMP_C::BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_0_SceneComponentBeginOverlapSignature__DelegateSignature(class USceneComponent* OverlappedComponent, class AActor* OtherActor, class USceneComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_0_SceneComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_Tactical_EffectSphere_EMP_C_BndEvt__BP_Tactical_EffectSphere_EMP_CAGameplayCollision_K2Node_ComponentBoundEvent_0_SceneComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Tactical_EffectSphere_EMP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.SetBalancingVariables
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Tactical_EffectSphere_EMP_C::SetBalancingVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "SetBalancingVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.GetDurationFromDT
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Upgraded                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNPCThrown                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Lifespan                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::GetDurationFromDT(bool Upgraded, bool IsNPCThrown, float* Lifespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "GetDurationFromDT");

	Params::BP_Tactical_EffectSphere_EMP_C_GetDurationFromDT Parms{};

	Parms.Upgraded = Upgraded;
	Parms.IsNPCThrown = IsNPCThrown;

	UObject::ProcessEvent(Func, &Parms);

	if (Lifespan != nullptr)
		*Lifespan = Parms.Lifespan;
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.Remove Linger Effect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target_Actor                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::Remove_Linger_Effect(const class AActor*& Target_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "Remove Linger Effect");

	Params::BP_Tactical_EffectSphere_EMP_C_Remove_Linger_Effect Parms{};

	Parms.Target_Actor = Target_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.TriggerVFX
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Tactical_EffectSphere_EMP_C::TriggerVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "TriggerVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.StartSFX
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Tactical_Level_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCAAudioPlaybackInstance         Looped_SFX_Instance                                    (Parm, OutParm)

void ABP_Tactical_EffectSphere_EMP_C::StartSFX(int32 Tactical_Level_0, struct FCAAudioPlaybackInstance* Looped_SFX_Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "StartSFX");

	Params::BP_Tactical_EffectSphere_EMP_C_StartSFX Parms{};

	Parms.Tactical_Level_0 = Tactical_Level_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Looped_SFX_Instance != nullptr)
		*Looped_SFX_Instance = std::move(Parms.Looped_SFX_Instance);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.PlaySFXOnSphereEnding
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Tactical_EffectSphere_EMP_C::PlaySFXOnSphereEnding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "PlaySFXOnSphereEnding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.Check Destroy Overlapping Actor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Overlapped_Actor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Disruption_Handled                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Tactical_EffectSphere_EMP_C::Check_Destroy_Overlapping_Actor(class AActor* Overlapped_Actor, bool* Disruption_Handled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "Check Destroy Overlapping Actor");

	Params::BP_Tactical_EffectSphere_EMP_C_Check_Destroy_Overlapping_Actor Parms{};

	Parms.Overlapped_Actor = Overlapped_Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Disruption_Handled != nullptr)
		*Disruption_Handled = Parms.Disruption_Handled;
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.Apply Player EMP GE
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAbilitySystemComponent*          Target_Ability_System_Component_Reference              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FActiveGameplayEffectHandle      Out_GE                                                 (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::Apply_Player_EMP_GE(class UAbilitySystemComponent*& Target_Ability_System_Component_Reference, struct FActiveGameplayEffectHandle* Out_GE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "Apply Player EMP GE");

	Params::BP_Tactical_EffectSphere_EMP_C_Apply_Player_EMP_GE Parms{};

	Parms.Target_Ability_System_Component_Reference = Target_Ability_System_Component_Reference;

	UObject::ProcessEvent(Func, &Parms);

	Target_Ability_System_Component_Reference = Parms.Target_Ability_System_Component_Reference;

	if (Out_GE != nullptr)
		*Out_GE = std::move(Parms.Out_GE);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.Apply Player EMP Linger GE
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAbilitySystemComponent*          Target_Ability_System_Component_Reference              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Tactical_EffectSphere_EMP_C::Apply_Player_EMP_Linger_GE(class UAbilitySystemComponent*& Target_Ability_System_Component_Reference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "Apply Player EMP Linger GE");

	Params::BP_Tactical_EffectSphere_EMP_C_Apply_Player_EMP_Linger_GE Parms{};

	Parms.Target_Ability_System_Component_Reference = Target_Ability_System_Component_Reference;

	UObject::ProcessEvent(Func, &Parms);

	Target_Ability_System_Component_Reference = Parms.Target_Ability_System_Component_Reference;
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.OnRep_TimeDetonated
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Tactical_EffectSphere_EMP_C::OnRep_TimeDetonated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "OnRep_TimeDetonated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Tactical_EffectSphere_EMP.BP_Tactical_EffectSphere_EMP_C.IsPlayerInFutureDamageArea
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_Tactical_EffectSphere_EMP_C::IsPlayerInFutureDamageArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Tactical_EffectSphere_EMP_C", "IsPlayerInFutureDamageArea");

	Params::BP_Tactical_EffectSphere_EMP_C_IsPlayerInFutureDamageArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

