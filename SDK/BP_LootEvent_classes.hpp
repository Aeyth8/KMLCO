#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LootEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Keaton_structs.hpp"
#include "Keaton_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LootEvent.BP_LootEvent_C
// 0x00F0 (0x0430 - 0x0340)
class ABP_LootEvent_C final : public ACAActorWithAbilities
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   LootCrateThreeSpawn;                               // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LootCrateTwoSpawn;                                 // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LootCrateOneSpawn;                                 // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow7;                                            // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NPCSpawnPoint_C*                   BPC_NPCSpawnPoint7;                                // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow6;                                            // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NPCSpawnPoint_C*                   BPC_NPCSpawnPoint6;                                // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow5;                                            // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NPCSpawnPoint_C*                   BPC_NPCSpawnPoint5;                                // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow4;                                            // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NPCSpawnPoint_C*                   BPC_NPCSpawnPoint4;                                // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow3;                                            // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NPCSpawnPoint_C*                   BPC_NPCSpawnPoint3;                                // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow2;                                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NPCSpawnPoint_C*                   BPC_NPCSpawnPoint2;                                // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NPCSpawnPoint_C*                   BPC_NPCSpawnPoint1;                                // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NPCSpawnPoint_C*                   BPC_NPCSpawnPoint;                                 // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UBPC_NPCSpawnPoint_C*>           NPCSpawnPoints;                                    // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ACASpawnManager*                        SpawnManager;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpawnActorCollisionHandlingMethod            Collision_Method;                                  // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     LootCrateSpawnPoints;                              // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         MapEntityID;                                       // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberOfLootedCrates;                              // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Mission_Trigger;                                   // 0x0420(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LootEvent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ActivateEvent();
	void CrateLooted(class ACACharacter_MainPlayer* LootingPlayer);
	void SetUpSpawnPoints();
	void SpawnNPCs();
	void SpawnLootCrates();
	void RegisterMapEntity();
	void ChangeIntelToAllPlayers(ECAInformationControlLevel IntelLevel);
	void SendPrimaryMessagingToPlayers(bool Ended_);
	void ActivateSecurityArea();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LootEvent_C">();
	}
	static class ABP_LootEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LootEvent_C>();
	}
};
static_assert(alignof(ABP_LootEvent_C) == 0x000008, "Wrong alignment on ABP_LootEvent_C");
static_assert(sizeof(ABP_LootEvent_C) == 0x000430, "Wrong size on ABP_LootEvent_C");
static_assert(offsetof(ABP_LootEvent_C, UberGraphFrame) == 0x000340, "Member 'ABP_LootEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, LootCrateThreeSpawn) == 0x000348, "Member 'ABP_LootEvent_C::LootCrateThreeSpawn' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, LootCrateTwoSpawn) == 0x000350, "Member 'ABP_LootEvent_C::LootCrateTwoSpawn' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, LootCrateOneSpawn) == 0x000358, "Member 'ABP_LootEvent_C::LootCrateOneSpawn' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Arrow7) == 0x000360, "Member 'ABP_LootEvent_C::Arrow7' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, BPC_NPCSpawnPoint7) == 0x000368, "Member 'ABP_LootEvent_C::BPC_NPCSpawnPoint7' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Arrow6) == 0x000370, "Member 'ABP_LootEvent_C::Arrow6' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, BPC_NPCSpawnPoint6) == 0x000378, "Member 'ABP_LootEvent_C::BPC_NPCSpawnPoint6' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Arrow5) == 0x000380, "Member 'ABP_LootEvent_C::Arrow5' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, BPC_NPCSpawnPoint5) == 0x000388, "Member 'ABP_LootEvent_C::BPC_NPCSpawnPoint5' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Arrow4) == 0x000390, "Member 'ABP_LootEvent_C::Arrow4' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, BPC_NPCSpawnPoint4) == 0x000398, "Member 'ABP_LootEvent_C::BPC_NPCSpawnPoint4' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Arrow3) == 0x0003A0, "Member 'ABP_LootEvent_C::Arrow3' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, BPC_NPCSpawnPoint3) == 0x0003A8, "Member 'ABP_LootEvent_C::BPC_NPCSpawnPoint3' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Arrow2) == 0x0003B0, "Member 'ABP_LootEvent_C::Arrow2' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, BPC_NPCSpawnPoint2) == 0x0003B8, "Member 'ABP_LootEvent_C::BPC_NPCSpawnPoint2' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Arrow1) == 0x0003C0, "Member 'ABP_LootEvent_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, BPC_NPCSpawnPoint1) == 0x0003C8, "Member 'ABP_LootEvent_C::BPC_NPCSpawnPoint1' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Arrow) == 0x0003D0, "Member 'ABP_LootEvent_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, BPC_NPCSpawnPoint) == 0x0003D8, "Member 'ABP_LootEvent_C::BPC_NPCSpawnPoint' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, DefaultSceneRoot) == 0x0003E0, "Member 'ABP_LootEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, NPCSpawnPoints) == 0x0003E8, "Member 'ABP_LootEvent_C::NPCSpawnPoints' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, SpawnManager) == 0x0003F8, "Member 'ABP_LootEvent_C::SpawnManager' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Collision_Method) == 0x000400, "Member 'ABP_LootEvent_C::Collision_Method' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, LootCrateSpawnPoints) == 0x000408, "Member 'ABP_LootEvent_C::LootCrateSpawnPoints' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, MapEntityID) == 0x000418, "Member 'ABP_LootEvent_C::MapEntityID' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, NumberOfLootedCrates) == 0x00041C, "Member 'ABP_LootEvent_C::NumberOfLootedCrates' has a wrong offset!");
static_assert(offsetof(ABP_LootEvent_C, Mission_Trigger) == 0x000420, "Member 'ABP_LootEvent_C::Mission_Trigger' has a wrong offset!");

}

