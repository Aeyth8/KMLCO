#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RTXGI

#include "Basic.hpp"

#include "RTXGI_classes.hpp"
#include "RTXGI_parameters.hpp"


namespace SDK
{

// Function RTXGI.DDGIVolumeComponent.ClearProbeData
// (Final, Native, Public, BlueprintCallable)

void UDDGIVolumeComponent::ClearProbeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "ClearProbeData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.DDGIClearVolumes
// (Final, Exec, Native, Public)

void UDDGIVolumeComponent::DDGIClearVolumes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "DDGIClearVolumes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetBlendingCutoffDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewBlendingCutoffDistance                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetBlendingCutoffDistance(float NewBlendingCutoffDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetBlendingCutoffDistance");

	Params::DDGIVolumeComponent_SetBlendingCutoffDistance Parms{};

	Parms.NewBlendingCutoffDistance = NewBlendingCutoffDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetBlendingDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewBlendingDistance                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetBlendingDistance(float NewBlendingDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetBlendingDistance");

	Params::DDGIVolumeComponent_SetBlendingDistance Parms{};

	Parms.NewBlendingDistance = NewBlendingDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetEmissiveMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewEmissiveMultiplier                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetEmissiveMultiplier(float NewEmissiveMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetEmissiveMultiplier");

	Params::DDGIVolumeComponent_SetEmissiveMultiplier Parms{};

	Parms.NewEmissiveMultiplier = NewEmissiveMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetIrradianceScalar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewIrradianceScalar                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetIrradianceScalar(float NewIrradianceScalar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetIrradianceScalar");

	Params::DDGIVolumeComponent_SetIrradianceScalar Parms{};

	Parms.NewIrradianceScalar = NewIrradianceScalar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetLightingPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLightingPriority                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetLightingPriority(float NewLightingPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetLightingPriority");

	Params::DDGIVolumeComponent_SetLightingPriority Parms{};

	Parms.NewLightingPriority = NewLightingPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetLightMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLightMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetLightMultiplier(float NewLightMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetLightMultiplier");

	Params::DDGIVolumeComponent_SetLightMultiplier Parms{};

	Parms.NewLightMultiplier = NewLightMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetNormalBias
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewNormalBias                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetNormalBias(float NewNormalBias)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetNormalBias");

	Params::DDGIVolumeComponent_SetNormalBias Parms{};

	Parms.NewNormalBias = NewNormalBias;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetProbesVisualization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsProbesVisualized                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetProbesVisualization(bool IsProbesVisualized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetProbesVisualization");

	Params::DDGIVolumeComponent_SetProbesVisualization Parms{};

	Parms.IsProbesVisualized = IsProbesVisualized;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetUpdatePriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewUpdatePriority                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetUpdatePriority(float NewUpdatePriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetUpdatePriority");

	Params::DDGIVolumeComponent_SetUpdatePriority Parms{};

	Parms.NewUpdatePriority = NewUpdatePriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.SetViewBias
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewViewBias                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::SetViewBias(float NewViewBias)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "SetViewBias");

	Params::DDGIVolumeComponent_SetViewBias Parms{};

	Parms.NewViewBias = NewViewBias;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.ToggleVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsVolumeEnabled                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDDGIVolumeComponent::ToggleVolume(bool IsVolumeEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "ToggleVolume");

	Params::DDGIVolumeComponent_ToggleVolume Parms{};

	Parms.IsVolumeEnabled = IsVolumeEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RTXGI.DDGIVolumeComponent.GetBlendingCutoffDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetBlendingCutoffDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetBlendingCutoffDistance");

	Params::DDGIVolumeComponent_GetBlendingCutoffDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RTXGI.DDGIVolumeComponent.GetBlendingDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetBlendingDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetBlendingDistance");

	Params::DDGIVolumeComponent_GetBlendingDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RTXGI.DDGIVolumeComponent.GetEmissiveMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetEmissiveMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetEmissiveMultiplier");

	Params::DDGIVolumeComponent_GetEmissiveMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RTXGI.DDGIVolumeComponent.GetIrradianceScalar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetIrradianceScalar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetIrradianceScalar");

	Params::DDGIVolumeComponent_GetIrradianceScalar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RTXGI.DDGIVolumeComponent.GetLightingPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetLightingPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetLightingPriority");

	Params::DDGIVolumeComponent_GetLightingPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RTXGI.DDGIVolumeComponent.GetLightMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetLightMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetLightMultiplier");

	Params::DDGIVolumeComponent_GetLightMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RTXGI.DDGIVolumeComponent.GetNormalBias
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetNormalBias() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetNormalBias");

	Params::DDGIVolumeComponent_GetNormalBias Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RTXGI.DDGIVolumeComponent.GetUpdatePriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetUpdatePriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetUpdatePriority");

	Params::DDGIVolumeComponent_GetUpdatePriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RTXGI.DDGIVolumeComponent.GetViewBias
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDDGIVolumeComponent::GetViewBias() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DDGIVolumeComponent", "GetViewBias");

	Params::DDGIVolumeComponent_GetViewBias Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

