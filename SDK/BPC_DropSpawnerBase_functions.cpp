#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_DropSpawnerBase

#include "Basic.hpp"

#include "BPC_DropSpawnerBase_classes.hpp"
#include "BPC_DropSpawnerBase_parameters.hpp"


namespace SDK
{

// Function BPC_DropSpawnerBase.BPC_DropSpawnerBase_C.CalculateTotalSpawnChance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBPC_DropSpawnerBase_C::CalculateTotalSpawnChance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_DropSpawnerBase_C", "CalculateTotalSpawnChance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_DropSpawnerBase.BPC_DropSpawnerBase_C.RollForLoot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UCAInventoryItem>  ChosenLoot                                             (Parm, OutParm, HasGetValueTypeHash)

void UBPC_DropSpawnerBase_C::RollForLoot(TSoftObjectPtr<class UCAInventoryItem>* ChosenLoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_DropSpawnerBase_C", "RollForLoot");

	Params::BPC_DropSpawnerBase_C_RollForLoot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChosenLoot != nullptr)
		*ChosenLoot = Parms.ChosenLoot;
}


// Function BPC_DropSpawnerBase.BPC_DropSpawnerBase_C.Create Loot Map
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBPC_DropSpawnerBase_C::Create_Loot_Map()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_DropSpawnerBase_C", "Create Loot Map");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_DropSpawnerBase.BPC_DropSpawnerBase_C.Drop Item
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angle_between_directions                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Upwards_Inclination                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Throw_Cone_Max_Half_Angle                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Throw_Velocity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Throw                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UseRightVector                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class ACAPickUp*>                ItemSpawned                                            (Parm, OutParm)

void UBPC_DropSpawnerBase_C::Drop_Item(int32 Amount, float Angle_between_directions, float Upwards_Inclination, float Throw_Cone_Max_Half_Angle, float Throw_Velocity, const struct FVector& Offset, bool Throw, bool UseRightVector, TArray<class ACAPickUp*>* ItemSpawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_DropSpawnerBase_C", "Drop Item");

	Params::BPC_DropSpawnerBase_C_Drop_Item Parms{};

	Parms.Amount = Amount;
	Parms.Angle_between_directions = Angle_between_directions;
	Parms.Upwards_Inclination = Upwards_Inclination;
	Parms.Throw_Cone_Max_Half_Angle = Throw_Cone_Max_Half_Angle;
	Parms.Throw_Velocity = Throw_Velocity;
	Parms.Offset = std::move(Offset);
	Parms.Throw = Throw;
	Parms.UseRightVector = UseRightVector;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemSpawned != nullptr)
		*ItemSpawned = std::move(Parms.ItemSpawned);
}

}

